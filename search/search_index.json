{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Using py3status, you can take control of your i3bar easily by:</p> <ul> <li>using one of the available modules shipped with py3status</li> <li>grouping multiple modules and automatically or manually cycle their display</li> <li>writing your own modules and have their output displayed on your bar</li> <li>handling click events on your i3bar and play with them in no time</li> <li>seeing your clock tick every second whatever your i3status interval</li> </ul> <p>No extra configuration file needed, just install &amp; enjoy!</p>"},{"location":"#about","title":"About","text":"<p>You will love py3status if you're using i3wm (or sway) and are frustrated by the i3status limitations on your i3bar such as:</p> <ul> <li>you cannot hack into it easily</li> <li>you want more than the built-in modules and their limited configuration</li> <li>you cannot pipe the result of one of more scripts or commands in your bar easily</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<ul> <li>no added configuration file, use the standard i3status.conf</li> <li>rely on i3status' strengths and its existing configuration as much as possible</li> <li>be extensible, it must be easy for users to add their own   stuff/output by writing a simple python class which will be loaded   and executed dynamically - easily allow interactivity with the i3bar</li> <li>add some built-in enhancement/transformation of basic i3status modules output</li> <li>support Python 3</li> </ul> <p>We apply the zen to improve this project and encourage everyone to read it!</p>"},{"location":"#need-help","title":"Need help?","text":"<p>Get help, share ideas or feedback, join community, report bugs, or others, see:</p>"},{"location":"#github","title":"GitHub","text":"<ul> <li>Issues /</li> <li>Pull requests</li> </ul>"},{"location":"#live-irc-chat","title":"Live IRC Chat","text":"<p>Join us on #py3status at oftc.net</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Install py3status then in your i3 config file, simply switch from <code>i3status</code> to <code>py3status</code> in your <code>status_command</code> option:</p> <pre><code>status_command py3status\n</code></pre> <p>Usually you have your own i3status configuration, just point to it:</p> <pre><code>status_command py3status -c ~/.config/i3status/config\n</code></pre>"},{"location":"getting-started/#check-out-all-the-available-modules","title":"Check out all the available modules","text":"<p>You can get a list with short descriptions of all available modules by using the CLI:</p> <pre><code>$ py3-cmd list --all\n</code></pre> <p>To get more details about all available modules and their configuration, use:</p> <pre><code>$ py3-cmd list --all --full\n</code></pre> <p>All modules shipped with py3status are present as the Python source files in the <code>py3status/modules</code> directory.</p>"},{"location":"getting-started/#adding-ordering-and-configuring-modules","title":"Adding, ordering and configuring modules","text":"<p>Check out the py3status user configuration guide to learn how to add, order and configure modules!</p>"},{"location":"getting-started/#py3status-options","title":"Py3status options","text":"<p>You can see the help of py3status by issuing <code>py3status --help</code>:</p> <pre><code>$ py3status --help\n\nusage: py3status [-h] [-b] [-c FILE] [-d] [-g] [-i PATH] [-l FILE] [-s]\n                 [-t INT] [-m] [-u PATH] [-v] [--wm WINDOW_MANAGER]\n\nThe agile, python-powered, i3status wrapper\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b, --dbus-notify     send notifications via dbus instead of i3-nagbar\n                        (default: False)\n  -c, --config FILE     load config (default: /home/alexys/.i3/i3status.conf)\n  -d, --debug           enable debug logging in syslog and --log-file\n                        (default: False)\n  -i, --include PATH    append additional user-defined module paths (default:\n                        None)\n  -l, --log-file FILE   enable logging to FILE (default: None)\n  -s, --standalone      run py3status without i3status (default: False)\n  -t, --timeout INT     default module cache timeout in seconds (default: 60)\n  -m, --disable-click-events\n                        disable all click events (default: False)\n  -u, --i3status PATH   specify i3status path (default: /usr/bin/i3status)\n  -v, --version         show py3status version and exit (default: False)\n  --wm WINDOW_MANAGER   specify window manager i3 or sway (default: i3)\n</code></pre>"},{"location":"getting-started/#going-further","title":"Going further","text":"<p>Py3status is very open and flexible, check out the complete user guide to get more intimate with it:</p> <ul> <li>user configuration guide</li> <li>available modules and options</li> <li>remote controlling py3status</li> </ul>"},{"location":"dev-guide/contributing/","title":"Developing and Contributing","text":"<p>Contributions to py3status including documentation, the core code, or for new or existing modules are very welcome.</p> <p>Please read carefully the zen describing the minimal things to keep in mind when contributing or participating to this project.</p> <p>Feel free to open an issue to propose your ideas as request for comments [RFC] and to join us on IRC OFTC #py3status channel for a live chat.</p> <p>To make a contribution please create a pull request.</p> <p>Any functional change should be done via pull requests, even by people with push access.</p> <p>Each PR requires at least one approval from project maintainers before a PR can be merged.</p>"},{"location":"dev-guide/contributing/#zen-of-py3status","title":"Zen of py3status","text":""},{"location":"dev-guide/contributing/#efficient-and-simple-defaults","title":"efficient and simple defaults","text":"<p>We like py3status because it's a drop-in replacement of i3status. i3 users don't expect fancy and magical things, they use i3 because it's simple and efficient. Keep configuration options and default formats as simple as possible</p>"},{"location":"dev-guide/contributing/#its-not-because-you-can-that-you-should","title":"it's not because you can that you should","text":"<p>On modules, expose things that you WILL use, not things that you COULD use. On core, make features and options as seamless as possible (lazy loading) with sane defaults and no mandatory requirements.</p>"},{"location":"dev-guide/contributing/#good-enough-is-good-enough","title":"good enough is good enough","text":"<p>Strive for and accept \"good enough\" features / proposals. We shall refrain from refining indefinitely.</p>"},{"location":"dev-guide/contributing/#one-featureidea-at-a-time","title":"one feature/idea at a time","text":"<p>Trust and foster iteration with your peers by refraining from digressions. Keep discussions focused on the initial topic and easy to get into. Proposals should not contain multiple features or corrections at once.</p>"},{"location":"dev-guide/contributing/#modules-are-responsible-for-user-information-and-interactions","title":"modules are responsible for user information and interactions","text":"<p>That is what's written in the bar and its behavior on clicks etc.</p>"},{"location":"dev-guide/contributing/#core-is-responsible-for-user-experience","title":"core is responsible for user experience","text":"<p>Core features and configuration options should focus on user experience. Things that are related to the general output of the bar are handled by core. Smart things overlaying modules (such as standardized options) should also end up in the core.</p>"},{"location":"dev-guide/contributing/#rely-on-i3status-color-scheme","title":"rely on i3status color scheme","text":"<p>No fancy colors by default, only i3status good/degraded/bad. If we want to provide enhanced coloring, this should be through a core feature such as thresholds.</p>"},{"location":"dev-guide/contributing/#rely-on-the-i3bar-protocol","title":"rely on the i3bar protocol","text":"<p>what's possible with it, we should support and offer.</p>"},{"location":"dev-guide/contributing/#what-you-will-need","title":"What you will need","text":"<ul> <li>python3</li> <li> <p>i3status:</p> <ul> <li>https://i3wm.org/i3status/</li> <li>https://github.com/i3/i3status</li> </ul> </li> <li> <p>pytest pytest-flake8:</p> <ul> <li>https://pypi.python.org/pypi/pytest</li> <li>https://pypi.python.org/pypi/pytest-flake8</li> </ul> </li> <li> <p>black:</p> <ul> <li>https://pypi.org/project/black/</li> </ul> </li> <li> <p>tox:</p> <ul> <li>https://pypi.org/project/tox/</li> </ul> </li> </ul>"},{"location":"dev-guide/contributing/#setting-up-a-development-environment","title":"Setting up a development environment","text":"<p>First clone the git repository</p> <pre><code># using https\n$ git clone https://github.com/ultrabug/py3status.git\n\n# using ssh (needs github account)\n$ git clone git@github.com:ultrabug/py3status.git\n</code></pre> <p>Run setup.py to install</p> <pre><code># cd to the directory containing setup.py\n$ cd py3status\n\n# install you may need to use sudo to have required permissions\n$ pip install -e .\n</code></pre> <p>you can now run py3status and any changes to the code you make will be available after a reload.</p> <p>Note</p> <p>py3status will only be installed for the version of python that you used to run <code>setup.py</code>.</p> <p>If you wish to have multiple versions available. First run <code>setup.py develop</code> using the required python versions. Next copy the executable eg <code>sudo cp /usr/bin/py3status /usr/bin/py3status2</code> Then edit the hashbang to point to your chosen python version.</p>"},{"location":"dev-guide/contributing/#python-versions","title":"Python versions","text":"<p>Starting with version 3.26, py3status will only run using python 3.</p>"},{"location":"dev-guide/contributing/#documentation","title":"Documentation","text":"<p>Documentation pages are located under the docs/ folder.</p> <p>To run the documentation site locally (useful for previewing changes), use:</p> <pre><code># you need to install hatch\n# pip install --user hatch\nhatch -e docs mkdocs serve\n</code></pre>"},{"location":"dev-guide/contributing/#tox","title":"tox","text":"<p>Py3status uses tox for testing. All submissions to the project must pass testing. To install these via pip use</p> <pre><code>$ pip install pytest\n$ pip install pytest-flake8\n$ pip install tox\n$ pip install black  # needs python 3.6+\n</code></pre> <p>The tests can be run by using <code>tox</code> in the py3status root directory.</p> <p>Tests are kept in the <code>tests</code> directory.</p>"},{"location":"dev-guide/contributing/#github-actions","title":"Github Actions","text":"<p>When you create your Pull Request, checks from the Github Actions CI will automatically run.</p> <p>If something fails in the CI:</p> <ul> <li>Take a look the build log</li> <li>If you don't get what is failing or why it is failing, feel free to   tell it as a comment in your PR: people here are helpful and   open-minded :)</li> <li>Once the problem is identified and fixed, rebase your commit with   the fix and push it on your fork to trigger the CI again</li> </ul>"},{"location":"dev-guide/contributing/#coding-in-containers","title":"Coding in containers","text":"<p>Warning, by default (at least on Archlinux), i3status has cap_net_admin capabilities, which will make it fail with <code>operation not permitted</code> when running inside a Docker container.</p> <pre><code>$ getcap `which i3status`\n/usr/sbin/i3status = cap_net_admin+ep\n</code></pre> <p>To allow it to run without these capabilities (hence disabling some of the functionalities), remove it with:</p> <pre><code>$ sudo setcap -r `which i3status`\n</code></pre>"},{"location":"dev-guide/contributing/#profiling-py3status","title":"Profiling py3status","text":"<p>A small tool to measure <code>py3status</code> performance between changes and allows testing of old versions, etc. It's a little clunky but it does the job. https://github.com/tobes/py3status-profiler</p> <pre><code># pprofile\nRunning tests for 10 minutes.\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100.00%  10:00  (22.12)\nuser 21.41s\nsystem 0.71s\ntotal 22.12s\n\n# vmprof\nRunning tests for 10 minutes.\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100.00%  10:00  (2.10)\nuser 1.77s\nsystem 0.33s\ntotal 2.1s\n\n# cprofile\nRunning tests for 10 minutes.\n[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100.00%  10:00  (0.92)\nuser 0.87s\nsystem 0.05s\ntotal 0.92\n</code></pre>"},{"location":"dev-guide/the-py3-helper/","title":"The py3 module helper","text":"<p>The Py3 module is a special helper object that gets injected into py3status modules, providing extra functionality. A module can access it via the <code>self.py3</code> instance attribute of its py3status class.</p>"},{"location":"dev-guide/the-py3-helper/#constants","title":"Constants","text":""},{"location":"dev-guide/the-py3-helper/#cache_forever","title":"CACHE_FOREVER","text":"<p>Special constant that when returned for <code>cached_until</code> will cause the module to not update unless externally triggered.</p>"},{"location":"dev-guide/the-py3-helper/#log_error","title":"LOG_ERROR","text":"<p>Show as Error</p>"},{"location":"dev-guide/the-py3-helper/#log_info","title":"LOG_INFO","text":"<p>Show as Informational</p>"},{"location":"dev-guide/the-py3-helper/#log_warning","title":"LOG_WARNING","text":"<p>Show as Warning</p>"},{"location":"dev-guide/the-py3-helper/#exceptions","title":"Exceptions","text":""},{"location":"dev-guide/the-py3-helper/#commanderror","title":"CommandError","text":"<p>An error occurred running the given command.</p> <p>This exception provides some additional attributes</p> <p><code>error_code</code>: The error code returned from the call</p> <p><code>output</code>: Any output returned by the call</p> <p><code>error</code>: Any error output returned by the call</p>"},{"location":"dev-guide/the-py3-helper/#py3exception","title":"Py3Exception","text":"<p>Base Py3 exception class.  All custom Py3 exceptions derive from this class.</p>"},{"location":"dev-guide/the-py3-helper/#requestexception","title":"RequestException","text":"<p>A Py3.request() base exception.  This will catch any of the more specific exceptions.</p>"},{"location":"dev-guide/the-py3-helper/#requestinvalidjson","title":"RequestInvalidJSON","text":"<p>The request has not returned valid JSON</p>"},{"location":"dev-guide/the-py3-helper/#requesttimeout","title":"RequestTimeout","text":"<p>A timeout has occurred during a request made via Py3.request().</p>"},{"location":"dev-guide/the-py3-helper/#requesturlerror","title":"RequestURLError","text":"<p>A URL related error has occurred during a request made via Py3.request().</p>"},{"location":"dev-guide/the-py3-helper/#methods","title":"Methods","text":""},{"location":"dev-guide/the-py3-helper/#check_commandscmd_list","title":"check_commands(cmd_list)","text":"<p>Checks to see if commands in list are available using shutil.which().</p> <p>returns the first available command.</p> <p>If a string is passed then that command will be checked for.</p>"},{"location":"dev-guide/the-py3-helper/#command_outputcommand-shellfalse-capture_stderrfalse-localizedfalse","title":"command_output(command, shell=False, capture_stderr=False, localized=False)","text":"<p>Run a command and return its output as unicode. The command can either be supplied as a sequence or string.</p> <p>:param command: command to run can be a str or list :param shell: if <code>True</code> then command is run through the shell :param capture_stderr: if <code>True</code> then STDERR is piped to STDOUT :param localized: if <code>False</code> then command is forced to use its default (English) locale</p> <p>A CommandError is raised if an error occurs</p>"},{"location":"dev-guide/the-py3-helper/#command_runcommand","title":"command_run(command)","text":"<p>Runs a command and returns the exit code. The command can either be supplied as a sequence or string.</p> <p>An Exception is raised if an error occurs</p>"},{"location":"dev-guide/the-py3-helper/#composite_createitem","title":"composite_create(item)","text":"<p>Create and return a Composite.</p> <p>The item may be a string, dict, list of dicts or a Composite.</p>"},{"location":"dev-guide/the-py3-helper/#composite_joinseparator-items","title":"composite_join(separator, items)","text":"<p>Join a list of items with a separator. This is used in joining strings, responses and Composites.</p> <p>A Composite object will be returned.</p>"},{"location":"dev-guide/the-py3-helper/#composite_updateitem-update_dict-softfalse","title":"composite_update(item, update_dict, soft=False)","text":"<p>Takes a Composite (item) if item is a type that can be converted into a Composite then this is done automatically.  Updates all entries it the Composite with values from update_dict.  Updates can be soft in which case existing values are not overwritten.</p> <p>A Composite object will be returned.</p>"},{"location":"dev-guide/the-py3-helper/#errormsg-timeoutnone","title":"error(msg, timeout=None)","text":"<p>Raise an error for the module.</p> <p>:param msg: message to be displayed explaining the error :param timeout: how long before we should retry.  For permanent errors     <code>py3.CACHE_FOREVER</code> should be returned.  If not supplied then the     modules <code>cache_timeout</code> will be used.</p>"},{"location":"dev-guide/the-py3-helper/#flatten_dictd-delimiter-intermediatesfalse-parent_keynone","title":"flatten_dict(d, delimiter='-', intermediates=False, parent_key=None)","text":"<p>Flatten a dictionary.</p> <p>Values that are dictionaries are flattened using delimiter in between (eg. parent-child)</p> <p>Values that are lists are flattened using delimiter followed by the index (eg. parent-0)</p> <p>example:</p> <pre><code>{\n    'fish_facts': {\n        'sharks': 'Most will drown if they stop moving',\n        'skates': 'More than 200 species',\n    },\n    'fruits': ['apple', 'peach', 'watermelon'],\n    'number': 52\n}\n\n# becomes\n\n{\n    'fish_facts-sharks': 'Most will drown if they stop moving',\n    'fish_facts-skates': 'More than 200 species',\n    'fruits-0': 'apple',\n    'fruits-1': 'peach',\n    'fruits-2': 'watermelon',\n    'number': 52\n}\n\n# if intermediates is True then we also get unflattened elements\n# as well as the flattened ones.\n\n{\n    'fish_facts': {\n        'sharks': 'Most will drown if they stop moving',\n        'skates': 'More than 200 species',\n    },\n    'fish_facts-sharks': 'Most will drown if they stop moving',\n    'fish_facts-skates': 'More than 200 species',\n    'fruits': ['apple', 'peach', 'watermelon'],\n    'fruits-0': 'apple',\n    'fruits-1': 'peach',\n    'fruits-2': 'watermelon',\n    'number': 52\n}\n</code></pre>"},{"location":"dev-guide/the-py3-helper/#format_containsformat_string-names","title":"format_contains(format_string, names)","text":"<p>Determines if <code>format_string</code> contains a placeholder string <code>names</code> or a list of placeholders <code>names</code>.</p> <p><code>names</code> is tested against placeholders using fnmatch so the following patterns can be used:</p> <pre><code>*       matches everything\n?       matches any single character\n[seq]   matches any character in seq\n[!seq]  matches any character not in seq\n</code></pre> <p>This is useful because a simple test like <code>'{placeholder}' in format_string</code> will fail if the format string contains placeholder formatting eg <code>'{placeholder:.2f}'</code></p>"},{"location":"dev-guide/the-py3-helper/#format_unitsvalue-unitb-optimal5-autotrue-sifalse","title":"format_units(value, unit='B', optimal=5, auto=True, si=False)","text":"<p>Takes a value and formats it for user output, we can choose the unit to use eg B, MiB, kbits/second.  This is mainly for use with bytes/bits it converts the value into a human readable form.  It has various additional options but they are really only for special cases.</p> <p>The function returns a tuple containing the new value (this is a number so that the user can still format it if required) and a unit that is the units that we have been converted to.</p> <p>By supplying unit to the function we can force those units to be used eg <code>unit=KiB</code> would force the output to be in Kibibytes.  By default we use non-si units but if the unit is si eg kB then we will switch to si units.  Units can also be things like <code>Mbit/sec</code>.</p> <p>If the auto parameter is False then we use the unit provided.  This only makes sense when the unit is singular eg 'Bytes' and we want the result in bytes and not say converted to MBytes.</p> <p>optimal is used to control the size of the output value.  We try to provide an output value of that number of characters (including decimal point), it may also be less due to rounding.  If a fixed unit is used the output may be more than this number of characters.</p>"},{"location":"dev-guide/the-py3-helper/#get_color_names_listformat_string-matchesnone","title":"get_color_names_list(format_string, matches=None)","text":"<p>Returns a list of color names in <code>format_string</code>.</p> <ul> <li>format_string: Accepts a format string.</li> <li>matches: Filter results with a string or a list of strings.</li> </ul> <p>If <code>matches</code> is provided then it is used to filter the result using fnmatch so the following patterns can be used:</p> <pre><code>*       matches everything\n?       matches any single character\n[seq]   matches any character in seq\n[!seq]  matches any character not in seq\n</code></pre>"},{"location":"dev-guide/the-py3-helper/#get_composite_stringformat_string","title":"get_composite_string(format_string)","text":"<p>Return a string from a Composite.</p>"},{"location":"dev-guide/the-py3-helper/#get_outputmodule_name","title":"get_output(module_name)","text":"<p>Return the output of the named module.  This will be a list.</p>"},{"location":"dev-guide/the-py3-helper/#get_placeholder_formats_listformat_string","title":"get_placeholder_formats_list(format_string)","text":"<p>Parses the format_string and returns a list of tuples [(placeholder, format), ...].</p> <p>eg <code>'{placeholder:.2f}'</code> will give <code>[('placeholder', ':.2f')]</code></p>"},{"location":"dev-guide/the-py3-helper/#get_placeholders_listformat_string-matchesnone","title":"get_placeholders_list(format_string, matches=None)","text":"<p>Returns a list of placeholders in <code>format_string</code>.</p> <p>If <code>matches</code> is provided then it is used to filter the result using fnmatch so the following patterns can be used:</p> <pre><code>*       matches everything\n?       matches any single character\n[seq]   matches any character in seq\n[!seq]  matches any character not in seq\n</code></pre> <p>This is useful because we just get simple placeholder without any formatting that may be applied to them eg <code>'{placeholder:.2f}'</code> will give <code>['{placeholder}']</code></p>"},{"location":"dev-guide/the-py3-helper/#get_wm_msg","title":"get_wm_msg()","text":"<p>Return the control program of the current window manager.</p> <p>On i3, will return \"i3-msg\" On sway, will return \"swaymsg\"</p>"},{"location":"dev-guide/the-py3-helper/#i3s_config","title":"i3s_config()","text":"<p>returns the i3s_config dict.</p>"},{"location":"dev-guide/the-py3-helper/#is_colorcolor","title":"is_color(color)","text":"<p>Tests to see if a color is defined. Because colors can be set to None in the config and we want this to be respected in an expression like.</p> <pre><code>color = self.py3.COLOR_MUTED or self.py3.COLOR_BAD\n</code></pre> <p>The color is treated as True but sometimes we want to know if the color has a value set in which case the color should count as False.  This function is a helper for this second case.</p>"},{"location":"dev-guide/the-py3-helper/#is_compositeitem","title":"is_composite(item)","text":"<p>Check if item is a Composite and return True if it is.</p>"},{"location":"dev-guide/the-py3-helper/#is_my_eventevent","title":"is_my_event(event)","text":"<p>Checks if an event triggered belongs to the module receiving it.  This is mainly for containers who will also receive events from any children they have.</p> <p>Returns True if the event name and instance match that of the module checking.</p>"},{"location":"dev-guide/the-py3-helper/#logmessage-levelinfo","title":"log(message, level='info')","text":"<p>Log the message. The level must be one of LOG_ERROR, LOG_INFO or LOG_WARNING</p>"},{"location":"dev-guide/the-py3-helper/#notify_usermsg-levelinfo-rate_limit5-titlenone-iconnone","title":"notify_user(msg, level='info', rate_limit=5, title=None, icon=None)","text":"<p>Send a notification to the user. level must be 'info', 'error' or 'warning'. rate_limit is the time period in seconds during which this message should not be repeated. icon must be an icon path or icon name.</p>"},{"location":"dev-guide/the-py3-helper/#play_soundsound_file","title":"play_sound(sound_file)","text":"<p>Plays sound_file if possible.</p>"},{"location":"dev-guide/the-py3-helper/#prevent_refresh","title":"prevent_refresh()","text":"<p>Calling this function during the on_click() method of a module will request that the module is not refreshed after the event. By default the module is updated after the on_click event has been processed.</p>"},{"location":"dev-guide/the-py3-helper/#register_functionfunction_name-function","title":"register_function(function_name, function)","text":"<p>Register a function for the module.</p> <p>The following functions can be registered:</p>"},{"location":"dev-guide/the-py3-helper/#content_function","title":"content_function()","text":"<p>Called to discover what modules a container is displaying.  This is used to determine when updates need passing on to the container and also when modules can be put to sleep.</p> <p>the function must return a set of module names that are being displayed.</p> <p>Note</p> <p>This function should only be used by containers.</p>"},{"location":"dev-guide/the-py3-helper/#urgent_functionmodule_names","title":"urgent_function(module_names)","text":"<p>This function will be called when one of the contents of a container has changed from a non-urgent to an urgent state.  It is used by the group module to switch to displaying the urgent module.</p> <p><code>module_names</code> is a list of modules that have become urgent</p> <p>Note</p> <p>This function should only be used by containers.</p>"},{"location":"dev-guide/the-py3-helper/#requesturl-paramsnone-datanone-headersnone-timeoutnone-authnone-cookiejarnone-retry_timesnone-retry_waitnone","title":"request(url, params=None, data=None, headers=None, timeout=None, auth=None, cookiejar=None, retry_times=None, retry_wait=None)","text":"<p>Make a request to a url and retrieve the results.</p> <p>If the headers parameter does not provide an 'User-Agent' key, one will be added automatically following the convention:</p> <pre><code>py3status/&lt;version&gt; &lt;per session random uuid&gt;\n</code></pre> <ul> <li>url: url to request eg <code>http://example.com</code></li> <li>params: extra query string parameters as a dict</li> <li>data: POST data as a dict.  If this is not supplied the GET method will be used</li> <li>headers: http headers to be added to the request as a dict</li> <li>timeout: timeout for the request in seconds</li> <li>auth: authentication info as tuple <code>(username, password)</code></li> <li>cookiejar: an object of a CookieJar subclass</li> <li>retry_times: how many times to retry the request</li> <li>retry_wait: how long to wait between retries in seconds</li> </ul> <p>returns: HttpResponse</p>"},{"location":"dev-guide/the-py3-helper/#safe_formatformat_string-param_dictnone-force_compositefalse-attr_getternone-max_widthnone","title":"safe_format(format_string, param_dict=None, force_composite=False, attr_getter=None, max_width=None)","text":"<p>Parser for advanced formatting.</p> <p>Unknown placeholders will be shown in the output eg <code>{foo}</code>.</p> <p>Square brackets <code>[]</code> can be used. The content of them will be removed from the output if there is no valid placeholder contained within. They can also be nested.</p> <p>A pipe (vertical bar) <code>|</code> can be used to divide sections the first valid section only will be shown in the output.</p> <p>A backslash <code>\\</code> can be used to escape a character eg <code>\\[</code> will show <code>[</code> in the output.</p> <p><code>\\?</code> is special and is used to provide extra commands to the format string,  example <code>\\?color=#FF00FF</code>. Multiple commands can be given using an ampersand <code>&amp;</code> as a separator, example <code>\\?color=#FF00FF&amp;show</code>.</p> <p><code>\\?if=&lt;placeholder&gt;</code> can be used to check if a placeholder exists. An exclamation mark <code>!</code> after the equals sign <code>=</code> can be used to negate the condition.</p> <p><code>\\?if=&lt;placeholder&gt;=&lt;value&gt;</code> can be used to determine if {} would be replaced with . <code>[]</code> in  don't need to be escaped. <p><code>{&lt;placeholder&gt;}</code> will be converted, or removed if it is None or empty. Formatting can also be applied to the placeholder Eg <code>{number:03.2f}</code>.</p> <p>example format_string:</p> <p><code>\"[[{artist} - ]{title}]|{file}\"</code> This will show <code>artist - title</code> if artist is present, <code>title</code> if title but no artist, and <code>file</code> if file is present but not artist or title.</p> <p>param_dict is a dictionary of placeholders that will be substituted. If a placeholder is not in the dictionary then if the py3status module has an attribute with the same name then it will be used.</p> <p>Composites can be included in the param_dict.</p> <p>The result returned from this function can either be a string in the case of simple parsing or a Composite if more complex.</p> <p>If force_composite parameter is True a composite will always be returned.</p> <p>attr_getter is a function that will when called with an attribute name as a parameter will return a value.</p> <p>max_width lets you to control the total max width of 'full_text' the module is allowed to output on the bar.</p>"},{"location":"dev-guide/the-py3-helper/#stop_sound","title":"stop_sound()","text":"<p>Stops any currently playing sounds for this module.</p>"},{"location":"dev-guide/the-py3-helper/#storage_delkeynone","title":"storage_del(key=None)","text":"<p>Remove the value stored with the key from storage. If key is not supplied then all values for the module are removed.</p>"},{"location":"dev-guide/the-py3-helper/#storage_getkey","title":"storage_get(key)","text":"<p>Retrieve a value for the module.</p>"},{"location":"dev-guide/the-py3-helper/#storage_items","title":"storage_items()","text":"<p>Return key, value pairs of the stored data for the module.</p> <p>Keys will contain the following metadata entries: - '_ctime': storage creation timestamp - '_mtime': storage last modification timestamp</p>"},{"location":"dev-guide/the-py3-helper/#storage_keys","title":"storage_keys()","text":"<p>Return a list of the keys for values stored for the module.</p> <p>Keys will contain the following metadata entries: - '_ctime': storage creation timestamp - '_mtime': storage last modification timestamp</p>"},{"location":"dev-guide/the-py3-helper/#storage_setkey-value","title":"storage_set(key, value)","text":"<p>Store a value for the module.</p>"},{"location":"dev-guide/the-py3-helper/#threshold_get_colorvalue-namenone","title":"threshold_get_color(value, name=None)","text":"<p>Obtain color for a value using thresholds.</p> <p>The value will be checked against any defined thresholds.  These should have been set in the i3status configuration.  If more than one threshold is needed for a module then the name can also be supplied. If the user has not supplied a named threshold but has defined a general one that will be used.</p> <p>If the gradients config parameter is True then rather than sharp thresholds we will use a gradient between the color values.</p> <ul> <li>value: numerical value to be graded</li> <li>name: accepts a string, otherwise 'threshold'     accepts 3-tuples to allow name with different     values eg ('name', 'key', 'thresholds')</li> </ul>"},{"location":"dev-guide/the-py3-helper/#time_insecondsnone-sync_tonone-offset0","title":"time_in(seconds=None, sync_to=None, offset=0)","text":"<p>Returns the time a given number of seconds into the future.  Helpful for creating the <code>cached_until</code> value for the module output.</p> <p>Note</p> <p>from version 3.1 modules no longer need to explicitly set a <code>cached_until</code> in their response unless they wish to directly control it.</p> <ul> <li> <p>seconds: specifies the number of seconds that should occur before the     update is required.  Passing a value of <code>CACHE_FOREVER</code> returns     <code>CACHE_FOREVER</code> which can be useful for some modules.</p> </li> <li> <p>sync_to: causes the update to be synchronized to a time period.  1 would     cause the update on the second, 60 to the nearest minute. By default we     synchronize to the nearest second. 0 will disable this feature.</p> </li> <li> <p>offset: is used to alter the base time used. A timer that started at a     certain time could set that as the offset and any synchronization would     then be relative to that time.</p> </li> </ul>"},{"location":"dev-guide/the-py3-helper/#trigger_eventmodule_name-event","title":"trigger_event(module_name, event)","text":"<p>Trigger an event on a named module.</p>"},{"location":"dev-guide/the-py3-helper/#updatemodule_namenone","title":"update(module_name=None)","text":"<p>Update a module.  If module_name is supplied the module of that name is updated.  Otherwise the module calling is updated.</p>"},{"location":"dev-guide/the-py3-helper/#update_placeholder_formatsformat_string-formats","title":"update_placeholder_formats(format_string, formats)","text":"<p>Update a format string adding formats if they are not already present. This is useful when for example a placeholder has a floating point value but by default we only want to show it to a certain precision.</p>"},{"location":"dev-guide/writing-modules/","title":"Writing custom py3status modules","text":"<p>Writing custom modules for py3status is as easy as declaring a Python class. This guide will teach you how.</p>"},{"location":"dev-guide/writing-modules/#importing-custom-modules","title":"Importing custom modules","text":"<p>First of all, it is important to know that py3status will try to find your custom modules in the following locations:</p> <ul> <li><code>~/.config/py3status/modules</code></li> <li><code>~/.config/i3status/py3status</code></li> <li><code>~/.config/i3/py3status</code></li> <li><code>~/.i3/py3status</code></li> </ul> <p>which if you are used to XDG_CONFIG paths relates to:</p> <ul> <li><code>XDG_CONFIG_HOME/py3status/modules</code></li> <li><code>XDG_CONFIG_HOME/i3status/py3status</code></li> <li><code>XDG_CONFIG_HOME/i3/py3status</code></li> <li><code>~/.i3/py3status</code></li> </ul> <p>You can also specify the modules location using <code>py3status -i &lt;path to custom modules directory&gt;</code> in your i3 configuration file.</p>"},{"location":"dev-guide/writing-modules/#example-1-the-basics-hello-world","title":"Example 1: The basics - Hello World!","text":"<p>Now let's start by looking at a simple example.</p> <p>Here we start with the most basic module that just outputs a static string to the status bar.</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nExample module that says 'Hello World!'\n\nThis demonstrates how to produce a simple custom module.\n\"\"\"\n\n\nclass Py3status:\n\n    def hello_world(self):\n        return {\n            'full_text': 'Hello World!',\n            'cached_until': self.py3.CACHE_FOREVER\n        }\n</code></pre>"},{"location":"dev-guide/writing-modules/#running-the-example","title":"Running the example","text":"<p>Save the file as <code>hello_world.py</code> in a directory that py3status will check for modules. By default it will look in <code>$HOME/.i3/py3status/</code> or you can specify additional directories using <code>--include</code> when you run py3status.</p> <p>You need to tell py3status about your new module, so in your <code>i3status.conf</code> add:</p> <pre><code>order += \"hello_world\"\n</code></pre> <p>Then restart i3 by pressing <code>Mod</code> + <code>Shift</code> + <code>R</code>. Your new module should now show up in the status bar.</p>"},{"location":"dev-guide/writing-modules/#how-does-it-work","title":"How does it work?","text":"<p>The <code>Py3status</code> class tells py3status that this is a module. The module gets loaded. py3status then calls any public methods that the class contains to get a response. In our example there is a single method <code>hello_world()</code>. Read more here: module methods.</p>"},{"location":"dev-guide/writing-modules/#the-response","title":"The response","text":"<p>The response that a method returns must be a python <code>dict</code>. It should contain at least two key / values.</p>"},{"location":"dev-guide/writing-modules/#full_text","title":"full_text","text":"<p>This is the text that will be displayed in the status bar.</p>"},{"location":"dev-guide/writing-modules/#cached_until","title":"cached_until","text":"<p>This tells py3status how long it should consider your response valid before it should re-run the method to get a fresh response. In our example our response will not need to be updated so we can use the special <code>self.py3.CACHE_FOREVER</code> constant. This tells py3status to consider our response always valid.</p> <p><code>cached_until</code> should be generated via the <code>self.py3.time_in()</code> method.</p>"},{"location":"dev-guide/writing-modules/#selfpy3","title":"self.py3","text":"<p>This is a special object that gets injected into py3status modules. It helps provide functionality for the module, such as the <code>CACHE_FOREVER</code> constant. Read more about the py3.</p>"},{"location":"dev-guide/writing-modules/#example-2-configuration-parameters","title":"Example 2: Configuration parameters","text":"<p>Allow users to supply configuration to a module.</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nExample module that says 'Hello World!' that can be customised.\n\nThis demonstrates how to use configuration parameters.\n\nConfiguration parameters:\n    format: Display format (default 'Hello World!')\n\"\"\"\n\n\nclass Py3status:\n\n    format = 'Hello World!'\n\n    def hello_world(self):\n        return {\n            'full_text': self.format,\n            'cached_until': self.py3.CACHE_FOREVER\n        }\n</code></pre> <p>This module still outputs 'Hello World' as before but now you can customise the output using your <code>i3status.config</code> for example to show the text in French.</p> <pre><code>hello_world {\n    format = 'Bonjour tout le monde!'\n}\n</code></pre> <p>In your module <code>self.format</code> will have been set to the value supplied in the config.</p>"},{"location":"dev-guide/writing-modules/#example-3-click-events","title":"Example 3: Click events","text":"<p>Catch click events and perform an action.</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nExample module that handles events\n\nThis demonstrates how to use events.\n\"\"\"\n\n\nclass Py3status:\n\n    def __init__(self):\n        self.full_text = 'Click me'\n\n    def click_info(self):\n        return {\n            'full_text': self.full_text,\n            'cached_until': self.py3.CACHE_FOREVER\n        }\n\n    def on_click(self, event):\n        \"\"\"\n        event will be a dict like\n        {'y': 13, 'x': 1737, 'button': 1, 'name': 'example', 'instance': 'first'}\n        \"\"\"\n        button = event['button']\n        # update our output (self.full_text)\n        format_string = 'You pressed button {button}'\n        data = {'button': button}\n        self.full_text = self.py3.safe_format(format_string, data)\n        # Our modules update methods will get called automatically.\n</code></pre> <p>The <code>on_click</code> method of a module is special and will get called when the module is clicked on. The event parameter will be a dict that gives information about the event.</p> <p>A typical event dict will look like this: <code>{'y': 13, 'x': 1737, 'button': 1, 'name': 'example', 'instance': 'first'}</code></p> <p>You should only receive events for the module clicked on, so generally we only care about the button.</p> <p>The <code>__init__()</code> method is called when our class is instantiated.</p> <p>Note</p> <p>init is called before any config parameters have been set.</p> <p>We use the <code>safe_format()</code> method of <code>py3</code> for formatting. Read more about the py3.</p>"},{"location":"dev-guide/writing-modules/#example-4-status-string-placeholders","title":"Example 4: Status string placeholders","text":"<p>Status string placeholders allow us to add information to formats.</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nExample module that demonstrates status string placeholders\n\nConfiguration parameters:\n    format: Initial format to use\n        (default 'Click me')\n    format_clicked: Display format to use when we are clicked\n        (default 'You pressed button {button}')\n\nFormat placeholders:\n    {button} The button that was pressed\n\"\"\"\n\n\nclass Py3status:\n    format = 'Click me'\n    format_clicked = 'You pressed button {button}'\n\n    def __init__(self):\n        self.button = None\n\n    def click_info(self):\n        if self.button:\n            data = {'button': self.button}\n            full_text = self.py3.safe_format(self.format_clicked, data)\n        else:\n            full_text = self.format\n\n        return {\n            'full_text': full_text,\n            'cached_until': self.py3.CACHE_FOREVER\n        }\n\n    def on_click(self, event):\n        \"\"\"\n        event will be a dict like\n        {'y': 13, 'x': 1737, 'button': 1, 'name': 'example', 'instance': 'first'}\n        \"\"\"\n        self.button = event['button']\n        # Our modules update methods will get called automatically.\n</code></pre> <p>This works just like the previous example but we can now be customised. The following example assumes that our module has been saved as click_info.py.</p> <pre><code>click_info {\n    format = \"Cliquez ici\"\n    format_clicked = \"Vous avez appuy\u00e9 sur le bouton {button}\"\n}\n</code></pre>"},{"location":"dev-guide/writing-modules/#example-5-using-color-constants","title":"Example 5: Using color constants","text":"<p><code>self.py3</code> in our module has color constants that we can access, these allow the user to set colors easily in their config.</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nExample module that uses colors.\n\nWe generate a random number between and color it depending on its value.\nClicking on the module will update it an a new number will be chosen.\n\nConfiguration parameters:\n    format: Initial format to use\n        (default 'Number {number}')\n\nFormat placeholders:\n    {number} Our random number\n\nColor options:\n    color_high: number is 5 or higher\n    color_low: number is less than 5\n\"\"\"\n\nfrom random import randint\n\n\nclass Py3status:\n    format = 'Number {number}'\n\n    def random(self):\n        number = randint(0, 9)\n        full_text = self.py3.safe_format(self.format, {'number': number})\n\n        if number &lt; 5:\n            color = self.py3.COLOR_LOW\n        else:\n            color = self.py3.COLOR_HIGH\n\n        return {\n            'full_text': full_text,\n            'color': color,\n            'cached_until': self.py3.CACHE_FOREVER\n        }\n\n    def on_click(self, event):\n        # by defining on_click pressing any mouse button will refresh the\n        # module.\n        pass\n</code></pre> <p>The colors can be set in the config in the module or its container or in the general section. The following example assumes that our module has been saved as <code>number.py</code>. Although the constants are capitalized they are defined in the config in lower case.</p> <pre><code>number {\n    color_high = '#FF0000'\n    color_low = '#00FF00'\n}\n</code></pre>"},{"location":"dev-guide/writing-modules/#module-methods","title":"Module methods","text":"<p>Py3status will call a method in a module to provide output to the i3bar. Methods that have names starting with an underscore will not be used in this way. Any methods defined as static methods will also not be used.</p>"},{"location":"dev-guide/writing-modules/#outputs","title":"Outputs","text":"<p>Output methods should provide a response dict.</p> <p>Example response:</p> <pre><code>{\n    'full_text': \"This text will be displayed\",\n    'cached_until': 1470922537,  # Time in seconds since the epoch\n}\n</code></pre> <p>The response can include the following keys</p> <p>cached_until</p> <p>The time (in seconds since the epoch) that the output will be classed as no longer valid and the output function will be called again.</p> <p>Since version 3.1, if no <code>cached_until</code> value is provided the output will be cached for <code>cache_timeout</code> seconds by default this is <code>60</code> and can be set using the <code>-t</code> or <code>--timeout</code> option when running py3status. To never expire the <code>self.py3.CACHE_FOREVER</code> constant should be used.</p> <p><code>cached_until</code> should be generated via the <code>self.py3.time_in()</code> method.</p> <p>color</p> <p>The color that the module output will be displayed in.</p> <p>composite</p> <p>Used to output more than one item to i3bar from a single output method. If this is provided then <code>full_text</code> should not be.</p> <p>full_text</p> <p>This is the text output that will be sent to i3bar.</p> <p>index</p> <p>The index of the output. Allows composite output to identify which component of their output had an event triggered.</p> <p>separator</p> <p>If <code>False</code> no separator will be shown after the output block (requires i3bar 4.12).</p> <p>urgent</p> <p>If <code>True</code> the output will be shown as urgent in i3bar.</p>"},{"location":"dev-guide/writing-modules/#special-methods","title":"Special methods","text":"<p>Some special method are also defined.</p> <p>kill()</p> <p>Called just before a module is destroyed.</p> <p>on_click(event)</p> <p>Called when an event is received by a module.</p> <p>post_config_hook()</p> <p>Called once an instance of a module has been created and the configuration parameters have been set. This is useful for any work a module must do before its output methods are run for the first time. <code>post_config_hook()</code> introduced in version 3.1</p>"},{"location":"dev-guide/writing-modules/#py3-module-helper","title":"Py3 module helper","text":"<p>Py3 is a special helper object that gets injected into py3status modules, providing extra functionality. A module can access it via the self.py3 instance attribute of its py3status class. For details see py3.</p>"},{"location":"dev-guide/writing-modules/#composites","title":"Composites","text":"<p>Whilst most modules return a simple response eg:</p> <pre><code>{\n    'full_text': &lt;some text&gt;,\n    'cached_until': &lt;cache time&gt;,\n}\n</code></pre> <p>Sometimes it is useful to provide a more complex, composite response. A composite is made up of more than one simple response which allows for example a response that has multiple colors. Different parts of the response can also be differentiated between when a click event occurs and so allow clicking on different parts of the response to have different outcomes. The different parts of the composite will not have separators between them in the output so they will appear as a single module to the user.</p> <p>The format of a composite is as follows:</p> <pre><code>{\n    'cached_until': &lt;cache time&gt;,\n    'composite': [\n        {\n            'full_text': &lt;some text&gt;,\n        },\n        {\n            'full_text': &lt;some more text&gt;,\n            'index': &lt;some index&gt;\n        },\n    ]\n}\n</code></pre> <p>The <code>index</code> key in the response is used to identify the individual block and when the modules <code>on_click()</code> method is called the event will include this. Supplied index values should be strings. If no index is given then it will have an integer value indicating its position in the composite.</p>"},{"location":"dev-guide/writing-modules/#module-data-storage","title":"Module data storage","text":"<p>Py3status allows modules to maintain state through the use of the storage functions of the Py3 helper.</p> <p>Currently bool, int, float, None, unicode, dicts, lists, datetimes etc are supported. Basically anything that can be pickled. We do our best to ensure that the resulting pickles are compatible with both python versions 2 and 3.</p> <p>The following helper functions are defined in the modules py3.</p> <p>These functions may return <code>None</code> if storage is not available as well as some metadata such as storage creation timestamp <code>_ctime</code> and last modification timestamp <code>_mtime</code>.</p> <p>Example:</p> <pre><code>def module_function(self):\n    # set some storage\n    self.py3.storage_set('my_key', value)\n    # get the value or None if key not present\n    value = self.py3.storage_get('my_key')\n</code></pre>"},{"location":"dev-guide/writing-modules/#module-documentation","title":"Module documentation","text":"<p>All contributed modules should have correct documentation. This documentation is in a specific format and is used to generate user documentation.</p> <p>The docstring of a module is used. The format is as follows:</p> <ul> <li>Single line description of the module followed by a single blank     line.</li> <li>Longer description of the module providing more detail.</li> <li>Configuration parameters. This section describes the user settable     parameters for the module. All parameters should be listed (in     alphabetical order). default values should be given in parentheses     eg <code>(default 7)</code>.</li> <li>Format placeholders. These are used for substituting values in     format strings. All placeholders should be listed (in alphabetical     order) and describe the output that they provide.</li> <li>Color options. These are the color options that can be provided for     this module. All color options should be listed (in alphabetical     order) that the module uses.</li> <li>Requires. A list of all the additional requirements for the module     to work. These may be command line utilities, python libraries etc.</li> <li>Example. Example configurations for the module can be given.</li> <li>Author and license. Finally information on the modules author and a     license can be provided.</li> </ul> <p>Here is an example of a docstring.</p> <pre><code>\"\"\"\nSingle line summary\n\nLonger description of the module.  This should help users understand the\nmodules purpose.\n\nConfiguration parameters:\n    parameter: Explanation of this parameter (default &lt;value&gt;)\n    parameter_other: This parameter has a longer explanation that continues\n        onto a second line so it is indented.\n        (default &lt;value&gt;)\n\nFormat placeholders:\n    {info} Description of the placeholder\n\nColor options:\n    color_meaning: what this signifies, defaults to color_good\n    color_meaning2: what this signifies\n\nRequires:\n    program: Information about the program\n    python_lib: Information on the library\n\nExample:\n\n</code></pre> <p>module {     parameter = \"Example\"     parameter_other = 7 }</p> <pre><code>\n@author &lt;author&gt;\n@license &lt;license&gt;\n\"\"\"\n</code></pre>"},{"location":"dev-guide/writing-modules/#deprecation-of-configuration-parameters","title":"Deprecation of configuration parameters","text":"<p>Sometimes it is necessary to deprecate configuration parameters. Modules are able to specify information about deprecation so that it can be done automatically. Deprecation information is specified in the Meta class of a py3status module using the deprecated attribute. The following types of deprecation are supported.</p> <p>The deprecation types will be performed in the order here.</p> <p>rename</p> <p>The parameter has been renamed. We will update the configuration to use the new name.</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        deprecated = {\n            'rename': [\n                {\n                    'param': 'format_available',  # parameter name to be renamed\n                    'new': 'icon_available',   # the parameter that will get the value\n                    'msg': 'obsolete parameter use `icon_available`',  # message\n                },\n            ],\n        }\n</code></pre> <p>format_fix_unnamed_param</p> <p>Some formats used <code>{}</code> as a placeholder this needs to be updated to a named placeholder eg <code>{value}</code>.</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        deprecated = {\n            'format_fix_unnamed_param': [\n                {\n                    'param': 'format',  # parameter to be changed\n                    'placeholder': 'percent',  # the place holder to use\n                    'msg': '{} should not be used in format use `{percent}`',  # message\n                },\n            ],\n        }\n</code></pre> <p>rename_placeholder</p> <p>We can use this to rename placeholders in format strings</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        deprecated = {\n            'rename_placeholder': [\n                {\n                    'placeholder': 'cpu',  # old placeholder name\n                    'new': 'cpu_usage',  # new placeholder name\n                    'format_strings': ['format'],  # config settings to update\n                },\n            ],\n        }\n</code></pre> <p>update_placeholder_format</p> <p>This allows us to update the format of a placeholder in format strings. The key value pairs {placeholder: format} can be supplied as a dict in <code>placeholder_formats</code> or the dict can be provided by <code>function</code> the function will be called with the current config and must return a dict. If both are supplied then <code>placeholder_formats</code> will be updated using the dict supplied by the function.</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        deprecated = {\n            'update_placeholder_format': [\n                {\n                    'function': update_placeholder_format,  # function returning dict\n                    'placeholder_formats': {   # dict of placeholder:format\n                        'cpu_usage': ':.2f',\n                    },\n                    'format_strings': ['format'],  # config settings to update\n                }\n            ],\n        }\n</code></pre> <p>substitute_by_value</p> <p>This allows one configuration parameter to set the value of another.</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        deprecated = {\n            'substitute_by_value': [\n                {\n                    'param': 'mode',  # parameter to be checked for substitution\n                    'value': 'ascii_bar',  # value that will trigger the substitution\n                    'substitute': {\n                        'param': 'format',  # parameter to be updated\n                        'value': '{ascii_bar}',  # the value that will be set\n                    },\n                    'msg': 'obsolete parameter use `format = \"{ascii_bar}\"`',  #message\n                },\n            ],\n        }\n</code></pre> <p>function</p> <p>For more complex substitutions a function can be defined that will be called with the config as a parameter. This function must return a dict of key value pairs of parameters to update</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        # Create a function to be called\n        def deprecate_function(config):\n            # This function must return a dict\n            return {'thresholds': [\n                        (0, 'bad'),\n                        (config.get('threshold_bad', 20), 'degraded'),\n                        (config.get('threshold_degraded', 50), 'good'),\n                    ],\n            }\n\n        deprecated = {\n            'function': [\n                {\n                    'function': deprecate_function,  # function to be called\n                },\n            ],\n        }\n</code></pre> <p>remove</p> <p>The parameters will be removed.</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        deprecated = {\n            'remove': [\n                {\n                    'param': 'threshold_bad',  # name of parameter to remove\n                    'msg': 'obsolete set using thresholds parameter',  #message\n                },\n            ],\n        }\n</code></pre>"},{"location":"dev-guide/writing-modules/#updating-of-configuration-parameters","title":"Updating of configuration parameters","text":"<p>Sometimes it is necessary to update configuration parameters. Modules are able to specify information about updates so that it can be done automatically. Config updating information is specified in the Meta class of a py3status module using the update_config attribute. The following types of updates are supported.</p> <p>update_placeholder_format</p> <p>This allows us to update the format of a placeholder in format strings. The key value pairs {placeholder: format} can be supplied as a dict in <code>placeholder_formats</code> or the dict can be provided by <code>function</code> the function will be called with the current config and must return a dict. If both are supplied then <code>placeholder_formats</code> will be updated using the dict supplied by the function.</p> <p>This is similar to the deprecation method but is to allow default formatting of placeholders to be set.</p> <p>In a module like sysdata we have placeholders eg <code>{cpu_usage}</code> this ends up having a value something like <code>20.542317173377157</code> which is strange as the value to use but gives the user the ability to have as much precision as they want. A module writer may decide that they want this displayed as <code>20.54</code> so <code>{cpu_usage:.2f}</code> would do this. Having a default format containing that just looks long/silly and the user setting a custom format just wants to do <code>format = 'CPU: {cpu_usage}%'</code> and get expected results ie not the full precision. If they don't like the default formatting of the number they could still do format = 'CPU: {cpu_usage:d}%' etc.</p> <p>So using this allows sensible defaults formatting and allows simple placeholders for user configurations.</p> <pre><code>class Py3status:\n\n    class Meta:\n\n        update_config = {\n            'update_placeholder_format': [\n                {\n                    'placeholder_formats': {   # dict of placeholder:format\n                        'cpu_usage': ':.2f',\n                    },\n                    'format_strings': ['format'],  # config settings to update\n                }\n            ],\n        }\n</code></pre>"},{"location":"dev-guide/writing-modules/#module-testing","title":"Module testing","text":"<p>Each module should be able to run independently for testing purposes. This is simply done by adding the following code to the bottom of your module.</p> <pre><code>if __name__ == \"__main__\":\n    \"\"\"\n    Run module in test mode.\n    \"\"\"\n    from py3status.module_test import module_test\n    module_test(Py3status)\n</code></pre> <p>If a specific config should be provided for the module test, this can be done as follows.</p> <pre><code>if __name__ == \"__main__\":\n    \"\"\"\n    Run module in test mode.\n    \"\"\"\n    config = {\n        'always_show': True,\n    }\n    from py3status.module_test import module_test\n    module_test(Py3status, config=config)\n</code></pre> <p>Such modules can then be tested independently by running <code>python /path/to/module.py</code>.</p> <pre><code>$ python loadavg.py\n[{'full_text': 'Loadavg ', 'separator': False,\n'separator_block_width': 0, 'cached_until': 1538755796.0},\n{'full_text': '1.87 1.73 1.87', 'color': '#9DD7FB'}]\n^C\n</code></pre> <p>We also can produce an output similar to i3bar output in terminal with <code>python /path/to/module.py --term</code>.</p> <pre><code>$ python loadavg.py --term\nLoadavg 1.41 1.61 1.82\nLoadavg 1.41 1.61 1.82\nLoadavg 1.41 1.61 1.82\n^C\n</code></pre>"},{"location":"dev-guide/writing-modules/#publishing-custom-modules-on-pypi","title":"Publishing custom modules on PyPI","text":"<p>You can share your custom modules and make them available for py3status users even if they are not directly part of the py3status main project!</p> <p>All you have to do is to package your module and publish it to PyPI.</p> <p>py3status will discover custom modules if they are installed in the same host interpreter and if an entry_point in your package <code>setup.py</code> is defined:</p> <pre><code>setup(\n    entry_points={\"py3status\": [\"module = package_name.py3status_module_name\"]},\n)\n</code></pre> <p>The awesome pewpew module can be taken as an example on how to do it easily:</p> <ul> <li>Module repository: https://github.com/obestwalter/py3status-pewpew</li> <li>Example setup.py:     https://github.com/obestwalter/py3status-pewpew/blob/master/setup.py</li> </ul> <p>We will gladly add <code>extra_requires</code> pointing to your modules so that users can require them while installing py3status. Just open an issue to request this or propose a PR.</p> <p>If you have installed py3status in a virtualenv (maybe because your custom module has dependencies that need to be available) you can also create an installable package from your module and publish it on PyPI.</p> <p>Note</p> <p>To clearly identify your py3status package and for others to discover it easily it is recommended to name the PyPI package <code>py3status-&lt;your module name&gt;</code>.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>py3status comes with a large range of modules.</p> <p>Modules in py3status are configured using your usual <code>i3status.conf</code> or your own <code>py3status.conf</code> which follows the exact same format.</p> <p>py3status will try to find its configuration file in the following locations:</p> <ul> <li><code>~/.config/py3status/config</code></li> <li><code>~/.config/i3status/config</code></li> <li><code>~/.config/i3/i3status.conf</code></li> <li><code>~/.i3status.conf</code></li> <li><code>~/.i3/i3status.conf</code></li> <li><code>/etc/xdg/i3status/config</code></li> <li><code>/etc/i3status.conf</code></li> </ul> <p>which if you are used to XDG_CONFIG paths relates to:</p> <ul> <li><code>XDG_CONFIG_HOME/py3status/config</code></li> <li><code>XDG_CONFIG_HOME/i3status/config</code></li> <li><code>XDG_CONFIG_HOME/i3/i3status.conf</code></li> <li><code>~/.i3status.conf</code></li> <li><code>~/.i3/i3status.conf</code></li> <li><code>XDG_CONFIG_DIRS/i3status/config</code></li> <li><code>/etc/i3status.conf</code></li> </ul> <p>You can also specify the config location using <code>py3status -c &lt;path to config file&gt;</code> in your i3 configuration file.</p>"},{"location":"user-guide/configuration/#loading-and-ordering-py3status-modules","title":"Loading and ordering py3status modules","text":"<p>To load a py3status module you just have to list it like any other i3status module using the <code>order +=</code> parameter.</p> <p>Ordering your py3status modules in your i3bar is just the same as i3status modules, just list the order parameter where you want your module to be displayed.</p> <p>For example you could insert and load the <code>imap</code> module like this:</p> <pre><code>order += \"disk /home\"\norder += \"disk /\"\norder += \"imap\"\norder += \"time\"\n</code></pre>"},{"location":"user-guide/configuration/#configuring-a-py3status-module","title":"Configuring a py3status module","text":"<p>Your py3status modules are configured the exact same way as i3status modules, directly from your <code>i3status.conf</code> (or your own configuration file), like this :</p> <pre><code># configure the py3status imap module\n# and run thunderbird when I left click on it\nimap {\n    cache_timeout = 60\n    imap_server = 'imap.myprovider.com'\n    mailbox = 'INBOX'\n    password = 'coconut'\n    port = '993'\n    user = 'mylogin'\n    on_click 1 = \"exec thunderbird\"\n}\n</code></pre>"},{"location":"user-guide/configuration/#modules-dependencies","title":"Modules dependencies","text":"<p>Py3status itself does not handle the possible dependencies of the modules you use. Each module's documentation has a dedicated <code>Requires</code> section allowing you to know which libraries or binaries they depend on. It's up to you to install them on your system.</p>"},{"location":"user-guide/configuration/#the-py3status-configuration-section","title":"The py3status configuration section","text":"<p>This special section holds py3status specific configuration. Settings here will affect all py3status modules. Many settings e.g. colors can still be overridden by also defining in the individual module.</p> <ul> <li><code>stop_signal</code>. Specify a signal number to be used by i3bar to stop/resume the bar refresh. This is useful if you want to prevent i3bar from stopping py3status when the bar is not visible (hidden/fullscreen).</li> </ul> <pre><code># prevent i3bar from stopping py3status when hidden/fullscreen\npy3status {\n    stop_signal = 0\n}\n</code></pre> <ul> <li><code>nagbar_font</code>. Specify a font for <code>i3-nagbar -f &lt;font&gt;</code>.</li> </ul> <pre><code>py3status {\n    nagbar_font = 'pango:Ubuntu Mono 12'\n}\n</code></pre> <ul> <li><code>storage</code>: Set storage name or path.</li> </ul> <p>Store cache in <code>$XDG_CACHE_HOME</code> or <code>~/.cache</code>:</p> <pre><code># default behavior\npy3status {\n    storage = 'py3status_cache.data'\n}\n</code></pre> <p>Store per config cache in <code>$XDG_CACHE_HOME</code> or <code>~/.cache</code>:</p> <pre><code># first config\npy3status {\n    storage = 'py3status_top.data'\n}\n</code></pre> <pre><code># second config\npy3status {\n    storage = 'py3status_bottom.data'\n}\n</code></pre> <p>Store per config cache in different directories:</p> <pre><code># first config\npy3status {\n    storage = '~/.config/py3status/cache_top.data'\n}\n</code></pre> <pre><code># second config\npy3status {\n    storage = '~/.config/py3status/cache_bottom.data'\n}\n</code></pre>"},{"location":"user-guide/configuration/#generic-per-module-configuration","title":"Generic per-module configuration","text":"<p>You can specify the following options in module configuration.</p> <ul> <li><code>min_length</code>: Specify a minimum length of characters for modules.</li> <li><code>position</code>: Specify how modules should be positioned when the     <code>min_length</code> is not reached. Either <code>left</code> (default), <code>center</code>, or     <code>right</code>.</li> </ul> <pre><code>static_string {\n    min_length = 15\n    position = 'center'\n}\n</code></pre>"},{"location":"user-guide/configuration/#generic-configuration-applying-to-all-modules","title":"Generic configuration applying to all modules","text":"<p>You can specify the options in module or py3status configuration section.</p> <p>The following options will work on <code>i3</code>.</p> <ul> <li><code>align</code>: Specify how modules should be aligned when the <code>min_width</code>   is not reached. Either <code>left</code> (default), <code>center</code>, or <code>right</code>.</li> <li><code>background</code>: Specify a background color for py3status modules.</li> <li><code>markup</code>: Specify how modules should be parsed.</li> <li><code>min_width</code>: Specify a minimum width of pixels for modules.</li> <li><code>separator</code>: Specify a separator boolean for modules.</li> <li><code>separator_block_width</code>: Specify a separator block width for   modules.</li> </ul> <p>The following options will work on <code>i3-gaps</code>.</p> <ul> <li><code>border</code>: Specify a border color for modules.</li> <li><code>border_bottom</code>: Specify a border width for modules</li> <li><code>border_left</code>: Specify a border width for modules.</li> <li><code>border_right</code>: Specify a border width for modules.</li> <li><code>border_top</code>: Specify a border width for modules.</li> </ul> <p>The following options will work on <code>py3status</code>.</p> <ul> <li><code>min_length</code>: Specify a minimum length of characters for modules.</li> <li><code>position</code>: Specify how modules should be positioned when the   <code>min_length</code> is not reached. Either <code>left</code> (default), <code>center</code>, or   <code>right</code>.</li> </ul> <pre><code># customize a theme\npy3status {\n   align = 'left'\n   markup = 'pango'\n   min_width = 20\n   separator = True\n   separator_block_width = 9\n\n   background = '#285577'\n   border = '#4c7899'\n   border_bottom = 1\n   border_left = 1\n   border_right = 1\n   border_top = 1\n\n   min_length = 15\n   position = 'right'\n}\n</code></pre> <p>You can specify the options in module or py3status configuration section.</p> <p>The following options will work on <code>i3bar</code> and <code>py3status</code>.</p> <ul> <li><code>urgent_background</code>: Specify urgent background color for modules.</li> <li><code>urgent_foreground</code>: Specify urgent foreground color for modules.</li> <li><code>urgent_border</code>: Specify urgent border color for modules.</li> </ul> <p>The following options will work on <code>i3bar-gaps</code> and <code>py3status</code>.</p> <ul> <li><code>urgent_border_bottom</code>: Specify urgent border width for modules</li> <li><code>urgent_border_left</code>: Specify urgent border width for modules.</li> <li><code>urgent_border_right</code>: Specify urgent border width for modules.</li> <li><code>urgent_border_top</code>: Specify urgent border width for modules.</li> </ul> <p>You lose urgent functionality too that can be sometimes utilized by container modules, e.g., frame and group.</p> <pre><code># customize urgent\npy3status {\n   urgent_background  = 'blue'\n   urgent_foreground = 'white'\n   urgent_border = 'red'\n   urgent_border_bottom = 1\n   urgent_border_left = 1\n   urgent_border_right = 1\n   urgent_border_top = 1\n}\n</code></pre> <p>You can specify the options in module or py3status configuration section.</p> <ul> <li><code>resources</code>: Specify a list of 3-tuples, e.g.,   <code>[(option, resource, fallback)]</code>, to import resources.</li> </ul> <pre><code># import resources\npy3status {\n   resources = [\n       ('color_bad', '*color9', 'lightcoral'),\n       ('color_good', '*color10', 'lightgreen'),\n       ('color_degraded', '*color11', 'khaki'),\n       ('nagbar_font', 'py3status.font', 'pango:Ubuntu Mono 12'),\n   ]\n}\n</code></pre> <pre><code># import 16 colors\npy3status {\n   resources = [\n       ('color_color0', '*color0', 'black'),\n       ('color_color1', '*color1', 'black'),\n       ('color_color2', '*color2', 'black'),\n       ('color_color3', '*color3', 'black'),\n       ('color_color4', '*color4', 'black'),\n       ('color_color5', '*color5', 'black'),\n       ('color_color6', '*color6', 'black'),\n       ('color_color7', '*color7', 'black'),\n       ('color_color8', '*color8', 'black'),\n       ('color_color9', '*color9', 'black'),\n       ('color_color10', '*color10', 'black'),\n       ('color_color11', '*color11', 'black'),\n       ('color_color12', '*color12', 'black'),\n       ('color_color13', '*color13', 'black'),\n       ('color_color14', '*color14', 'black'),\n       ('color_color15', '*color15', 'black'),\n   ]\n}\n\n# apply colors\ncoin_market {\n    thresholds = [(-100, \"color9\"), (0, \"color10\")]\n}\n</code></pre>"},{"location":"user-guide/configuration/#configuration-obfuscation","title":"Configuration obfuscation","text":"<p>Py3status allows you to hide individual configuration parameters so that they do not leak into log files, user notifications or to the i3bar. Additionally they allow you to obfuscate configuration parameters using base64 encoding.</p> <p>To \"hide\" a value you can use the <code>hide()</code> configuration function. This prevents the module displaying the value as a format placeholder and from appearing in the logs.</p> <pre><code># Example of 'hidden' configuration\nimap {\n    imap_server = 'imap.myprovider.com'\n    password = hide('hunter22')\n    user = 'mylogin'\n}\n</code></pre> <p>To base64 encode a value you can use the <code>base64()</code> configuration function. This also prevents the module displaying the value as a format placeholder and from appearing in the logs.</p> <pre><code># Example of obfuscated configuration\nimap {\n    imap_server = 'imap.myprovider.com'\n    password = base64('Y29jb251dA==')\n    user = 'mylogin'\n}\n</code></pre> <p>Since version 3.1 obfuscation options can also be added by the legacy method. Add <code>:hide</code> or <code>:base64</code> to the name of the parameters. You are advised to use the new <code>hide()</code> and <code>base64()</code> configuration functions.</p> <p>Note</p> <p>Legacy obfuscation is only available for string: parameters with <code>:hide</code> or <code>:base64</code>. If you want other types then be sure to use <code>hide()</code> and <code>base64()</code> configuration functions.</p> <pre><code># normal_parameter will be shown in log files etc as 'some value'\n# obfuscated_parameter will be shown in log files etc as '***'\nmodule {\n    normal_parameter = 'some value'\n    obfuscated_parameter:hide = 'some value'\n}\n</code></pre> <p>In the previous example configuration the users password is in plain text. Users may want to make it less easy to read. Py3status allows strings to be base64 encoded.</p> <p>To use an encoded string add <code>:base64</code> to the name of the parameter.</p> <pre><code># Example of obfuscated configuration\nimap {\n    imap_server = 'imap.myprovider.com'\n    password:base64 = 'Y29jb251dA=='\n    user = 'mylogin'\n}\n</code></pre> <p>Warning</p> <p>Base64 encoding is very simple and should not be considered secure in any way.</p>"},{"location":"user-guide/configuration/#configuring-colors","title":"Configuring colors","text":"<p>Since version 3.1 py3status allows greater color configuration. Colors can be set in the general section of your <code>i3status.conf</code> or in an individual modules configuration. If a color is not in a modules configuration then the values from the general section will be used.</p> <p>If a module does not specify colors but it is in a container, then the colors of the container will be used if they are set, before using ones defined in the general section.</p> <p>Generally colors can specified using hex values eg <code>#FF00FF</code> or <code>#F0F</code>. It is also possible to use css3 color names eg <code>red</code> <code>hotpink</code>. Check here for al ist of available color names.</p> <pre><code>general {\n    # These will be used if not supplied by a module\n    color = '#FFFFFF'\n    color_good = '#00FF00'\n    color_bad = '#FF0000'\n    color_degraded = '#FFFF00'\n}\n\ntime {\n    color = 'FF00FF'\n    format = \"%H:%M\"\n}\n\nbattery_level {\n    color_good = '#00AA00'\n    color_bad = '#AA0000'\n    color_degraded = '#AAAA00'\n    color_charging = '#FFFF00'\n}\n</code></pre>"},{"location":"user-guide/configuration/#configuring-thresholds","title":"Configuring thresholds","text":"<p>Some modules allow you to define thresholds in a module. These are used to determine which color to use when displaying the module. Thresholds are defined in the config as a list of tuples. With each tuple containing a value and a color. The color can either be a named color eg <code>good</code> referring to <code>color_good</code> or a hex value.</p> <pre><code>volume_status {\n    thresholds = [\n        (0, \"#FF0000\"),\n        (20, \"degraded\"),\n        (50, \"bad\"),\n    ]\n}\n</code></pre> <p>If the value checked against the threshold is equal to or more than a threshold then that color supplied will be used.</p> <p>In the above example the logic would be</p> <pre><code>if 0 &gt;= value &lt; 20 use #FF0000\nelse if 20 &gt;= value &lt; 50 use color_degraded\nelse if 50 &gt;= value use color_good\n</code></pre> <p>Some modules may allow more than one threshold to be defined. If all the thresholds are the same they can be defined as above but if you wish to specify them separately you can by giving a dict of lists.</p> <pre><code>my_module {\n    thresholds = {\n        'threshold_1': [\n            (0, \"#FF0000\"),\n            (20, \"degraded\"),\n            (50, \"bad\"),\n        ],\n        'threshold_2': [\n            (0, \"good\"),\n            (30, \"bad\"),\n        ],\n    }\n}\n</code></pre> <p>You can specify <code>hidden</code> color to hide a block.</p> <pre><code># hide a block when ``1avg`` (i.e., 12.4) is less than 20 percent\nformat = \"[\\?color=1avg [\\?color=darkgray&amp;show 1min] {1min}]\"\nloadavg {\n   thresholds = [\n        (0, \"hidden\"),\n       (20, \"good\"),\n       (40, \"degraded\"),\n       (60, \"#ffa500\"),\n       (80, \"bad\"),\n   ]\n}\n\n# hide cpu block when ``cpu_used_percent`` is less than 50 percent\n# hide mem block when ``mem_used_percent`` is less than 50 percent\nsysdata {\n    thresholds = [\n        (50, \"hidden\"),\n        (75, \"bad\"),\n    ]\n}\n</code></pre>"},{"location":"user-guide/configuration/#formatter","title":"Formatter","text":"<p>All modules allow you to define the format of their output. This is done with the format option. You can:</p> <ul> <li>display static text:</li> </ul> <pre><code>mpd_status {\n   format = \"MPD:\"\n}\n</code></pre> <ul> <li>use a backslash <code>\\</code> to escape a character (<code>\\[</code> will show <code>[</code>).</li> <li>display data provided by the module. This is done with   \"placeholders\", which follow the format {placeholder_name}. The   following example shows the state of the MPD (play/pause/stop) and   the artist and title of the currently playing song.</li> </ul> <pre><code>mpd_status {\n   format = \"MPD: {state} {artist} {title}\"\n}\n</code></pre> <pre><code>- Unknown placeholders act as if they were static text and\n  placeholders that are empty or None will be removed.\n- Formatting can also be applied to the placeholder Eg\n  `{number:03.2f}`.\n</code></pre> <ul> <li>hide invalid (no valid data or undefined) placeholders by enclosing   them in <code>[]</code>. The following example will show <code>artist - title</code> if   artist is present and <code>title</code> if title but no artist is present.</li> </ul> <pre><code>mpd_status {\n   format = \"MPD: {state} [[{artist} - ]{title}]\"\n}\n</code></pre> <ul> <li>show the first block with valid output by dividing them with a pipe     <code>|</code>. The following example will show the filename if neither artist     nor title are present.</li> </ul> <pre><code>mpd_status {\n   format = \"MPD: {state} [[{artist} - ]{title}]|{file}\"\n}\n</code></pre> <ul> <li><code>\\?</code> can be used to provide extra commands to the format string.     Multiple commands can be given using an ampersand <code>&amp;</code> as a     separator.</li> </ul> <pre><code>my_module {\n   format = \"\\?color=#FF00FF&amp;show blue\"\n}\n</code></pre> <ul> <li>change the output with conditions. This is done by following the   <code>\\?</code> with a an if statement. Multiple conditions or commands can be   combined by using an ampersand <code>&amp;</code> as a separator. Here are some   examples:<ul> <li><code>\\?if=online green | red</code> checks if the placeholder exists and   would display <code>green</code> in that case. A condition that evaluates   to false invalidates a section and the section can be hidden   with <code>[]</code> or skipped with <code>|</code></li> <li><code>\\?if=!online red | green</code> this dose the same as the above   condition, the only difference is that the exclamation mark <code>!</code>   negates the condition.</li> <li><code>\\?if=state=play PLAYING! | not playing</code> checks if the   placeholder contains <code>play</code> and displays <code>PLAYING!</code> if not it   will display <code>not playing</code>.</li> </ul> </li> </ul> <p>A format string using nearly all of the above options could look like this:</p> <pre><code>mpd_status {\n  format = \"MPD: {state} [\\?if=![stop] [[{artist} - ]{title}]|[{file}]]\"\n}\n</code></pre> <p>This will show <code>MPD: [state]</code> if the state of the MPD is <code>[stop]</code> or <code>MPD: [state] artist - title</code> if it is <code>[play]</code> or <code>[pause]</code> and artist and title are present, <code>MPD: [state] title</code> if artist is missing and <code>MPD: [state] file</code> if artist and title are missing.</p>"},{"location":"user-guide/configuration/#marking-modules-as-urgent","title":"Marking modules as urgent","text":"<p>Some modules use i3bar's urgent feature to indicate that something important has occurred. The <code>allow_urgent</code> configuration parameter can be used to allow/prevent a module from setting itself as urgent.</p> <pre><code># prevent modules showing as urgent, except github\npy3status {\n    allow_urgent = false\n}\n\ngithub {\n    allow_urgent = true\n}\n</code></pre>"},{"location":"user-guide/configuration/#controlling-error-behavior","title":"Controlling error behavior","text":"<p>When a module error has occurred, it will be reported on the bar. The <code>on_error</code> configuration parameter allows users to choose what to do instead.</p> <p>Supported values:</p> <ul> <li><code>show</code> (default): report the error on the bar (click to view)</li> <li><code>hide</code>: hide the module on the bar</li> </ul> <pre><code># hide errors on all modules by default (still reported on logs)\npy3status {\n    on_error = \"hide\"\n}\n\n# hide errors on non-NVIDIA hardwares\nnvidia_smi {\n    on_error = \"hide\"\n}\n\n# hide errors on sway where xrandr does not work\nxrandr {\n    on_error = \"hide\"\n}\n</code></pre>"},{"location":"user-guide/configuration/#grouping-modules","title":"Grouping Modules","text":"<p>The module_group module allows you to group several modules together. Only one of the modules are displayed at a time. The displayed module can either be cycled through automatically or by user action (the default, on mouse scroll).</p> <p>This module is very powerful and allows you to save a lot of space on your bar.</p> <pre><code>order += \"group tz\"\n\n# cycle through different timezone hours every 10s\ngroup tz {\n    cycle = 10\n    format = \"{output}\"\n\n    tztime la {\n        format = \"LA %H:%M\"\n        timezone = \"America/Los_Angeles\"\n    }\n\n    tztime ny {\n        format = \"NY %H:%M\"\n        timezone = \"America/New_York\"\n    }\n\n    tztime du {\n        format = \"DU %H:%M\"\n        timezone = \"Asia/Dubai\"\n    }\n}\n</code></pre> <p>The module_frame module also allows you to group several modules together, however in a frame all the modules are shown. This allows you to have more than one module shown in a group.</p> <pre><code>order += \"group frames\"\n\n# group showing disk space or times using button to change what is shown.\ngroup frames {\n    click_mode = \"button\"\n\n    frame time {\n        tztime la {\n            format = \"LA %H:%M\"\n            timezone = \"America/Los_Angeles\"\n        }\n\n        tztime ny {\n            format = \"NY %H:%M\"\n            timezone = \"America/New_York\"\n        }\n\n        tztime du {\n            format = \"DU %H:%M\"\n            timezone = \"Asia/Dubai\"\n        }\n    }\n\n    frame disks {\n        disk \"/\" {\n            format = \"/ %avail\"\n        }\n\n        disk \"/home\" {\n            format = \"/home %avail\"\n        }\n    }\n}\n</code></pre> <p>Frames can also have a toggle button to hide/show the content</p> <pre><code># A frame showing times in different cities.\n# We also have a button to hide/show the content\n\nframe time {\n    format = '{output}{button}'\n    format_separator = ' '  # have space instead of usual i3bar separator\n\n    tztime la {\n        format = \"LA %H:%M\"\n        timezone = \"America/Los_Angeles\"\n    }\n\n    tztime ny {\n        format = \"NY %H:%M\"\n        timezone = \"America/New_York\"\n    }\n\n    tztime du {\n        format = \"DU %H:%M\"\n        timezone = \"Asia/Dubai\"\n    }\n}\n</code></pre>"},{"location":"user-guide/configuration/#custom-click-events","title":"Custom click events","text":"<p>py3status allows you to easily add click events to modules in your i3bar. These modules can be both i3status or py3status modules. This is done in your <code>i3status.config</code> using the <code>on_click</code> parameter.</p> <p>Just add a new configuration parameter named <code>on_click [button number]</code> to your module config and py3status will then execute the given i3 command (using i3-msg).</p> <p>This means you can run simple tasks like executing a program or execute any other i3 specific command.</p> <p>As an added feature and in order to get your i3bar more responsive, every <code>on_click</code> command will also trigger a module refresh. This works for both py3status modules and i3status modules as described in the refresh command below.</p> <pre><code># button numbers\n1 = left click\n2 = middle click\n3 = right click\n4 = scroll up\n5 = scroll down\n</code></pre> <pre><code># reload the i3 config when I left click on the i3status time module\n# and restart i3 when I middle click on it\ntime {\n    on_click 1 = \"reload\"\n    on_click 2 = \"restart\"\n}\n\n# control the volume with your mouse (need &gt;i3-4.8)\n# launch alsamixer when I left click\n# kill it when I right click\n# toggle mute/unmute when I middle click\n# increase the volume when I scroll the mouse wheel up\n# decrease the volume when I scroll the mouse wheel down\nvolume master {\n    format = \"\u266a: %volume\"\n    device = \"default\"\n    mixer = \"Master\"\n    mixer_idx = 0\n    on_click 1 = \"exec i3-sensible-terminal -e alsamixer\"\n    on_click 2 = \"exec amixer set Master toggle\"\n    on_click 3 = \"exec killall alsamixer\"\n    on_click 4 = \"exec amixer set Master 1+\"\n    on_click 5 = \"exec amixer set Master 1-\"\n}\n\n# run wicd-gtk GUI when I left click on the i3status ethernet module\n# and kill it when I right click on it\nethernet eth0 {\n    # if you use %speed, i3status requires root privileges\n    format_up = \"E: %ip\"\n    format_down = \"\"\n    on_click 1 = \"exec wicd-gtk\"\n    on_click 3 = \"exec killall wicd-gtk\"\n}\n\n# run thunar when I left click on the / disk info module\ndisk \"/\" {\n    format = \"/ %free\"\n    on_click 1 = \"exec thunar /\"\n}\n\n# this is a py3status module configuration\n# open an URL on opera when I left click on the weather_yahoo module\nweather_yahoo paris {\n    cache_timeout = 1800\n    woeid = 615702\n    forecast_days = 2\n    on_click 1 = \"exec opera http://www.meteo.fr\"\n    request_timeout = 10\n}\n</code></pre>"},{"location":"user-guide/configuration/#special-on_click-commands","title":"Special on_click commands","text":"<p>There are two commands you can pass to the <code>on_click</code> parameter that have a special meaning to py3status :</p> <ul> <li><code>refresh</code> : This will refresh (expire the cache) of the clicked     module. This also works for i3status modules (it will send a SIGUSR1     to i3status for you).</li> <li><code>refresh_all</code> : This will refresh all the modules from your i3bar     (i3status included). This has the same effect has sending a SIGUSR1     to py3status.</li> </ul>"},{"location":"user-guide/configuration/#module-data-and-on_click-commands","title":"Module data and on_click commands","text":"<p>Since version 3.3 it is possible to use the output text of a module in the <code>on_click</code> command. To do this <code>$OUTPUT</code> can be used in command and it will be substituted by the modules text output when the command is run.</p> <pre><code># copy module output to the clipboard using xclip\nmy_module {\n    on_click 1 = 'exec echo $OUTPUT | xclip -i'\n}\n</code></pre> <p>If the output of a module is a composite then the output of the part clicked on can be accessed using <code>$OUTPUT_PART</code>.</p>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>You may use the value of an environment variable in your configuration with the <code>env(...)</code> directive. These values are captured at startup and may be converted to the needed datatype (only <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code> and <code>auto</code> are currently supported).</p> <p>Note, the <code>auto</code> conversion will try to guess the type of the contents and automatically convert to that type. Without an explicit conversion function, it defaults to <code>auto</code>.</p> <p>This is primarily designed to obfuscate sensitive information when sharing your configuration file, such as usernames, passwords, API keys, etc.</p> <p>The <code>env(...)</code> expression can be used anywhere a normal constant would be used. Note, you cannot use the directive in place of a dictionary key, i.e <code>{..., env(KEY): 'val', ...}</code>.</p> <p>See the examples below!</p> <pre><code>order += \"my_module\"\norder += env(ORDER_MODULE)\n\nmodule {\n    normal_parameter = 'some value'\n    env_parameter = env(SOME_ENVIRONMENT_PARAM)\n    sensitive_api_key = env(API_KEY)\n\n    complex_parameter = {\n      'key': env(VAL)\n    }\n\n    equivalent1 = env(MY_VAL)\n    equivalent2 = env(MY_VAL, auto)\n\n    list_of_tuples = [\n      (env(APPLE_NUM, int), 'apple'),\n      (2, env(ORANGE))\n    ]\n\n    float_param = env(MY_NUM, float)\n}\n</code></pre>"},{"location":"user-guide/configuration/#inline-shell-code","title":"Inline Shell Code","text":"<p>You can use the standard output of a shell script in your configuration with the <code>shell(...)</code> directive. These values are captured at startup and may be converted to the needed datatype (only <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code> and <code>auto</code> (default) are currently supported).</p> <p>The shell script executed must return a single line of text on stdout and then terminate. If the type is explicitly declared <code>bool</code>, the exit status of the script is respected (a non-zero exit status being interpreted falsey). In any other case if the script exits with a non-zero exit status an error will be thrown.</p> <p>The <code>shell(...)</code> expression can be used anywhere a constant or an <code>env(...)</code> directive can be used (see the section \"Environment Variables\").</p> <p>Usage example:</p> <pre><code>my_module {\n    password = shell(pass show myPasswd | head -n1)\n    some_string = shell(/opt/mydaemon/get_api_key.sh, str)\n    pid = shell(cat /var/run/mydaemon/pidfile, int)\n    my_bool = shell(pgrep thttpd, bool)\n}\n</code></pre> <p>Due to the way the config is parsed you need to to escape any closing parenthesis <code>)</code> using a backslash <code>\\)</code>.</p> <pre><code>static_string {\n    # note we need to explicitly cast the result to str\n    # because we are using it as the format which must be a\n    # string\n    format = shell(echo $((6 + 2\\)\\), str)\n}\n</code></pre>"},{"location":"user-guide/configuration/#refreshing-modules-on-udev-events-with-on_udev-dynamic-options","title":"Refreshing modules on udev events with on_udev dynamic options","text":"<p>Refreshing of modules can be triggered when an udev event is detected on a specific subsystem using the <code>on_udev_&lt;subsystem&gt;</code> configuration parameter and an associated action.</p> <p>Possible actions:</p> <ul> <li><code>refresh</code>: immediately refresh the module and keep on updating it as     usual</li> <li><code>refresh_and_freeze</code>: module is ONLY refreshed when said udev     subsystem emits an event</li> </ul> <pre><code># refresh xrandr only when udev 'drm' events are triggered\nxrandr {\n    on_udev_drm = \"refresh_and_freeze\"\n}\n</code></pre> <p>Note</p> <p>This feature will only activate when <code>pyudev</code> is installed on the system. This is an optional dependency of py3status and is therefore not enforced by all package managers.</p>"},{"location":"user-guide/configuration/#http-request-settings","title":"HTTP Request Settings","text":""},{"location":"user-guide/configuration/#handling-timeouts","title":"Handling timeouts","text":"<p>Timeouts are handled thanks to the global <code>request_timeout</code> setting.</p> <p>Request Timeout for URL request based modules can be specified in the module configuration. To find out if your module supports that, look for <code>self.py3.request</code> in the code. Otherwise, we will use <code>10</code>.</p> <pre><code># stop waiting for a response after 10 seconds\nexchange_rate {\n    request_timeout = 10\n}\n</code></pre>"},{"location":"user-guide/configuration/#handling-retries","title":"Handling retries","text":"<p>Retries are handled thanks to the global <code>request_retry_times</code> and <code>request_retry_wait</code> settings.</p> <p>Requests failing due to network unavailability or remote server timeouts are retried automatically <code>request_retry_times</code> times (default <code>3</code>) at a <code>request_retry_wait</code> (default <code>2</code>) seconds interval.</p> <p>This allows to be more graceful to i3 startup when network is not up yet or to short network disruptions and not display an error on the bar in that case.</p> <p>To find out if your module supports that, look for <code>self.py3.request</code> in the code.</p> <pre><code># try to contact the OWM API 10 times every 5 seconds before displaying\n# an error on the bar for the module\n# that is equivalent to 50 seconds of retrying before an error occurs\nweather_owm {\n    request_retry_times = 10\n    request_retry_wait = 5\n}\n</code></pre>"},{"location":"user-guide/configuration/#running-py3status-outside-i3bar","title":"Running Py3status outside i3bar","text":"<p>Want Py3status in your beloved tmux? Sure!</p> <p>While Py3status is by default running using the <code>i3bar</code> output format, you can change the <code>output_format</code> of the <code>general</code> section of the configuration file to get your favorite status bar in the following programs:</p> <ul> <li>i3bar (default)</li> <li>dzen2</li> <li>lemonbar</li> <li>term</li> <li>tmux</li> <li>xmobar</li> <li>none (no special output format)</li> </ul>"},{"location":"user-guide/installation/","title":"Installation","text":""},{"location":"user-guide/installation/#arch-linux","title":"Arch Linux","text":"<p>Stable updates, official releases:</p> <pre><code>$ pacman -S py3status\n</code></pre> <p>Real-time updates from master branch:</p> <pre><code>$ yay -S py3status-git\n</code></pre>"},{"location":"user-guide/installation/#debian-ubuntu","title":"Debian &amp; Ubuntu","text":"<p>Stable updates. In testing and unstable, and soon in stable backports:</p> <pre><code>$ apt-get install py3status\n</code></pre> <p>Buster users might want to check out issue #1916 and use pip3 instead or the alternative method proposed until this debian bug is handled and stable.</p> <p>Note</p> <p>If you want to use pip, you should consider using pypi-install from the python-stdeb package (which will create a .deb out from a python package) instead of directly calling pip.</p> <pre><code>$ pip3 install py3status\n</code></pre>"},{"location":"user-guide/installation/#fedora","title":"Fedora","text":"<pre><code>$ dnf install py3status\n</code></pre>"},{"location":"user-guide/installation/#gentoo-linux","title":"Gentoo Linux","text":"<p>Check available USE flags if you need them!</p> <pre><code>$ emerge -a py3status\n</code></pre>"},{"location":"user-guide/installation/#alpine-linux","title":"Alpine Linux","text":"<p>In community repository since Alpine Linux 3.17.</p> <pre><code>$ apk add py3status\n</code></pre>"},{"location":"user-guide/installation/#pypi","title":"PyPi","text":"<pre><code>$ pip install py3status\n</code></pre> <p>There are optional requirements that you could find useful:</p> <ul> <li><code>py3status[udev]</code> for udev support.</li> </ul> <p>Or if you want everything:</p> <ul> <li><code>py3status[all]</code> to install all core extra requirements and features.</li> </ul>"},{"location":"user-guide/installation/#void-linux","title":"Void Linux","text":"<pre><code>$ xbps-install -S py3status\n</code></pre>"},{"location":"user-guide/installation/#nixos","title":"NixOS","text":"<p>To have py3status globally persistent add to your NixOS configuration file py3status as a Python 3 package with:</p> <pre><code>(python3Packages.py3status.overrideAttrs (oldAttrs: {\n  propagatedBuildInputs = with python3Packages;[ pytz tzlocal ] ++ oldAttrs.propagatedBuildInputs;\n}))\n</code></pre> <p>If you are, and you probably are, using i3 you might want a section in your <code>/etc/nixos/configuration.nix</code> that looks like this:</p> <pre><code>{\n  services.xserver.windowManager.i3 = {\n    enable = true;\n    extraPackages = with pkgs; [\n      dmenu\n      i3status\n      i3lock\n      (python3Packages.py3status.overrideAttrs (oldAttrs: {\n        propagatedBuildInputs = with python3Packages; [ pytz tzlocal ] ++ oldAttrs.propagatedBuildInputs;\n      }))\n    ];\n  };\n}\n</code></pre> <p>In this example I included the python packages pytz and tzlocal which are necessary for the py3status module clock. The default packages that come with i3 (dmenu, i3status, i3lock) have to be mentioned if they should still be there.</p> <pre><code>$ nix-env -i python3.6-py3status\n</code></pre>"},{"location":"user-guide/modules/","title":"Available modules","text":""},{"location":"user-guide/modules/#air_quality","title":"air_quality","text":"<p>Display air quality polluting in a given location.</p> <p>An air quality index (AQI) is a number used by government agencies to communicate to the public how polluted the air currently is or how polluted it is forecast to become. As the AQI increases, an increasingly large percentage of the population is likely to experience increasingly severe adverse health effects. Different countries have their own air quality indices, corresponding to different national air quality standards.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>auth_token</code> Personal token required. See https://aqicn.org/data-platform/token     for more information. (default 'demo')</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module. A message from the site:     The default quota is max 1000 requests per minute (~16RPS) and with     burst up to 60 requests. See https://aqicn.org/api/ for more information.     (default 3600)</p> </li> <li> <p><code>format</code> display format for this module     (default '[\\?color=aqi {city_name}: {aqi} {category}]')</p> </li> <li> <p><code>format_datetime</code> specify strftime characters to format (default {})</p> </li> <li> <p><code>location</code> location or uid to query. To search for nearby stations in Krak\u00f3w,     try <code>https://api.waqi.info/search/?token=YOUR_TOKEN&amp;keyword=krak\u00f3w</code>     For best results, use uid instead of name in location, eg <code>@8691</code>.     (default 'Shanghai')</p> </li> <li> <p><code>quality_thresholds</code> specify a list of tuples, eg (number, 'color', 'name')     (default [(0, '#009966', 'Good'),     (51, '#FFDE33', 'Moderate'),     (101, '#FF9933', 'Sensitively Unhealthy'),     (151, '#CC0033', 'Unhealthy'),     (201, '#660099', 'Very Unhealthy'),     (301, '#7E0023', 'Hazardous')])</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default {'aqi': True})</p> </li> </ul> <p>Notes:     Your station may have individual scores for pollutants not listed below.     See https://api.waqi.info/feed/@UID/?token=TOKEN (Replace UID and TOKEN)     for a full list of placeholders to use.</p> <p>Format placeholders:</p> <ul> <li> <p><code>{aqi}</code> air quality index</p> </li> <li> <p><code>{attributions_0_name}</code> attribution name, there maybe more, change the 0</p> </li> <li> <p><code>{attributions_0_url}</code> attribution url, there maybe more, change the 0</p> </li> <li> <p><code>{category}</code> health risk category, eg Good, Moderate, Unhealthy, etc</p> </li> <li> <p><code>{city_geo_0}</code> monitoring station latitude</p> </li> <li> <p><code>{city_geo_1}</code> monitoring station longitude</p> </li> <li> <p><code>{city_name}</code> monitoring station name</p> </li> <li> <p><code>{city_url}</code> monitoring station url</p> </li> <li> <p><code>{dominentpol}</code> dominant pollutant, eg pm25</p> </li> <li> <p><code>{idx}</code> Unique ID for the city monitoring station, eg 7396</p> </li> <li> <p><code>{time}</code> epoch timestamp, eg 1510246800</p> </li> <li> <p><code>{time_s}</code> local timestamp, eg 2017-11-09 17:00:00</p> </li> <li> <p><code>{time_tz}</code> local timezone, eg -06:00</p> </li> <li> <p><code>{iaqi_co}</code>   individual score for pollutant carbon monoxide</p> </li> <li> <p><code>{iaqi_h}</code>    individual score for pollutant h (?)</p> </li> <li> <p><code>{iaqi_no2}</code>  individual score for pollutant nitrogen dioxide</p> </li> <li> <p><code>{iaqi_o3}</code>   individual score for pollutant ozone</p> </li> <li> <p><code>{iaqi_pm25}</code> individual score for pollutant particulates     smaller than 2.5 \u03bcm in aerodynamic diameter</p> </li> <li> <p><code>{iaqi_pm10}</code> individual score for pollutant particulates     smaller than 10 \u03bcm in aerodynamic diameter</p> </li> <li> <p><code>{iaqi_pm15}</code> individual score for pollutant particulates     smaller than than 15 \u03bcm in aerodynamic diameter</p> </li> <li> <p><code>{iaqi_p}</code>    individual score for pollutant particulates</p> </li> <li> <p><code>{iaqi_so2}</code>  individual score for pollutant sulfur dioxide</p> </li> <li> <p><code>{iaqi_t}</code>    individual score for pollutant t (?)</p> </li> <li> <p><code>{iaqi_w}</code>    individual score for pollutant w (?)</p> <p>AQI denotes an air quality index. IQAI denotes an individual AQI score. Try https://en.wikipedia.org/wiki/Air_pollution#Pollutants for more information on the pollutants retrieved from your monitoring station.</p> </li> </ul> <p>format_datetime placeholders:</p> <ul> <li> <p><code>key</code> epoch_placeholder, eg time, vtime</p> </li> <li> <p><code>value</code> % strftime characters to be translated, eg '%b %d' ----&gt; 'Nov 11'</p> </li> </ul> <p>Color options:</p> <ul> <li><code>color_bad</code> print a color for error (if any) from the site</li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Examples:</p> <pre><code># show last updated time\nair_quality {\n    format = '{city_name}: {aqi} {category} - {time}'\n    format_datetime = {'time': '%-I%P'}\n}\n</code></pre> <p>author beetleman, lasers</p> <p>license BSD</p>"},{"location":"user-guide/modules/#apt_updates","title":"apt_updates","text":"<p>Display number of pending updates for Debian based Distros.</p> <p>Thanks to Iain Tatch &lt;iain.tatch@gmail.com&gt; for the script that this is based on. This will display a count of how many 'apt' updates are waiting to be installed.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds (default 600)</p> </li> <li> <p><code>format</code> Display format to use     (default 'UPD[\\?not_zero : {apt}]')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{apt}</code> Number of pending apt updates</li> </ul> <p>Requires:</p> <ul> <li><code>apt</code> Needed to display pending 'apt' updates</li> </ul> <p>author Joshua Pratt &lt;jp10010101010000@gmail.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#arch_updates","title":"arch_updates","text":"<p>Display number of pending updates for Arch Linux.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 3600)</p> </li> <li> <p><code>format</code> display format for this module, otherwise auto (default None)</p> </li> <li> <p><code>hide_if_zero</code> don't show on bar if True (default False)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{aur}</code> Number of pending aur updates</p> </li> <li> <p><code>{pacman}</code> Number of pending pacman updates</p> </li> <li> <p><code>{total}</code> Total updates pending</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>pacman-contrib</code> contributed scripts and tools for pacman systems</p> </li> <li> <p><code>auracle</code> a flexible command line client for arch linux's user repository</p> </li> <li> <p><code>trizen</code> lightweight pacman wrapper and AUR helper</p> </li> <li> <p><code>yay</code> yet another yogurt. pacman wrapper and aur helper written in go</p> </li> <li> <p><code>paru</code> feature packed AUR helper</p> </li> <li> <p><code>pikaur</code> pacman wrapper and AUR helper written in python</p> </li> </ul> <p>Note:     py3status for Arch-based distributions should include an alpm hook     to refresh this module after packages and/or files being modified.</p> <p>author Iain Tatch &lt;iain.tatch@gmail.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#async_script","title":"async_script","text":"<p>Display output of a given script asynchronously.</p> <p>Always displays the last line of output from a given script, set by <code>script_path</code>. If a line contains only a color (/^#[0-F]{6}$/), it is used as such (set force_nocolor to disable). The script may have parameters.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>force_nocolor</code> if true, won't check if a line contains color     (default False)</p> </li> <li> <p><code>format</code> see placeholders below (default '{output}')</p> </li> <li> <p><code>script_path</code> script you want to show output of (compulsory)     (default None)</p> </li> <li> <p><code>strip_output</code> shall we strip leading and trailing spaces from output     (default False)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{output}</code> output of script given by \"script_path\"</li> </ul> <p>Examples:</p> <pre><code>async_script {\n    format = \"{output}\"\n    script_path = \"ping 127.0.0.1\"\n}\n</code></pre> <p>author frimdo ztracenastopa@centrum.cz, girst</p>"},{"location":"user-guide/modules/#audiosink","title":"audiosink","text":"<p>Display and toggle default audiosink.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds     (default 10)</p> </li> <li> <p><code>display_name_mapping</code> dictionary mapping devices names to display names     (default {})</p> </li> <li> <p><code>format</code> display format for this module     (default '{audiosink}')</p> </li> <li> <p><code>sinks_to_ignore</code> list of devices names to ignore     (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{audiosink}</code> comma seperated list of (display) names of default sink(s)</li> </ul> <p>Requires:</p> <ul> <li><code>pulseaudio</code> networked sound server</li> </ul> <p>Examples:</p> <pre><code>audiosink {\n    display_name_mapping = {\"Family 17h/19h HD Audio Controller Analog Stereo\": \"Int\", \"ThinkPad Dock USB Audio Analog Stereo\": \"Dock\"}\n    format = r\"{audiosink}\"\n    sinks_to_ignore = [\"Renoir Radeon High Definition Audio Controller Digital Stereo (HDMI)\"]\n}\n</code></pre> <p>author Jens Brandt &lt;py3status@brandt-george.de&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#aws_bill","title":"aws_bill","text":"<p>Display bill for Amazon Web Services.</p> <p>WARNING: This module generate some costs on the AWS bill. Take care about the cache_timeout to limit these fees!</p> <p>Configuration parameters:</p> <ul> <li> <p><code>aws_access_key_id</code> Your AWS access key (default '')</p> </li> <li> <p><code>aws_account_id</code> The root ID of the AWS account     Can be found here` https://console.aws.amazon.com/billing/home#/account     (default '')</p> </li> <li> <p><code>aws_secret_access_key</code> Your AWS secret key (default '')</p> </li> <li> <p><code>billing_file</code> Csv file location (default '/tmp/.aws_billing.csv')</p> </li> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds (default 3600)</p> </li> <li> <p><code>format</code> string that formats the output. See placeholders below.     (default '{bill_amount}$')</p> </li> <li> <p><code>s3_bucket_name</code> The bucket where billing files are sent by AWS.     Follow this article to activate this feature:     https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-reports.html     (default '')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{bill_amount}</code> AWS bill amount</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_good</code> Balance available</p> </li> <li> <p><code>color_bad</code> An error has occurred</p> </li> </ul> <p>Requires:</p> <ul> <li><code>boto</code> a python interface to amazon web services (aws)</li> </ul> <p>author nawadanp</p>"},{"location":"user-guide/modules/#backlight","title":"backlight","text":"<p>Adjust screen backlight brightness.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>brightness_delta</code> Change the brightness by this step.     (default 8)</p> </li> <li> <p><code>brightness_initial</code> Set brightness to this value on start.     (default None)</p> </li> <li> <p><code>brightness_minimal</code> Don't go below this brightness to avoid black screen     (default 1)</p> </li> <li> <p><code>button_down</code> Button to click to decrease brightness. Setting to 0 disables.     (default 5)</p> </li> <li> <p><code>button_up</code> Button to click to increase brightness. Setting to 0 disables.     (default 4)</p> </li> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds (default 10)</p> </li> <li> <p><code>command</code> The program to use to change the backlight.     Currently xbacklight, light and brightnessctl are supported. The program needs     to be installed and on your path. If no program is installed, this     module will attempt to use logind support instead     (default 'xbacklight')</p> </li> <li> <p><code>device</code> Device name or full path to use, eg, acpi_video0 or     /sys/class/backlight/acpi_video0, otherwise automatic     (default None)</p> </li> <li> <p><code>format</code> Display brightness, see placeholders below     (default '\u263c: {level}%')</p> </li> <li> <p><code>hide_when_unavailable</code> Hide if no backlight is found     (default False)</p> </li> <li> <p><code>low_tune_threshold</code> If current brightness value is below this threshold,     the value is changed by a minimal value instead of the brightness_delta.     (default 0)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{level}</code> brightness</li> </ul> <p>Requires: one of     xbacklight: need for changing brightness, not detection     light: program to easily change brightness on backlight-controllers     brightnessctl: change brightness wayland compatible     dbus-python + logind v243: logind to change brightness without X</p> <p>author Tjaart van der Walt (github:tjaartvdwalt), J\u00e9r\u00e9my Rosen (github:boucman)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#battery_level","title":"battery_level","text":"<p>Display battery information.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>battery_id</code> id of the battery to be displayed     set to 'all' for combined display of all batteries     (default 0)</p> </li> <li> <p><code>blocks</code> a string, where each character represents battery level     especially useful when using icon fonts (e.g. FontAwesome)     (default \"_\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\")</p> </li> <li> <p><code>cache_timeout</code> a timeout to refresh the battery state     (default 60)</p> </li> <li> <p><code>charging_character</code> a character to represent charging battery     especially useful when using icon fonts (e.g. FontAwesome)     set to 'None' if you want to hide the charging state of your battery     (default \"\u26a1\")</p> </li> <li> <p><code>format</code> string that formats the output. See placeholders below.     (default \"{icon}\")</p> </li> <li> <p><code>format_notify_charging</code> format of the notification received when you click     on the module while your computer is plugged in     (default 'Charging ({percent}%)')</p> </li> <li> <p><code>format_notify_discharging</code> format of the notification received when you     click on the module while your computer is not plugged in     (default \"{time_remaining}\")</p> </li> <li> <p><code>format_status_bad</code> a string to put in {status} when bad     (default \"CRIT\")</p> </li> <li> <p><code>format_status_charging</code> a string to put in {status} when charging     (default \"CHG\")</p> </li> <li> <p><code>format_status_degraded</code> a string to put in {status} when degraded     (default \"LOW\")</p> </li> <li> <p><code>format_status_discharging</code> a string to put in {status} when discharging     (default \"BAT\")</p> </li> <li> <p><code>format_status_full</code> a string to put in {status} when full     (default \"FULL\")</p> </li> <li> <p><code>hide_seconds</code> hide seconds in remaining time     (default False)</p> </li> <li> <p><code>hide_when_full</code> hide any information when battery is fully charged (when     the battery level is greater than or equal to 'threshold_full')     (default False)</p> </li> <li> <p><code>measurement_mode</code> either 'acpi' or 'sys', or None to autodetect. 'sys'     should be more robust and does not have any extra requirements, however     the time measurement may not work in some cases     (default None)</p> </li> <li> <p><code>notification</code> show current battery state as notification on click     (default False)</p> </li> <li> <p><code>notify_low_level</code> display notification when battery is running low (when     the battery level is less than 'threshold_degraded')     (default False)</p> </li> <li> <p><code>on_udev_power_supply</code> dynamic variable to watch for <code>power_supply</code> udev subsystem     events to trigger specified action.     (default \"refresh\")</p> </li> <li> <p><code>sys_battery_path</code> set the path to your battery(ies), without including its     number     (default \"/sys/class/power_supply/\")</p> </li> <li> <p><code>threshold_bad</code> a percentage below which the battery level should be     considered bad     (default 10)</p> </li> <li> <p><code>threshold_degraded</code> a percentage below which the battery level should be     considered degraded     (default 30)</p> </li> <li> <p><code>threshold_full</code> a percentage at or above which the battery level should     should be considered full     (default 100)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{ascii_bar}</code> - a string of ascii characters representing the battery level,     an alternative visualization to '{icon}' option</p> </li> <li> <p><code>{icon}</code> - a character representing the battery level,     as defined by the 'blocks' and 'charging_character' parameters</p> </li> <li> <p><code>{percent}</code> - the remaining battery percentage (previously '{}')</p> </li> <li> <p><code>{time_remaining}</code> - the remaining time until the battery is empty</p> </li> <li> <p><code>{power}</code> - the current power consumption in Watts. Not working with acpi.</p> </li> <li> <p><code>{status}</code> - the current battery status string as defined by 'format_status_*'</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Battery level is below threshold_bad</p> </li> <li> <p><code>color_charging</code> Battery is charging (default \"#FCE94F\")</p> </li> <li> <p><code>color_degraded</code> Battery level is below threshold_degraded</p> </li> <li> <p><code>color_good</code> Battery level is above thresholds</p> </li> </ul> <p>Requires:   - the <code>acpi</code> the acpi command line utility (only if     <code>measurement_mode='acpi'</code>)</p> <p>author shadowprince, AdamBSteele, maximbaz, 4iar, m45t3r</p> <p>license Eclipse Public License</p>"},{"location":"user-guide/modules/#bluetooth","title":"bluetooth","text":"<p>Display bluetooth status.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default \"{format_adapter}\")</p> </li> <li> <p><code>format_adapter</code> display format for adapters (default \"{format_device}\")</p> </li> <li> <p><code>format_adapter_separator</code> show separator if more than one (default \" \")</p> </li> <li> <p><code>format_device</code> display format for devices     (default \"\\?if=connected&amp;color=connected {alias}\")</p> </li> <li> <p><code>format_device_separator</code> show separator if more than one (default \" \")</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(False, \"bad\"), (True, \"good\")])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{format_adapter}</code>      format for adapters</p> </li> <li> <p><code>{adapter}</code>             number of adapters, eg 1</p> </li> </ul> <p>format_adapter placeholders:</p> <ul> <li> <p><code>{format_device}</code>       format for devices</p> </li> <li> <p><code>{device}</code>              number of devices, eg 5</p> </li> <li> <p><code>{address}</code>             eg, 00:00:00:00:00:00</p> </li> <li> <p><code>{addresstype}</code>         eg, public</p> </li> <li> <p><code>{alias}</code>               eg, thinkpad</p> </li> <li> <p><code>{class}</code>               eg, 123456</p> </li> <li> <p><code>{discoverable}</code>        eg, False</p> </li> <li> <p><code>{discoverabletimeout}</code> eg, 0</p> </li> <li> <p><code>{discovering}</code>         eg, False</p> </li> <li> <p><code>{modalias}</code>            eg, usb:v1D68234ABCDEF5</p> </li> <li> <p><code>{name}</code>                eg, z420</p> </li> <li> <p><code>{pairable}</code>            eg, True</p> </li> <li> <p><code>{pairabletimeout}</code>     eg, 0</p> </li> <li> <p><code>{path}</code>                eg, /org/bluez/hci0</p> </li> <li> <p><code>{powered}</code>             eg, True</p> </li> <li> <p><code>{uuids}</code>               eg, []</p> </li> </ul> <p>format_device placeholders:</p> <ul> <li> <p><code>{adapter}</code>          eg, /org/bluez/hci0</p> </li> <li> <p><code>{address}</code>          eg, 00:00:00:00:00:00</p> </li> <li> <p><code>{addresstype}</code>      eg, public</p> </li> <li> <p><code>{alias}</code>            eg, MSFT Mouse</p> </li> <li> <p><code>{battery}</code>          eg, 95</p> </li> <li> <p><code>{class}</code>            eg, 1234</p> </li> <li> <p><code>{connected}</code>        eg, False</p> </li> <li> <p><code>{icon}</code>             eg, input-mouse</p> </li> <li> <p><code>{legacypairing}</code>    eg, False</p> </li> <li> <p><code>{modalias}</code>         eg, usb:v1D68234ABCDEF5</p> </li> <li> <p><code>{name}</code>             eg, Microsoft Bluetooth Notebook Mouse 5000</p> </li> <li> <p><code>{paired}</code>           eg, True</p> </li> <li> <p><code>{servicesresolved}</code> eg, False</p> </li> <li> <p><code>{trusted}</code>          eg, True</p> </li> <li> <p><code>{uuids}</code>            eg, []</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>pygobject</code> Python bindings for GObject Introspection</li> </ul> <p>Examples:</p> <pre><code># always display devices\nbluetooth {\n    format_device = \"\\?color=connected {alias}\"\n}\n\n# set an alias via blueman-manager or bluetoothctl\n# $ bluetoothctl\n# [bluetooth] # devices\n# [bluetooth] # connect 00:00:00:00:00:00\n# [bluetooth] # set-alias \"MSFT Mouse\"\n\n# display missing adapter (feat. request)\nbluetooth {\n    format = \"\\?if=adapter {format_adapter}|\\?color=darkgray No Adapter\"\n}\n\n# legacy default\nbluetooth {\n    format = \"\\?color=good BT: {format_adapter}|\\?color=bad BT\"\n    format_device_separator = \"\\|\"\n}\n</code></pre> <p>author jmdana, lasers</p> <p>license BSD</p>"},{"location":"user-guide/modules/#check_tcp","title":"check_tcp","text":"<p>Display status of a TCP port on a given host.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{host}:{port} {state}')</p> </li> <li> <p><code>host</code> name of host to check for (default 'localhost')</p> </li> <li> <p><code>icon_off</code> show this when unavailable (default 'DOWN')</p> </li> <li> <p><code>icon_on</code> show this when available (default 'UP')</p> </li> <li> <p><code>port</code> number of port to check for (default 22)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{state}</code> port state</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_down</code> Closed, default to color_bad</p> </li> <li> <p><code>color_up</code> Open, default to color_good</p> </li> </ul> <p>author obb, Moritz L\u00fcdecke</p>"},{"location":"user-guide/modules/#clock","title":"clock","text":"<p>Display date and time.</p> <p>This module allows one or more datetimes to be displayed. All datetimes share the same format_time but can set their own timezones. Timezones are defined in the <code>format</code> using the TZ name in squiggly brackets eg <code>{GMT}</code>, <code>{Portugal}</code>, <code>{Europe/Paris}</code>, <code>{America/Argentina/Buenos_Aires}</code>.</p> <p>See https://docs.python.org/3/library/zoneinfo.html for supported formats.</p> <p><code>{Local}</code> can be used for the local settings of your computer.</p> <p>Note: Timezones are case sensitive!</p> <p>A full list of timezones can be found at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</p> <p>Configuration parameters:</p> <ul> <li> <p><code>block_hours</code> length of time period for all blocks in hours (default 12)</p> </li> <li> <p><code>blocks</code> a string, where each character represents time period     from the start of a time period.     (default '\ud83d\udd5b\ud83d\udd67\ud83d\udd50\ud83d\udd5c\ud83d\udd51\ud83d\udd5d\ud83d\udd52\ud83d\udd5e\ud83d\udd53\ud83d\udd5f\ud83d\udd54\ud83d\udd60\ud83d\udd55\ud83d\udd61\ud83d\udd56\ud83d\udd62\ud83d\udd57\ud83d\udd63\ud83d\udd58\ud83d\udd64\ud83d\udd59\ud83d\udd65\ud83d\udd5a\ud83d\udd66')</p> </li> <li> <p><code>button_change_format</code> button that switches format used setting to None     disables (default 1)</p> </li> <li> <p><code>button_change_time_format</code> button that switches format_time used. Setting     to None disables (default 2)</p> </li> <li> <p><code>button_reset</code> button that switches display to the first timezone. Setting     to None disables (default 3)</p> </li> <li> <p><code>cycle</code> If more than one display then how many seconds between changing the     display (default 0)</p> </li> <li> <p><code>format</code> defines the timezones displayed. This can be a single string or a     list.  If a list is supplied then the formats can be cycled through     using <code>cycle</code> or by button click.  (default '{Local}')</p> </li> <li> <p><code>format_time</code> format to use for the time, strftime directives such as <code>%H</code>     can be used this can be either a string or to allow multiple formats as     a list.  The one used can be changed by button click.     (default ['[{name_unclear} ]%c', '[{name_unclear} ]%x %X',     '[{name_unclear} ]%a %H:%M', '[{name_unclear} ]{icon}'])</p> </li> <li> <p><code>locale</code> Override the system locale. Examples:     when set to 'fr_FR' %a on Tuesday is 'mar.'.     (default None)</p> </li> <li> <p><code>round_to_nearest_block</code> defines how a block icon is chosen. Examples:     when set to True,  '13:14' is '\ud83d\udd50', '13:16' is '\ud83d\udd5c' and '13:31' is '\ud83d\udd5c';     when set to False, '13:14' is '\ud83d\udd50', '13:16' is '\ud83d\udd50' and '13:31' is '\ud83d\udd5c'.     (default True)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{icon}</code> a character representing the time from <code>blocks</code></p> </li> <li> <p><code>{name}</code> friendly timezone name eg <code>Buenos Aires</code></p> </li> <li> <p><code>{name_unclear}</code> friendly timezone name eg <code>Buenos Aires</code> but is empty if     only one timezone is provided</p> </li> <li> <p><code>{timezone}</code> full timezone name eg <code>America/Argentina/Buenos_Aires</code></p> </li> <li> <p><code>{timezone_unclear}</code> full timezone name eg <code>America/Argentina/Buenos_Aires</code>     but is empty if only one timezone is provided</p> </li> </ul> <p>Examples:</p> <pre><code># cycling through London, Warsaw, Tokyo\nclock {\n    cycle = 30\n    format = [\"{Europe/London}\", \"{Europe/Warsaw}\", \"{Asia/Tokyo}\"]\n    format_time = \"{name} %H:%M\"\n}\n\n# Show the time and date in New York\nclock {\n   format = \"Big Apple {America/New_York}\"\n   format_time = \"%Y-%m-%d %H:%M:%S\"\n}\n\n# wall clocks\nclock {\n    format = \"{Asia/Calcutta} {Africa/Nairobi} {Asia/Bangkok}\"\n    format_time = \"{name} {icon}\"\n}\n</code></pre> <p>author tobes ultrabug</p> <p>license BSD</p>"},{"location":"user-guide/modules/#cmus","title":"cmus","text":"<p>Display song currently playing in cmus.</p> <p>cmus (C* Music Player) is a small, fast and powerful console audio player which supports most major audio formats. Various features include gapless playback, ReplayGain support, MP3 and Ogg streaming, live filtering, instant startup, customizable key-bindings, and vi-style default key-bindings.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_next</code> mouse button to skip next track (default None)</p> </li> <li> <p><code>button_pause</code> mouse button to pause/play the playback (default 1)</p> </li> <li> <p><code>button_previous</code> mouse button to skip previous track (default None)</p> </li> <li> <p><code>button_stop</code> mouse button to stop the playback (default 3)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>format</code> display format for this module     (default '[\\?if=is_started [\\?if=is_playing &gt; ][\\?if=is_paused || ]'     '[\\?if=is_stopped .. ][[{artist}][\\?soft  - ][{title}]'     '|\\?show cmus: waiting for user input]]')</p> </li> <li> <p><code>replacements</code> specify a list/dict of string placeholders to modify (default None)</p> </li> <li> <p><code>sleep_timeout</code> sleep interval for this module. when cmus is not running,     this interval will be used. this allows some flexible timing where one     might want to refresh constantly with some placeholders... or to refresh     only once every minute rather than every few seconds. (default 20)</p> </li> </ul> <p>Control placeholders:</p> <ul> <li> <p><code>{is_paused}</code> a boolean based on cmus status</p> </li> <li> <p><code>{is_playing}</code> a boolean based on cmus status</p> </li> <li> <p><code>{is_started}</code> a boolean based on cmus status</p> </li> <li> <p><code>{is_stopped}</code> a boolean based on cmus status</p> </li> <li> <p><code>{continue}</code> a boolean based on data status</p> </li> <li> <p><code>{play_library}</code> a boolean based on data status</p> </li> <li> <p><code>{play_sorted}</code> a boolean based on data status</p> </li> <li> <p><code>{repeat}</code> a boolean based on data status</p> </li> <li> <p><code>{repeat_current}</code> a boolean based on data status</p> </li> <li> <p><code>{replaygain}</code> a boolean based on data status</p> </li> <li> <p><code>{replaygain_limit}</code> a boolean based on data status</p> </li> <li> <p><code>{shuffle}</code> a boolean based on data status</p> </li> <li> <p><code>{softvol}</code> a boolean based on data status</p> </li> <li> <p><code>{stream}</code> a boolean based on data status</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{aaa_mode}</code> shuffle mode, eg artist, album, all</p> </li> <li> <p><code>{albumartist}</code> album artist, eg (new output here)</p> </li> <li> <p><code>{album}</code> album name, eg (new output here)</p> </li> <li> <p><code>{artist}</code> artist name, eg (new output here)</p> </li> <li> <p><code>{bitrate}</code> audio bitrate, eg 229</p> </li> <li> <p><code>{comment}</code> comment, eg URL</p> </li> <li> <p><code>{date}</code> year number, eg 2015</p> </li> <li> <p><code>{duration}</code> length time in seconds, eg 171</p> </li> <li> <p><code>{durationtime}</code> length time in [HH:]MM:SS, eg 02:51</p> </li> <li> <p><code>{file}</code> file location, eg /home/user/Music...</p> </li> <li> <p><code>{position}</code> elapsed time in seconds, eg 17</p> </li> <li> <p><code>{positiontime}</code> elapsed time in [HH:]MM:SS, eg 00:17</p> </li> <li> <p><code>{replaygain_preamp}</code> replay gain preamp, eg 0.000000</p> </li> <li> <p><code>{status}</code> playback status, eg playing, paused, stopped</p> </li> <li> <p><code>{title}</code> track title, eg (new output here)</p> </li> <li> <p><code>{tracknumber}</code> track number, eg 0</p> </li> <li> <p><code>{vol_left}</code> left volume number, eg 90</p> </li> <li> <p><code>{vol_right}</code> right volume number, eg 90</p> <p>Placeholders are retrieved directly from <code>cmus-remote --query</code> command. The list was harvested only once and should not represent a full list.</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_paused</code> Paused, defaults to color_degraded</p> </li> <li> <p><code>color_playing</code> Playing, defaults to color_good</p> </li> <li> <p><code>color_stopped</code> Stopped, defaults to color_bad</p> </li> </ul> <p>Requires:</p> <ul> <li><code>cmus</code> a small feature-rich ncurses-based music player</li> </ul> <p>author lasers</p>"},{"location":"user-guide/modules/#coin_balance","title":"coin_balance","text":"<p>Display balances of diverse crypto-currencies.</p> <p>This module grabs your current balance of different crypto-currents from a wallet server. The server must conform to the bitcoin RPC specification. Currently Bitcoin, Dogecoin, and Litecoin are supported.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> An integer specifying the cache life-time of the output in     seconds (default 30)</p> </li> <li> <p><code>coin_password</code> A string containing the password for the server for     'coin'. The 'coin' part must be replaced by a supported coin identifier     (see below for a list of identifiers). If no value is supplied,     the value of 'password' (see below) will be used.  If 'password' too is     not set, the value will be retrieved from the standard 'coin' daemon     configuration file. (default None)</p> </li> <li> <p><code>coin_username</code> A string containing the username for the server for     'coin'. The 'coin' part must be replaced by a supported coin identifier     (see below for a list of identifiers). If no value is supplied,     the value of 'username' (see below) will be used.  If 'username' too is     not set, the value will be retrieved from the standard 'coin' daemon     configuration file. (default None)</p> </li> <li> <p><code>credentials</code> (default None)</p> </li> <li> <p><code>format</code> A string describing the output format for the module. The {&lt;coin&gt;}     placeholder (see below) will be used to determine how to fetch the     coin balance. Multiple placeholders are allowed, but all balances will     be fetched from the same host. (default 'LTC: {litecoin}')</p> </li> <li> <p><code>host</code> The coin-server hostname. Note that all coins will use the same host     for their queries. (default 'localhost')</p> </li> <li> <p><code>password</code> A string containing the password for all coin-servers. If neither     this setting, nor a specific coin_password (see above) is specified,     the password for each coin will be read from the respective standard     daemon configuration file. (default None)</p> </li> <li> <p><code>protocol</code> A string to select the server communication protocol.     (default 'http')</p> </li> <li> <p><code>username</code> A string containing the username for all coin-servers. If neither     this setting, nor a specific coin_username (see above) is specified,     the username for each coin will be read from the respective standard     daemon configuration file. (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{&lt;coin&gt;}</code> Your balance for the coin &lt;coin&gt; where &lt;coin&gt; is one of:</li> <li>bitcoin</li> <li>dogecoin</li> <li>litecoin</li> </ul> <p>Requires:</p> <ul> <li><code>requests</code> python module from pypi https://pypi.python.org/pypi/requests     At least version 2.4.2 is required.</li> </ul> <p>Examples:</p> <pre><code># Get your Bitcoin balance using automatic credential detection\ncoin_balance {\n    cache_timeout = 45\n    format = \"My BTC: {bitcoin}\"\n    host = \"localhost\"\n    protocol = \"http\"\n}\n\n# Get your Bitcoin, Dogecoin and Litecoin balances using specific credentials\n# for Bitcoin and automatic detection for Dogecoin and Litecoin\ncoin_balance {\n    # ...\n    format = \"{bitcoin} BTC {dogecoin} XDG {litecoin} LTC\"\n    bitcoin_username = \"lcdata\"\n    bitcoin_password = \"omikron-theta\"\n    # ...\n}\n\n# Get your Dogecoin and Litecoin balances using 'global' credentials\ncoin_balance {\n    # ...\n    format = \"XDG: {dogecoin} LTC: {litecoin}\"\n    username = \"crusher_b\"\n    password = \"WezRulez\"\n    # ...\n}\n\n# Get you Dogecoin, Litecoin, and Bitcoin balances by using 'global'\n# credentials for Bitcoin and Dogecoin but specific credentials for\n# Litecoin.\ncoin_balance {\n    # ...\n    format = \"XDG: {dogecoin} LTC: {litecoin} BTC: {bitcoin}\"\n    username = \"zcochrane\"\n    password = \"sunny_islands\"\n    litecoin_username = 'locutus'\n    litecoin_password = 'NCC-1791-D'\n    # ...\n}\n</code></pre> <p>author Felix Morgner &lt;felix.morgner@gmail.com&gt;</p> <p>license 3-clause-BSD</p>"},{"location":"user-guide/modules/#coin_market","title":"coin_market","text":"<p>Display cryptocurrency coins.</p> <p>The site offer various types of data such as name, symbol, price, volume, total supply, et cetera for a wide range of cryptocurrencies in various currencies. For more information, visit https://coinmarketcap.com</p> <p>Configuration parameters:</p> <ul> <li> <p><code>api_key</code> specify CoinMarketCap api key (default None)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module. a message from the site:     please limit requests to no more than 30 calls per minute. (default 600)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_coin}')</p> </li> <li> <p><code>format_coin</code> display format for coins     (default '{name} ${usd_price:.2f} '     '[\\?color=usd_percent_change_24h {usd_percent_change_24h:.1f}%]')</p> </li> <li> <p><code>format_coin_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>markets</code> specify a list of markets (default ['btc', 'eth'])</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(-100, 'bad'), (0, 'good')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_coin}</code> format for cryptocurrency coins</li> </ul> <p>format_coin placeholders:</p> <ul> <li> <p><code>{circulating_supply}</code>     eg 17906012</p> </li> <li> <p><code>{cmc_rank}</code>               eg 1</p> </li> <li> <p><code>{date_added}</code>             eg 2013-04-28T00:00:00.000Z</p> </li> <li> <p><code>{id}</code>                     eg 1</p> </li> <li> <p><code>{is_active}</code>              eg 1</p> </li> <li> <p><code>{is_fiat}</code>                eg 0</p> </li> <li> <p><code>{is_market_cap_included_in_calc}</code> eg 1</p> </li> <li> <p><code>{last_updated}</code>           eg 2019-08-30T18:51:28.000Z</p> </li> <li> <p><code>{max_supply}</code>             eg 21000000</p> </li> <li> <p><code>{name}</code>                   eg Bitcoin</p> </li> <li> <p><code>{num_market_pairs}</code>       eg 7919</p> </li> <li> <p><code>{platform}</code>               eg None</p> </li> <li> <p><code>{slug}</code>                   eg bitcoin</p> </li> <li> <p><code>{symbol}</code>                 eg BTC</p> </li> <li> <p><code>{tags}</code>                   eg ['mineable']</p> </li> <li> <p><code>{total_supply}</code>           eg 17906012</p> <p>Placeholders are retrieved directly from the URL. The list was harvested once and should not represent a full list.</p> <p>To print coins in different currencies, replicate the placeholders below with valid options (eg '{gbp_price:.2f}'):</p> <p>{xxx_last_updated}       eg 2019-08-30T18:51:28.000Z' {xxx_market_cap}         eg 171155540318.86005 {xxx_percent_change_1h}  eg -0.127291 {xxx_percent_change_24h} eg 0.328918 {xxx_percent_change_7d}  eg -8.00576 {xxx_price}              eg 9558.55163723 {xxx_volume_24h}         eg 13728947008.2722</p> <p>See https://coinmarketcap.com/api/documentation/v1/#section/Standards-and-Conventions for valid options, otherwise USD... in lowercase.</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Examples:</p> <pre><code># view coins in GBP and EUR\ncoin_market {\n    format_coin = \"{name} \u00a3{gbp_price:.2f} \u20ac{eur_price:.2f}\"\n}\n\n# colorize market names + symbols\ncoin_market {\n    format_coin = \"[\\?color=name {name}] \"\n    format_coin += \"[\\?color=symbol {symbol}] ${usd_price:.2f} \"\n    format_coin += \"[\\?color=usd_percent_change_24h {usd_percent_change_24h}%]\"\n    markets = [\"btc\", \"eth\", \"ltc\", \"doge\"]\n    thresholds = {\n        \"name\": [\n            (\"Bitcoin\", \"greenyellow\"),\n            (\"Ethereum\", \"deepskyblue\"),\n            (\"Litecoin\", \"crimson\"),\n            (\"Dogecoin\", \"orange\"),\n        ],\n        \"symbol\": [\n            (\"BTC\", \"darkgray\"),\n            (\"ETH\", \"darkgray\"),\n            (\"LTC\", \"darkgray\"),\n            (\"DOGE\", \"darkgray\"),\n        ],\n        \"usd_percent_change_24h\": [(-100, \"bad\"), (0, \"good\")],\n    }\n}\n</code></pre> <p>author lasers, x86kernel</p>"},{"location":"user-guide/modules/#conky","title":"conky","text":"<p>Display Conky objects/variables on the bar.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>config</code> specify configuration settings for conky (default {})</p> </li> <li> <p><code>format</code> display format for this module (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:     According to man page, Conky has more than 250 built-in objects/variables.</p> <pre><code>See `man -P 'less -p OBJECTS/VARIABLES' conky` for a full list of Conky\nobjects/variables to use. Not all of Conky objects/variables will be\nsupported or usable.\n</code></pre> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder     Replace spaces with periods.</li> </ul> <p>Examples:</p> <pre><code># add conky config options\n# See `man -P \"less -p 'CONFIGURATION SETTINGS'\" conky` for a full list\n# of Conky configuration options. Not all of Conky configuration options\n# will be supported or usable.\nconky {\n    config = {\n        'update_interval': 10             # update interval for conky\n        'update_interval_on_battery': 60  # update interval when on battery\n        'format_human_readable': True,    # if False, print in bytes\n        'short_units': True,              # shortens units, eg kiB-&gt;k, GiB-&gt;G\n        'uppercase': True,                # upper placeholders\n    }\n}\n\n# display ip address\norder += \"conky addr\"\nconky addr {\n    format = 'IP [\\?color=orange {addr eno1}]'\n}\n\n# display load averages\norder += \"conky loadavg\"\nconky loadavg {\n    format = 'Loadavg '\n    format += '[\\?color=lightgreen {loadavg 1} ]'\n    format += '[\\?color=lightgreen {loadavg 2} ]'\n    format += '[\\?color=lightgreen {loadavg 3}]'\n}\n\n# exec commands at different intervals, eg 5s, 60s, and 3600s\norder += \"conky date\"\nconky date {\n    format = 'Exec '\n    format += '[\\?color=good {execi 5 \"date\"}] '\n    format += '[\\?color=degraded {execi 60 \"uptime -p\"}] '\n    format += '[\\?color=bad {execi 3600 \"uptime -s\"}]'\n}\n\n# display diskio read, write, etc\norder += \"conky diskio\"\nconky diskio {\n    format = 'Disk IO [\\?color=darkgray&amp;show sda] '\n    format += '[\\?color=lightskyblue '\n    format += '{diskio_read sda}/{diskio_write sda} '\n    format += '({diskio sda})]'\n\n    # format += ' '\n    # format += '[\\?color=darkgray&amp;show sdb] '\n    # format += '[\\?color=lightskyblue '\n    # format += '{diskio_read sdb}/{diskio_write sdb} '\n    # format += '({diskio sdb})]'\n    config = {'short_units': True}\n}\n\n# display total number of processes and running processes\norder += \"conky proc\"\nconky proc {\n    format = 'Processes [\\?color=cyan {processes}/{running_processes}]'\n}\n\n# display top 3 cpu (+mem_res) processes\norder += \"conky top_cpu\" {\nconky top_cpu {\n    format = 'Top [\\?color=darkgray '\n    format += '{top name 1} '\n    format += '[\\?color=deepskyblue {top mem_res 1}] '\n    format += '[\\?color=lightskyblue {top cpu 1}%] '\n\n    format += '{top name 2} '\n    format += '[\\?color=deepskyblue {top mem_res 2}] '\n    format += '[\\?color=lightskyblue {top cpu 2}%] '\n\n    format += '{top name 3} '\n    format += '[\\?color=deepskyblue {top mem_res 3}] '\n    format += '[\\?color=lightskyblue {top cpu 3}%]]'\n    config = {'short_units': True}\n}\n\n# display top 3 memory processes\norder += \"conky top_mem\"\nconky top_mem {\n    format = 'Top Mem [\\?color=darkgray '\n    format += '{top_mem name 1} '\n    format += '[\\?color=yellowgreen {top_mem mem_res 1}] '\n    format += '[\\?color=lightgreen {top_mem mem 1}%] '\n\n    format += '{top_mem name 2} '\n    format += '[\\?color=yellowgreen {top_mem mem_res 2}] '\n    format += '[\\?color=lightgreen {top_mem mem 2}%] '\n\n    format += '{top_mem name 3} '\n    format += '[\\?color=yellowgreen {top_mem mem_res 3}] '\n    format += '[\\?color=lightgreen {top_mem mem 3}%]]'\n    config = {'short_units': True}\n}\n\n# display memory, memperc, membar + thresholds\norder += \"conky memory\"\nconky memory {\n    format = 'Memory [\\?color=lightskyblue {mem}/{memmax}] '\n    format += '[\\?color=memperc {memperc}% \\[{membar}\\]]'\n    thresholds = [\n        (0, 'darkgray'), (0.001, 'good'), (50, 'degraded'),\n        (75, 'orange'), (85, 'bad')\n    ]\n}\n\n# display swap, swapperc, swapbar + thresholds\norder += \"conky swap\"\nconky swap {\n    format = 'Swap [\\?color=lightcoral {swap}/{swapmax}] '\n    format += '[\\?color=swapperc {swapperc}% \\[{swapbar}\\]]'\n    thresholds = [\n        (0, 'darkgray'), (0.001, 'good'), (50, 'degraded'),\n        (75, 'orange'), (85, 'bad')\n    ]\n}\n\n# display up/down speed and up/down total\norder += \"conky network\"\nconky network {\n    format = 'Speed [\\?color=title {upspeed eno1}/{downspeed eno1}] '\n    format += 'Total [\\?color=title {totalup eno1}/{totaldown eno1}]'\n    color_title = '#ff6699'\n}\n\n# display file systems + thresholds\norder += \"conky filesystem\"\nconky filesystem {\n    # home filesystem\n    format = 'Home [\\?color=violet {fs_used /home}/{fs_size /home} '\n    format += '[\\?color=fs_used_perc./home '\n    format += '{fs_used_perc /home}% \\[{fs_bar /home}\\]]]'\n\n    # hdd filesystem\n    # format += ' HDD [\\?color=violet {fs_used '\n    # format += '/run/media/user/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n    # format += '}/{fs_size '\n    # format += '/run/media/user/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n    # format += '}[\\?color=fs_used_perc.'\n    # format += '/run/media/user/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n    # format += ' {fs_used_perc '\n    # format += '/run/media/user/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n    # format += '}% \\[{fs_bar '\n    # format += '/run/media/user/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n    # format += '}\\]]]'\n\n    thresholds = [\n        (0, 'darkgray'), (0.001, 'good'), (50, 'degraded'),\n        (75, 'orange'), (85, 'bad')\n    ]\n}\n\n# show cpu percents/bars + thresholds\norder += \"conky cpu\"\nconky cpu {\n    format = 'CPU '\n    format += '[\\?color=cpu.cpu0 {cpu cpu0}% {cpubar cpu0}] '\n    format += '[\\?color=cpu.cpu1 {cpu cpu1}% {cpubar cpu1}] '\n    format += '[\\?color=cpu.cpu2 {cpu cpu2}% {cpubar cpu2}] '\n    format += '[\\?color=cpu.cpu3 {cpu cpu3}% {cpubar cpu3}]'\n\n    thresholds = [\n        (0, 'darkgray'), (0.001, 'good'), (50, 'degraded'),\n        (75, 'orange'), (85, 'bad')\n    ]\n}\n\n# show more examples, many outputs\norder += \"conky info\"\nconky info {\n    format = '[\\?color=title&amp;show OS] [\\?color=output {distribution}] '\n    format += '[\\?color=title&amp;show CPU] [\\?color=output {cpu cpu0}%] '\n    format += '[\\?color=title&amp;show MEM] '\n    format += '[\\?color=output {mem}/{memmax} ({memperc}%)] '\n    format += '[\\?color=title&amp;show HDD] [\\?color=output {fs_used_perc}%] '\n    format += '[\\?color=title&amp;show Kernel] [\\?color=output {kernel}] '\n    format += '[\\?color=title&amp;show Loadavg] [\\?color=output {loadavg 1}] '\n    format += '[\\?color=title&amp;show Uptime] [\\?color=output {uptime}] '\n    format += '[\\?color=title&amp;show Freq GHZ] [\\?color=output {freq_g}]'\n    color_title = '#ffffff'\n    color_output = '#00bfff'\n}\n\n# change console bars - shoutout to su8 for adding this\nconky {\n    config = {\n        'console_bar_fill': \"'#'\",\n        'console_bar_unfill': \"'_'\",\n        'default_bar_width': 10,\n    }\n}\n\n# display nvidia stats - shoutout to brndnmtthws for fixing this\n# See `man -P 'less -p nvidia\\ argument' conky` for more nvidia variables.\norder += \"conky nvidia\"\nconky nvidia {\n    format = 'GPU Temp [\\?color=greenyellow {nvidia temp}] '\n    format += 'GPU Freq [\\?color=greenyellow {nvidia gpufreq}] '\n    format += 'Mem Freq [\\?color=greenyellow {nvidia memfreq}] '\n    format += 'MTR Freq [\\?color=greenyellow {nvidia mtrfreq}] '\n    format += 'Perf [\\?color=greenyellow {nvidia perflevel}] '\n    format += 'Mem Perc [\\?color=greenyellow {nvidia memperc}]'\n    config = {\n        'nvidia_display': \"':0'\"\n    }\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#deadbeef","title":"deadbeef","text":"<p>Display songs currently playing in DeaDBeeF.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>format</code> display format for this module (default '[{artist} - ][{title}]')</p> </li> <li> <p><code>replacements</code> specify a list/dict of string placeholders to modify (default None)</p> </li> <li> <p><code>sleep_timeout</code> when deadbeef is not running, this interval will be used     to allow faster refreshes with time-related placeholders and/or     to refresh few times per minute rather than every few seconds     (default 20)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{album}</code> name of the album</p> </li> <li> <p><code>{artist}</code> name of the artist</p> </li> <li> <p><code>{length}</code> length time in [HH:]MM:SS</p> </li> <li> <p><code>{playback_time}</code> elapsed time in [HH:]MM:SS</p> </li> <li> <p><code>{title}</code> title of the track</p> </li> <li> <p><code>{tracknumber}</code> track number in two digits</p> </li> <li> <p><code>{year}</code> year in four digits</p> <p>For more placeholders, see title formatting 2.0 in 'deadbeef --help' or https://github.com/DeaDBeeF-Player/deadbeef/wiki/Title-formatting-2.0 Not all of Foobar2000 remapped metadata fields will work with deadbeef and a quick reminder about using {placeholders} here instead of %placeholder%.</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_paused</code> Paused, defaults to color_degraded</p> </li> <li> <p><code>color_playing</code> Playing, defaults to color_good</p> </li> <li> <p><code>color_stopped</code> Stopped, defaults to color_bad</p> </li> </ul> <p>Requires:</p> <ul> <li><code>deadbeef</code> a GTK+ audio player for GNU/Linux</li> </ul> <p>Examples:</p> <pre><code># see 'deadbeef --help' for more buttons\ndeadbeef {\n    on_click 1 = 'exec deadbeef --play-pause'\n    on_click 8 = 'exec deadbeef --random'\n}\n</code></pre> <p>author mrt-prodz</p>"},{"location":"user-guide/modules/#dexcom","title":"dexcom","text":"<p>Display glucose readings from your Dexcom CGM system.</p> <p>Dexcom CGM systems provide glucose readings up to every five minutes. Designed to help diabetes patients keep track of their blood glucose levels with ease.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>format</code> display format for this module     (default \"Dexcom [\\?color=mg_dl {mg_dl} mg/dL {trend_arrow}] [\\?color=darkgrey {datetime}]\")</p> </li> <li> <p><code>format_datetime</code> specify strftime characters to format (default {\"datetime\": \"%-I:%M %p\"})</p> </li> <li> <p><code>ous</code> specify whether if the Dexcom Share user is outside of the US (default False)</p> </li> <li> <p><code>password</code> specify password for the Dexcom Share user (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default {     \"mg_dl\": [(55, \"bad\"), (70, \"degraded\"), (80, \"good\"), (130, \"degraded\"), (180, \"bad\")],     \"mmol_l\": [(3.1, \"bad\"), (3.9, \"degraded\"), (4.4, \"good\"), (7.2, \"degraded\"), (10.0, \"bad\")],     })</p> </li> <li> <p><code>username</code> specify username for the Dexcom Share user, not follower (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{mg_dl}</code> blood glucose value in mg/dL, eg 80</p> </li> <li> <p><code>{mmol_l}</code> blood glucose value in mmol/L, eg 4.4</p> </li> <li> <p><code>{trend}</code> blood glucose trend information, eg 4</p> </li> <li> <p><code>{trend_direction}</code> blood glucose trend direction, eg Flat</p> </li> <li> <p><code>{trend_description}</code> blood glucose trend information description, eg steady</p> </li> <li> <p><code>{trend_arrow}</code> blood glucose trend as unicode arrow, eg \u2192</p> </li> <li> <p><code>{datetime}</code> glucose reading recorded time as datetime</p> </li> </ul> <p>format_datetime placeholders:</p> <ul> <li> <p><code>key</code> epoch_placeholder, eg {datetime}</p> </li> <li> <p><code>value</code> % strftime characters to be translated, eg '%b %d' ----&gt; 'Jan 1'</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>pydexcom</code> A simple Python API to interact with Dexcom Share service</li> </ul> <p>Notes:     IF GLUCOSE ALERTS AND CGM READINGS DO NOT MATCH SYMPTOMS OR EXPECTATIONS,     USE A BLOOD GLUCOSE METER TO MAKE DIABETES TREATMENT DECISIONS.</p> <p>Examples:</p> <pre><code># compact\ndexcom {\n    format = \"[\\?color=mg_dl {mg_dl} {trend_arrow}][\\?color=darkgrey {datetime}]\"\n    format_datetime = {\"datetime\": \"%-I:%M\"}\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#diskdata","title":"diskdata","text":"<p>Display disk information.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module. (default 10)</p> </li> <li> <p><code>disk</code> show stats for disk or partition, i.e. <code>sda1</code>. None for all disks.     (default None)</p> </li> <li> <p><code>format</code> display format for this module.     (default \"{disk}: {used_percent}%[ ({total})]\")</p> </li> <li> <p><code>format_rate</code> display format for rates value     (default \"[\\?min_length=11 {value:.1f} {unit}]\")</p> </li> <li> <p><code>format_space</code> display format for disk space values     (default \"[\\?min_length=5 {value:.1f}]\")</p> </li> <li> <p><code>sector_size</code> size of the disk's sectors.     (default 512)</p> </li> <li> <p><code>si_units</code> use SI units     (default False)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default {'free': [(0, 'bad'), (10, 'degraded'), (100, 'good')],     'total': [(0, 'good'), (1024, 'degraded'), (1024 * 1024, 'bad')],     'used_percent': [(0, 'good'), (40, 'degraded'), (75, 'bad')]})</p> </li> <li> <p><code>unit</code> unit to use. If the unit contains a multiplier prefix, only this     exact unit will ever be used     (default \"B/s\")</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{disk}</code> the selected disk</p> </li> <li> <p><code>{free}</code> free space on disk in GB</p> </li> <li> <p><code>{used}</code> used space on disk in GB</p> </li> <li> <p><code>{total_space}</code> total space on disk in GB</p> </li> <li> <p><code>{used_percent}</code> used space on disk in %</p> </li> <li> <p><code>{read}</code> reading rate</p> </li> <li> <p><code>{total}</code> total IO rate</p> </li> <li> <p><code>{write}</code> writing rate</p> </li> </ul> <p>format_rate placeholders:</p> <ul> <li> <p><code>{unit}</code> name of the unit</p> </li> <li> <p><code>{value}</code> numeric value of the rate</p> </li> </ul> <p>format_space placeholders:</p> <ul> <li><code>{value}</code> numeric value of the free/used space on the device</li> </ul> <p>Color thresholds:</p> <ul> <li> <p><code>{free}</code> Change color based on the value of free</p> </li> <li> <p><code>{used}</code> Change color based on the value of used</p> </li> <li> <p><code>{used_percent}</code> Change color based on the value of used_percent</p> </li> <li> <p><code>{read}</code> Change color based on the value of read</p> </li> <li> <p><code>{total}</code> Change color based on the value of total</p> </li> <li> <p><code>{write}</code> Change color based on the value of write</p> </li> </ul> <p>author guiniol</p> <p>license BSD</p>"},{"location":"user-guide/modules/#do_not_disturb","title":"do_not_disturb","text":"<p>Turn on and off desktop notifications.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module; for xfce4-notifyd     (default 30)</p> </li> <li> <p><code>format</code> display format for this module     (default '{name} [\\?color=state&amp;show DND]')</p> </li> <li> <p><code>pause</code> specify whether to pause or kill processes; for dunst     see <code>Dunst Miscellaneous</code> section for more information     (default True)</p> </li> <li> <p><code>server</code> specify server to use, eg mako, dunst or xfce4-notifyd, otherwise auto     (default None)</p> </li> <li> <p><code>state</code> specify state to use on startup, otherwise last     False: disable Do Not Disturb on startup     True: enable Do Not Disturb on startup     last: toggle last known state on startup     None: query current state from notification manager (doesn't work on dunst&lt;1.5.0)     (default 'last')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'bad'), (1, 'good')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{name}</code> name, eg Mako, Dunst, Xfce4-notifyd</p> </li> <li> <p><code>{state}</code> do not disturb state, eg 0, 1</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Dunst Miscellaneous:     When paused, dunst will not display any notifications but keep all     notifications in a queue. This can for example be wrapped around a screen     locker (i3lock, slock) to prevent flickering of notifications through the     lock and to read all missed notifications after returning to the computer.     This means that by default (pause = False), all notifications sent while     DND is active will NOT be queued and displayed when DND is deactivated.</p> <p>Mako Miscellaneous:     Mako requires that you manually create a 'do-not-disturb' mode as shown     in https://man.voidlinux.org/mako.5#MODES.     This module expects this mode to be configured by the user as suggested by     the mako documentation:     [mode=do-not-disturb]     invisible=1</p> <p>Examples:</p> <pre><code># display ON/OFF\ndo_not_disturb {\n    format = '{name} [\\?color=state [\\?if=state  ON|OFF]]'\n}\n\n# display 1/0\ndo_not_disturb {\n    format = '{name} [\\?color=state {state}]'\n}\n\n# display DO NOT DISTURB/DISTURB\ndo_not_disturb {\n    format = '[\\?color=state [\\?if=state DO NOT DISTURB|DISTURB]]'\n    thresholds = [(0, \"darkgray\"), (1, \"good\")]\n}\n</code></pre> <p>author Maxim Baz https://github.com/maximbaz (dunst)</p> <p>author Robert Ricci https://github.com/ricci (xfce4-notifyd)</p> <p>author Cyrinux https://github.com/cyrinux (mako)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#dpms","title":"dpms","text":"<p>Turn on and off DPMS and screen saver blanking.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_off</code> mouse button to turn off screen (default None)</p> </li> <li> <p><code>button_toggle</code> mouse button to toggle DPMS (default 1)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 15)</p> </li> <li> <p><code>format</code> display format for this module (default '{icon}')</p> </li> <li> <p><code>icon_off</code> show when DPMS is disabled (default 'DPMS')</p> </li> <li> <p><code>icon_on</code> show when DPMS is enabled (default 'DPMS')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{icon}</code> DPMS icon</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_on</code> Enabled, defaults to color_good</p> </li> <li> <p><code>color_off</code> Disabled, defaults to color_bad</p> </li> </ul> <p>author Andre Doser &lt;dosera AT tf.uni-freiburg.de&gt;</p>"},{"location":"user-guide/modules/#dropboxd_status","title":"dropboxd_status","text":"<p>Display status of Dropbox daemon.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default \"Dropbox: {status}\")</p> </li> <li> <p><code>status_busy</code> text for placeholder {status} when Dropbox is busy     (default None)</p> </li> <li> <p><code>status_off</code> text for placeholder {status} when Dropbox isn't running     (default \"isn't running\")</p> </li> <li> <p><code>status_on</code> text for placeholder {status} when Dropbox is up to date     (default \"Up to date\")</p> </li> </ul> <p>Value for <code>status_off</code> if not set:   - Dropbox isn't running!</p> <p>Value for <code>status_on</code> if not set:   - Up to date</p> <p>Values for <code>status_busy</code> if not set:   - Connecting...   - Starting...   - Downloading file list...   - Syncing \"filename\"</p> <p>Format placeholders:</p> <ul> <li><code>{status}</code> Dropbox status</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Not running</p> </li> <li> <p><code>color_degraded</code> Busy</p> </li> <li> <p><code>color_good</code> Up to date</p> </li> </ul> <p>Requires:</p> <ul> <li><code>dropbox-cli</code> command line interface for dropbox</li> </ul> <p>Notes:     Some distributions offer an option to install dropbox-cli. If you don't see     one for your distribution, then you need to download CLI Python script,     https://www.dropbox.com/help/desktop-web/linux-commands#commands, rename     it to <code>dropbox-cli</code>, make the script executable and available in your PATH.</p> <p>author Tjaart van der Walt (github:tjaartvdwalt)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#emerge_status","title":"emerge_status","text":"<p>Display information about the currently running emerge process.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in second.     NOTE: when emerge is running, we will refresh this module every second.     (default 30)</p> </li> <li> <p><code>emerge_log_file</code> path to the emerge log file.     (default '/var/log/emerge.log')</p> </li> <li> <p><code>format</code> display format for this module     (default '{prefix}[\\?if=is_running : [\\?if=!total=0 '     '[{current}/{total} {action} {category}/{pkg}]'     '|calculating...]|: stopped 0/0]')</p> </li> <li> <p><code>prefix</code> prefix in statusbar     (default \"emrg\")</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{action}</code> current emerge action</p> </li> <li> <p><code>{category}</code> category of the currently emerged package</p> </li> <li> <p><code>{current}</code> number of package that is currently emerged</p> </li> <li> <p><code>{pkg}</code> name of the currently emerged packaged</p> </li> <li> <p><code>{total}</code> total number of packages that will be emerged</p> </li> </ul> <p>Examples:</p> <pre><code># Hide if not running\nemerge_status {\n    format = \"[\\?if=is_running {prefix}: [\\?if=!total=0 \"\n    format += \"{current}/{total} {action} {category}/{pkg}\"\n    format += \"|calculating...]]\"\n}\n\n# Minimalistic\nemerge_status {\n    format = \"[\\?if=is_running [\\?if=!total=0 {current}/{total}]]\"\n}\n\n# Minimalistic II\nemerge_status {\n    format = \"[\\?if=is_running {current}/{total}]\"\n}\n</code></pre> <p>author AnwariasEu</p>"},{"location":"user-guide/modules/#exchange_rate","title":"exchange_rate","text":"<p>Display foreign exchange rates.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>api_key</code> the exchangeratesapi.io API access key (default None)</p> </li> <li> <p><code>base</code> specify base currency to use for exchange rates (default 'EUR')</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 600)</p> </li> <li> <p><code>format</code> display format for this module (default '${USD} \u00a3{GBP} \u00a5{JPY}')</p> </li> </ul> <p>Format placeholders:     See https://api.exchangeratesapi.io/latest for a full list of foreign     exchange rates published by the European Central Bank. Not all of exchange     rates will be available. Also, see https://en.wikipedia.org/wiki/ISO_4217</p> <p>author tobes</p> <p>license BSD</p>"},{"location":"user-guide/modules/#external_script","title":"external_script","text":"<p>Display output of a given script.</p> <p>Display output of any executable script set by <code>script_path</code>. Only the first two lines of output will be used. The first line is used as the displayed text. If the output has two or more lines, the second line is set as the text color (and should hence be a valid hex color code such as #FF0000 for red). The script should not have any parameters, but it could work.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_show_notification</code> button to show notification with full output     (default None)</p> </li> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds     (default 15)</p> </li> <li> <p><code>convert_numbers</code> convert decimal numbers to a numeric type     (default True)</p> </li> <li> <p><code>format</code> see placeholders below (default '{output}')</p> </li> <li> <p><code>localize</code> should script output be localized (if available)     (default True)</p> </li> <li> <p><code>script_path</code> script you want to show output of (compulsory)     (default None)</p> </li> <li> <p><code>strip_output</code> shall we strip leading and trailing spaces from output     (default False)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{lines}</code> number of lines in the output</p> </li> <li> <p><code>{output}</code> output of script given by \"script_path\"</p> </li> <li> <p><code>{composite}</code> composite output of script given by \"script_path\"</p> </li> </ul> <p>Examples:</p> <pre><code>external_script {\n    format = \"my name is {output}\"\n    script_path = \"/usr/bin/whoami\"\n}\n</code></pre> <p>author frimdo ztracenastopa@centrum.cz</p>"},{"location":"user-guide/modules/#fedora_updates","title":"fedora_updates","text":"<p>Display number of pending updates for Fedora Linux.</p> <p>This will display a count of how many <code>dnf</code> updates are waiting to be installed. Additionally check for update security notices.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds     (default 600)</p> </li> <li> <p><code>check_security</code> Check for security updates     (default True)</p> </li> <li> <p><code>format</code> Display format to use     (default 'DNF: {updates}')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{updates}</code> number of pending dnf updates</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Security notice</p> </li> <li> <p><code>color_degraded</code> Upgrade available</p> </li> <li> <p><code>color_good</code> No upgrades needed</p> </li> </ul> <p>author tobes</p> <p>license BSD</p>"},{"location":"user-guide/modules/#file_status","title":"file_status","text":"<p>Display if files or directories exists.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module     (default '\\?color=path [\\?if=path \u25cf|\u25a0]')</p> </li> <li> <p><code>format_path</code> format for paths (default '{basename}')</p> </li> <li> <p><code>format_path_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>paths</code> specify a string or a list of paths to check (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'bad'), (1, 'good')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{format_path}</code> format for paths</p> </li> <li> <p><code>{path}</code> number of paths, eg 1, 2, 3</p> </li> </ul> <p>format_path placeholders:</p> <ul> <li> <p><code>{basename}</code> basename of pathname</p> </li> <li> <p><code>{pathname}</code> pathname</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> files or directories does not exist</p> </li> <li> <p><code>color_good</code> files or directories exists</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>format</code>     path: print a color based on the number of paths</li> </ul> <p>Examples:</p> <pre><code># add multiple paths with wildcard or with pathnames\nfile_status {\n    paths = ['/tmp/test*', '~user/test1', '~/Videos/*.mp4']\n}\n\n# colorize basenames\nfile_status {\n    paths = ['~/.config/i3/modules/*.py']\n    format = '{format_path}'\n    format_path = '\\?color=good {basename}'\n    format_path_separator = ', '\n}\n</code></pre> <p>author obb, Moritz L\u00fcdecke, Cyril Levis (@cyrinux)</p>"},{"location":"user-guide/modules/#frame","title":"frame","text":"<p>Group modules and treat them as a single one.</p> <p>This can be useful for example when adding modules to a group and you wish two modules to be shown at the same time.</p> <p>By adding the <code>{button}</code> placeholder in the format you can enable a toggle button to hide or show the content.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_toggle</code> Button used to toggle if one in format.     Setting to None disables (default 1)</p> </li> <li> <p><code>format</code> Display format to use (default '{output}')</p> </li> <li> <p><code>format_button_closed</code> Format for the button when frame open (default '+')</p> </li> <li> <p><code>format_button_open</code> Format for the button when frame closed (default '-')</p> </li> <li> <p><code>format_separator</code> Specify separator between contents.     If this is None then the default i3bar separator will be used     (default None)</p> </li> <li> <p><code>open</code> If button then the frame can be set to be open or close     (default True)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{button}</code> If used a button will be used that can be clicked to hide/show     the contents of the frame.</p> </li> <li> <p><code>{output}</code> The output of the modules in the frame</p> </li> <li> <p><code>{output_xxx}</code> The output of the module xxx (even if the button is currently     toggled off).</p> </li> </ul> <p>Examples:</p> <pre><code># A frame showing times in different cities.\n# We also have a button to hide/show the content\nframe time {\n    format = '{output}{button}'\n    format_separator = ' '  # have space instead of usual i3bar separator\n\n    tztime la {\n        format = \"LA %H:%M\"\n        timezone = \"America/Los_Angeles\"\n    }\n    tztime ny {\n        format = \"NY %H:%M\"\n        timezone = \"America/New_York\"\n    }\n    tztime du {\n        format = \"DU %H:%M\"\n        timezone = \"Asia/Dubai\"\n    }\n}\n\n# Define a group which shows volume and battery info or the current time.\n# The frame, volume_status and battery_level modules are named to prevent\n# them clashing with any other defined modules of the same type.\ngroup {\n    frame {\n        volume_status {}\n        battery_level {}\n    }\n    time {}\n}\n\n# Define a group where the button is colored only if sub module has some output\nframe ipv6 {\n    format = \"[\\?if=output_ipv6 {output}{button}|\\?color=#bad {output}{button}]\"\n    open = false\n\n    ipv6 {\n        format_up = \"%ip\"\n        format_down = \"\"\n    }\n}\n</code></pre> <p>author tobes</p>"},{"location":"user-guide/modules/#getjson","title":"getjson","text":"<p>Display JSON data fetched from a URL.</p> <p>This module gets the given <code>url</code> configuration parameter and assumes the response is a JSON object. The keys of the JSON object are used as the format placeholders. The format placeholders are replaced by the value. Objects that are nested can be accessed by using the <code>delimiter</code> configuration parameter in between.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 30)</p> </li> <li> <p><code>delimiter</code> the delimiter between parent and child objects (default '-')</p> </li> <li> <p><code>format</code> display format for this module (default None)</p> </li> <li> <p><code>password</code> basic auth password information (default None)</p> </li> <li> <p><code>url</code> specify URL to fetch JSON from (default None)</p> </li> <li> <p><code>username</code> basic auth user information (default None)</p> </li> </ul> <p>Format placeholders:     Placeholders will be replaced by the JSON keys.</p> <pre><code>Placeholders for objects with sub-objects are flattened using 'delimiter'\nin between (eg. {'parent': {'child': 'value'}} will use placeholder\n{parent-child}).\n\nPlaceholders for list elements have 'delimiter' followed by the index\n(eg. {'parent': ['this', 'that']) will use placeholders {parent-0}\nfor 'this' and {parent-1} for 'that'.\n</code></pre> <p>Examples:</p> <pre><code># straightforward key replacement\ngetjson {\n    url = \"https://ifconfig.co/json\"\n    format = \"{latitude}, {longitude}\"\n}\n\n# access child objects\ngetjson {\n    url = 'https://api.icndb.com/jokes/random'\n    format = '{value-joke}'\n}\n\n# access title from 0th element of articles list\ngetjson {\n    url = 'https://newsapi.org/v1/articles?source=bbc-news&amp;sortBy=top&amp;apiKey={KEY}'\n    format = '{articles-0-title}'\n}\n\n# access if top-level object is a list\ngetjson {\n    url = 'https://jsonplaceholder.typicode.com/posts/1/comments'\n    format = '{0-name}'\n}\n</code></pre> <p>author vicyap</p>"},{"location":"user-guide/modules/#github","title":"github","text":"<p>Display Github notifications and issue/pull requests for a repo.</p> <p>To check notifications a Github <code>username</code> and <code>personal access token</code> are required.  You can create a personal access token at https://github.com/settings/tokens/new?scopes=notifications&amp;description=py3status The only <code>scope</code> needed is <code>notifications</code> is selected automatically for you, which provides readonly access to notifications.</p> <p>The Github API is rate limited so setting <code>cache_timeout</code> too small may cause issues see https://developer.github.com/v3/#rate-limiting for details</p> <p>Configuration parameters:</p> <ul> <li> <p><code>auth_token</code> Github personal access token, needed to check notifications     see above.     (default None)</p> </li> <li> <p><code>button_action</code> Button that when clicked opens the Github notification page     if notifications, else the project page for the repository if there is     one (otherwise the github home page). Setting to <code>None</code> disables.     (default 3)</p> </li> <li> <p><code>button_refresh</code> Button that when clicked refreshes module.     Setting to <code>None</code> disables.     (default 2)</p> </li> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds     (default 60)</p> </li> <li> <p><code>format</code> display format for this module, see Examples below (default None)</p> </li> <li> <p><code>format_notifications</code> Format of <code>{notification}</code> status placeholder.     (default ' N{notifications_count}')</p> </li> <li> <p><code>notifications</code> Type of notifications can be <code>all</code> for all notifications or     <code>repo</code> to only get notifications for the repo specified.  If repo is     not provided then all notifications will be checked.     (default 'all')</p> </li> <li> <p><code>repo</code> Github repo to check     (default 'ultrabug/py3status')</p> </li> <li> <p><code>url_api</code> Change only if using Enterprise Github, example https://github.domain.com/api/v3.     (default 'https://api.github.com')</p> </li> <li> <p><code>url_base</code> Change only if using Enterprise Github, example https://github.domain.com.     (default 'https://github.com')</p> </li> <li> <p><code>username</code> Github username, needed to check notifications.     (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{issues}</code> Number of open issues.</p> </li> <li> <p><code>{notifications}</code> Notifications.  If no notifications this will be empty.</p> </li> <li> <p><code>{notifications_count}</code> Number of notifications.  This is also the Only     placeholder available to <code>format_notifications</code>.</p> </li> <li> <p><code>{pull_requests}</code> Number of open pull requests</p> </li> <li> <p><code>{repo}</code> short name of the repository being checked. eg py3status</p> </li> <li> <p><code>{repo_full}</code> full name of the repository being checked. eg ultrabug/py3status</p> </li> </ul> <p>Examples:</p> <pre><code># default formats\ngithub {\n    # with username and auth_token, this will be used\n    format = '{repo} {issues}/{pull_requests}{notifications}'\n\n    # otherwise, this will be used\n    format '{repo} {issues}/{pull_requests}'\n}\n\n# set github access credentials\ngithub {\n    auth_token = '40_char_hex_access_token'\n    username = 'my_username'\n}\n\n# just check for any notifications\ngithub {\n    auth_token = '40_char_hex_access_token'\n    username = 'my_username'\n    format = 'Github {notifications_count}'\n}\n</code></pre> <p>author tobes</p>"},{"location":"user-guide/modules/#gitlab","title":"gitlab","text":"<p>Display number of issues, requests and more from a GitLab project.</p> <p>A token is required. See https://gitlab.com/profile/personal_access_tokens to make one. Make a name, eg py3status, and enable api in scopes. Save.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>auth_token</code> specify a personal access token to use (default None)</p> </li> <li> <p><code>button_open</code> mouse button to open project url (default 1)</p> </li> <li> <p><code>button_refresh</code> mouse button to refresh this module (default 2)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 900)</p> </li> <li> <p><code>format</code> display format for this module     (default '[{name} ][[{open_issues_count}][\\?soft /]'     '[{open_merge_requests_count}]]')</p> </li> <li> <p><code>project</code> specify a project to use (default 'gitlab-org/gitlab-ce')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:     See <code>sp</code> below for a full list of supported GitLab placeholders to use.     Not all of GitLab placeholders will be usable.</p> <pre><code>single_project:\n    {name}                      project name, eg py3status\n    {star_count}                number of stars, eg 2\n    {forks_count}               number of forks, eg 3\n    {open_issues_count}         number of open issues, eg 4\n    {statistics_commit_count}   number of commits, eg 5678\nmerge_requests:\n    {open_merge_requests_count} number of open merge requests, eg 9\ntodos:\n    {todos_count}               number of todos, eg 4\npipelines:\n    {pipelines_status}          project status of pipelines, eg success\n</code></pre> <p>Notes:</p> <ul> <li> <p><code>sp</code> https://docs.gitlab.com/ee/api/projects.html#get-single-project</p> </li> <li> <p><code>mr</code> https://docs.gitlab.com/ee/api/merge_requests.html</p> </li> <li> <p><code>td</code> https://docs.gitlab.com/ee/api/todos.html</p> </li> <li> <p><code>pipe</code> https://docs.gitlab.com/ee/api/pipelines.html</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Examples:</p> <pre><code># follow a fictional project, add an icon\ngitlab {\n    auth_token = 'abcdefghijklmnopq-a4'\n    project = 'https://gitlab.com/ultrabug/py3status'\n\n    format = '[\\?if=name [\\?color=orangered&amp;show \uf296] {name} ]'\n    format += '[[{open_issues_count}][\\?soft /]'\n    format += '[{open_merge_requests_count}][\\?soft /]'\n    format += '[{pipelines_status}]]'\n}\n</code></pre> <p>author lasers, Cyril Levis (@cyrinux)</p>"},{"location":"user-guide/modules/#glpi","title":"glpi","text":"<p>Display number of open tickets from GLPI.</p> <p>It features thresholds to colorize the output and forces a low timeout to limit the impact of a server connectivity problem on your i3bar freshness.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 300)</p> </li> <li> <p><code>critical</code> set bad color above this threshold (default 20)</p> </li> <li> <p><code>db</code> database to use (default '')</p> </li> <li> <p><code>format</code> format of the module output (default '{tickets_open} tickets')</p> </li> <li> <p><code>host</code> database host to connect to (default '')</p> </li> <li> <p><code>password</code> login password (default '')</p> </li> <li> <p><code>timeout</code> timeout for database connection (default 5)</p> </li> <li> <p><code>user</code> login user (default '')</p> </li> <li> <p><code>warning</code> set degraded color above this threshold (default 15)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{tickets_open}</code> The number of open tickets</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Open ticket above critical threshold</p> </li> <li> <p><code>color_degraded</code> Open ticket above warning threshold</p> </li> </ul> <p>Requires:     MySQL-python: https://pypi.org/project/MySQL-python/</p> <p>author ultrabug</p>"},{"location":"user-guide/modules/#google_calendar","title":"google_calendar","text":"<p>Display upcoming Google Calendar events.</p> <p>This module will display information about upcoming Google Calendar events in one of two formats which can be toggled with a button press. The event URL may also be opened in a web browser with a button press.</p> <p>Some events details can be retreived in the Google Calendar API Documentation. https://developers.google.com/calendar/v3/reference/events</p> <p>Configuration parameters:</p> <ul> <li> <p><code>auth_token</code> The path to where the access/refresh token will be saved     after successful credential authorization.     (default '~/.config/py3status/google_calendar.auth_token')</p> </li> <li> <p><code>blacklist_events</code> Event names in this list will not be shown in the module     (case insensitive).     (default [])</p> </li> <li> <p><code>browser_invocation</code> Command to run to open browser. Curly braces stands for URL opened.     (default \"xdg-open {}\")</p> </li> <li> <p><code>button_open</code> Opens the event URL in the default web browser.     (default 3)</p> </li> <li> <p><code>button_refresh</code> Refreshes the module and updates the list of events.     (default 2)</p> </li> <li> <p><code>button_toggle</code> Toggles a boolean to hide/show the data for each event.     (default 1)</p> </li> <li> <p><code>cache_timeout</code> How often the module is refreshed in seconds     (default 60)</p> </li> <li> <p><code>calendar_id</code> The ID of the calendar to display.     (default \"primary\")</p> </li> <li> <p><code>client_secret</code> the path to your client_secret file which     contains your OAuth 2.0 credentials.     (default '~/.config/py3status/google_calendar.client_secret')</p> </li> <li> <p><code>events_within_hours</code> Select events within the next given hours.     (default 12)</p> </li> <li> <p><code>force_lowercase</code> Sets whether to force all event output to lower case.     (default False)</p> </li> <li> <p><code>format</code> The format for module output.     (default '{events}|\\?color=event \u2687')</p> </li> <li> <p><code>format_date</code> The format for date related format placeholders.     May be any Python strftime directives for dates.     (default '%a %d-%m')</p> </li> <li> <p><code>format_event</code> The format for each event. The information can be toggled     with 'button_toggle' based on the value of 'is_toggled'.     (default '[\\?color=event {summary}][\\?if=is_toggled  ({start_time}'     ' - {end_time}, {start_date})|[ ({location})][ {format_timer}]]')</p> </li> <li> <p><code>format_notification</code> The format for event warning notifications.     (default '{summary} {start_time} - {end_time}')</p> </li> <li> <p><code>format_separator</code> The string used to separate individual events.     (default ' | ')</p> </li> <li> <p><code>format_time</code> The format for time-related placeholders except <code>{format_timer}</code>.     May use any Python strftime directives for times.     (default '%I:%M %p')</p> </li> <li> <p><code>format_timer</code> The format used for the {format_timer} placeholder to display     time until an event starts or time until an event in progress is over.     (default '\\?color=time ([\\?if=days {days}d ][\\?if=hours {hours}h ]'     '[\\?if=minutes {minutes}m])[\\?if=is_current  left]')</p> </li> <li> <p><code>ignore_all_day_events</code> Sets whether to display all day events or not.     (default False)</p> </li> <li> <p><code>num_events</code> The maximum number of events to display.     (default 3)</p> </li> <li> <p><code>preferred_event_link</code> link to open in the browser.     accepted values :     hangoutLink (open the VC room associated with the event),     htmlLink (open the event's details in Google Calendar)     fallback to htmlLink if the preferred_event_link does not exist it the event.     (default \"htmlLink\")</p> </li> <li> <p><code>response</code> Only display events for which the response status is     on the list.     Available values in the Google Calendar API's documentation,     look for the attendees[].responseStatus.     (default ['accepted'])</p> </li> <li> <p><code>thresholds</code> Thresholds for events. The first entry is the color for event 1,     the second for event 2, and so on.     (default [])</p> </li> <li> <p><code>time_to_max</code> Threshold (in minutes) for when to display the <code>{format_timer}</code>     string; e.g. if time_to_max is 60, <code>{format_timer}</code> will only be     displayed for events starting in 60 minutes or less.     (default 180)</p> </li> <li> <p><code>warn_threshold</code> The number of minutes until an event starts before a     warning is displayed to notify the user; e.g. if warn_threshold is 30     and an event is starting in 30 minutes or less, a notification will be     displayed. disabled by default.     (default 0)</p> </li> <li> <p><code>warn_timeout</code> The number of seconds before a warning should be issued again.     (default 300)</p> </li> </ul> <p>Control placeholders:</p> <ul> <li><code>{is_toggled}</code> a boolean toggled by button_toggle</li> </ul> <p>Format placeholders:</p> <ul> <li><code>{events}</code> All the events to display.</li> </ul> <p>format_event and format_notification placeholders:</p> <ul> <li> <p><code>{description}</code> The description for the calendar event.</p> </li> <li> <p><code>{end_date}</code> The end date for the event.</p> </li> <li> <p><code>{end_time}</code> The end time for the event.</p> </li> <li> <p><code>{location}</code> The location for the event.</p> </li> <li> <p><code>{start_date}</code> The start date for the event.</p> </li> <li> <p><code>{start_time}</code> The start time for the event.</p> </li> <li> <p><code>{summary}</code> The summary (i.e. title) for the event.</p> </li> <li> <p><code>{format_timer}</code> The time until the event starts (or until it is over     if already in progress).</p> </li> </ul> <p>format_timer placeholders:</p> <ul> <li> <p><code>{days}</code> The number of days until the event.</p> </li> <li> <p><code>{hours}</code> The number of hours until the event.</p> </li> <li> <p><code>{minutes}</code> The number of minutes until the event.</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_event</code> Color for a single event.</p> </li> <li> <p><code>color_time</code> Color for the time associated with each event.</p> </li> </ul> <p>Requires:     1. Python library google-api-python-client.     2. Python library python-dateutil.     3. OAuth 2.0 credentials for the Google Calendar api.</p> <pre><code>Follow Step 1 of the guide here to obtain your OAuth 2.0 credentials:\nhttps://developers.google.com/google-apps/calendar/quickstart/python\n\nDownload the client_secret.json file which contains your client ID and\nclient secret. In your config file, set configuration parameter\nclient_secret to the path to your client_secret.json file.\n\nThe first time you run the module, a browser window will open asking you\nto authorize access to your calendar. After authorization is complete,\nan access/refresh token will be saved to the path configured in\nauth_token, and i3status will be restarted. This restart will\noccur only once after the first time you successfully authorize.\n</code></pre> <p>Examples:</p> <pre><code># add color gradients for events and dates/times\ngoogle_calendar {\n    thresholds = {\n        'event': [(1, '#d0e6ff'), (2, '#bbdaff'), (3, '#99c7ff'),\n            (4, '#86bcff'), (5, '#62a9ff'), (6, '#8c8cff'), (7, '#7979ff')],\n        'time': [(1, '#ffcece'), (2, '#ffbfbf'), (3, '#ff9f9f'),\n            (4, '#ff7f7f'), (5, '#ff5f5f'), (6, '#ff3f3f'), (7, '#ff1f1f')]\n    }\n}\n</code></pre> <p>author Igor Grebenkov</p> <p>license BSD</p>"},{"location":"user-guide/modules/#graphite","title":"graphite","text":"<p>Display Graphite metrics.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds.     (default 120)</p> </li> <li> <p><code>datapoint_selection</code> when multiple data points are returned,     use \"max\" or \"min\" to determine which one to display.     (default \"max\")</p> </li> <li> <p><code>format</code> you MUST use placeholders here to display data, see below.     (default '')</p> </li> <li> <p><code>graphite_url</code> URL to your graphite server. (default '')</p> </li> <li> <p><code>http_timeout</code> HTTP query timeout to graphite.     (default 10)</p> </li> <li> <p><code>proxy</code> You can configure the proxy with HTTP or HTTPS.     examples:     proxy = 'https://myproxy.example.com:1234/'     proxy = 'http://user:passwd@myproxy.example.com/'     proxy = 'socks5://user:passwd@host:port'     (proxy_socks is available after an 'pip install requests[socks]')     (default None)</p> </li> <li> <p><code>targets</code> semicolon separated list of targets to query graphite for.     (default '')</p> </li> <li> <p><code>threshold_bad</code> numerical threshold,     if set will send a notification and colorize the output.     (default None)</p> </li> <li> <p><code>threshold_degraded</code> numerical threshold,     if set will send a notification and colorize the output.     (default None)</p> </li> <li> <p><code>timespan</code> time range to query graphite for.     (default \"-2minutes\")</p> </li> <li> <p><code>value_comparator</code> choose between \"max\" and \"min\" to compare thresholds     to the data point value.     (default \"max\")</p> </li> <li> <p><code>value_format</code> pretty format long numbers with \"K\", \"M\" etc.     (default True)</p> </li> <li> <p><code>value_round</code> round values so they're not displayed as floats.     (default True)</p> </li> </ul> <p>Dynamic format placeholders:     The \"format\" parameter placeholders are dynamically based on the data     points names returned by the \"targets\" query to graphite.</p> <pre><code>For example if your target is `\"carbon.agents.localhost-a.memUsage\"`,\nyou'd get a JSON result like this:\n\n    ```\n    {\n        \"target\": \"carbon.agents.localhost-a.memUsage\",\n        \"datapoints\": [[19693568.0, 1463663040]]\n    }\n    ```\n\nSo the placeholder you could use on your \"format\" config is:\n    `format = \"{carbon.agents.localhost-a.memUsage}\"`\n\nTIP: use aliases !\n    ```\n    targets = \"alias(carbon.agents.localhost-a.memUsage, 'local_memuse')\"\n    format = \"local carbon mem usage: {local_memuse} bytes\"\n    ```\n</code></pre> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> threshold_bad has been exceeded</p> </li> <li> <p><code>color_degraded</code> threshold_degraded has been exceeded</p> </li> </ul> <p>author ultrabug</p>"},{"location":"user-guide/modules/#group","title":"group","text":"<p>Group modules and switch between them.</p> <p>Groups can be configured in your config. The active one of these groups is shown in the i3bar.  The active group can be changed by a user click.  If the click is not used by the group module then it will be passed down to the displayed module.</p> <p>Modules can be i3status core modules or py3status modules.  The active group can be cycled through automatically.</p> <p>The group can handle clicks by reacting to any that are made on it or its content or it can use a button and only respond to clicks on that. The way it does this is selected via the <code>click_mode</code> option.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>align</code> Text alignment when fixed_width is set     can be 'left', 'center' or 'right' (default 'center')</p> </li> <li> <p><code>button_next</code> Button that when clicked will switch to display next module.     Setting to <code>0</code> will disable this action. (default 5)</p> </li> <li> <p><code>button_prev</code> Button that when clicked will switch to display previous     module.  Setting to <code>0</code> will disable this action. (default 4)</p> </li> <li> <p><code>button_toggle</code> Button that when clicked toggles the group content being     displayed between open and closed.     This action is ignored if <code>{button}</code> is not in the format.     Setting to <code>0</code> will disable this action (default 1)</p> </li> <li> <p><code>click_mode</code> This defines how clicks are handled by the group.     If set to <code>all</code> then the group will respond to all click events.  This     may cause issues with contained modules that use the same clicks that     the group captures.  If set to <code>button</code> then only clicks that are     directly on the <code>{button}</code> are acted on.  The group     will need <code>{button}</code> in its format.     (default 'all')</p> </li> <li> <p><code>cycle</code> Time in seconds till changing to next module to display.     Setting to <code>0</code> will disable cycling. (default 0)</p> </li> <li> <p><code>fixed_width</code> Reduce the size changes when switching to new group     (default False)</p> </li> <li> <p><code>format</code> display format for this module, see Examples below (default None)</p> </li> <li> <p><code>format_button_closed</code> Format for the button when group open     (default  '+')</p> </li> <li> <p><code>format_button_open</code> Format for the button when group closed     (default '-')</p> </li> <li> <p><code>format_closed</code> Format for module output when closed.     (default \"{button}\")</p> </li> <li> <p><code>open</code> Is the group open and displaying its content. Has no effect if     <code>{button}</code> not in format (default True)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{button}</code> The button to open/close or change the displayed group</p> </li> <li> <p><code>{output}</code> Output of current active module</p> </li> </ul> <p>Examples:</p> <pre><code># default formats\ngroup {\n    format = '{output}'           # if click_mode is 'all'\n    format = '{output} {button}'  # if click_mode is 'button'\n}\n\n# Create a disks group that will show space on '/' and '/home'\n# Change between disk modules every 30 seconds\norder += \"group disks\"\ngroup disks {\n    cycle = 30\n    format = \"Disks: {output} {button}\"\n    click_mode = \"button\"\n\n    disk \"/\" {\n        format = \"/ %avail\"\n    }\n    disk \"/home\" {\n        format = \"/home %avail\"\n    }\n}\n</code></pre> <p>author tobes</p>"},{"location":"user-guide/modules/#hamster","title":"hamster","text":"<p>Display time tracking activities from Hamster.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 10)</p> </li> <li> <p><code>format</code> see placeholders below (default '{current}')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{current}</code> current activity</li> </ul> <p>Requires:</p> <ul> <li><code>hamster</code> time tracking application</li> </ul> <p>author Aaron Fields (spirotot [at] gmail.com)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#hddtemp","title":"hddtemp","text":"<p>Display hard drive temperatures.</p> <p>hddtemp is a small utility with daemon that gives the hard drive temperature via S.M.A.R.T. (Self-Monitoring, Analysis, and Reporting Technology). This module requires the user-defined hddtemp daemon to be running at all times.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_hdd}')</p> </li> <li> <p><code>format_hdd</code> display format for hard drives     (default '{name} [\\?color=temperature {temperature}\u00b0{unit}]')</p> </li> <li> <p><code>format_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(19, 'skyblue'), (24, 'deepskyblue'), (25, 'lime'),     (41, 'yellow'), (46, 'orange'), (51, 'red'), (56, 'tomato')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_hdd}</code> format for hard drives</li> </ul> <p>format_hdd placeholders:</p> <ul> <li> <p><code>{name}</code>        name, eg ADATA SP550</p> </li> <li> <p><code>{path}</code>        path, eg /dev/sda</p> </li> <li> <p><code>{temperature}</code> temperature, eg 32</p> </li> <li> <p><code>{unit}</code>        temperature unit, eg C</p> </li> </ul> <p>Temperatures:     Less than 25\u00b0C: Too cold     (color deepskyblue)     25\u00b0C to 40\u00b0C: Ideal          (color good)     41\u00b0C to 50\u00b0C: Acceptable     (color degraded)     46\u00b0C to 50\u00b0C: Almost too hot (color orange)     More than 50\u00b0C: Too hot      (color bad)</p> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li> <p><code>hddtemp</code> utility to monitor hard drive temperatures</p> </li> <li> <p><code>nc</code> netcat / ncat is command-line utility for reading data from hddtemp     telnet interface</p> </li> </ul> <p>Bible of HDD failures:     Hard disk temperatures higher than 45\u00b0C led to higher failure rates.     Temperatures lower than 25\u00b0C led to higher failure rates as well.     Aging hard disk drives (3 years and older) were much more prone to     failure when their average temperatures were 40\u00b0C and higher.</p> <pre><code>Hard disk manufacturers often state the operating temperatures of\ntheir hard disk drives to be between 0\u00b0C to 60\u00b0C. This can be misleading\nbecause what they mean is that your hard disk will function at these\ntemperatures, but it doesn't tell you anything about how long they are\ngoing to survive at this range.\nhttp://www.buildcomputers.net/hdd-temperature.html\n</code></pre> <p>Backblaze:     Overall, there is not a correlation between operating temperature and     failure rates The one exception is the Seagate Barracuda 1.5TB drives,     which fail slightly more when they run warmer. As long as you run drives     well within their allowed range of operating temperatures, keeping them     cooler doesn\u2019t matter.     https://www.backblaze.com/blog/hard-drive-temperature-does-it-matter/</p> <p>Examples:</p> <pre><code># compact the format\nhddtemp {\n    format = 'HDD {format_hdd}'\n    format_hdd = '\\?color=temperature {temperature}\u00b0C'\n}\n\n# show paths instead of names\nhddtemp {\n    format_hdd = '{path} [\\?color=temperature {temperature}\u00b0{unit}]'\n}\n\n# show more colors\nhddtemp {\n    gradients = True\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#hueshift","title":"hueshift","text":"<p>Shift color temperature on the screen.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_down</code> mouse button to decrease color temperature (default 5)</p> </li> <li> <p><code>button_toggle</code> mouse button to toggle color temperature (default 1)</p> </li> <li> <p><code>button_up</code> mouse button to increase color temperature (default 4)</p> </li> <li> <p><code>command</code> specify blueshift, redshift, or sct to use, otherwise auto     (default None)</p> </li> <li> <p><code>delta</code> specify interval value to change color temperature (default 100)</p> </li> <li> <p><code>format</code> display format for this module     (default '{name} [\\?if=enabled&amp;color=darkgray disabled'     '|[\\?color=color_temperature {color_temperature}K]]')</p> </li> <li> <p><code>maximum</code> specify maximum color temperature to use (default 25000)</p> </li> <li> <p><code>minimum</code> specify minimum color temperature to use (default 1000)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(6499, '#f6c'), (6500, '#ff6'), (6501, '#6cf')])</p> </li> </ul> <p>Control placeholders:</p> <ul> <li><code>{enabled}</code> a boolean based on pgrep processing data, eg False, True</li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{color_temperature}</code> color temperature, eg 6500</p> </li> <li> <p><code>{name}</code> name, eg Blueshift, Redshift, Sct</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li> <p><code>blueshift</code> an extensible and highly configurable alternative to redshift</p> </li> <li> <p><code>redshift</code> program to adjust the color temperature of your screen</p> </li> <li> <p><code>sct</code> set color temperature with about 40 lines of C or so</p> </li> </ul> <p>Suggestions:</p> <ul> <li><code>campfire</code> 4500     dust storm on mars: 2000     coffee free all nighter: 8000</li> </ul> <p>Notes:     hueshift can be disabled due to enabled running processes.     sct and blueshift shifts only on one monitor, ideal for laptops.     redshift shifts more than one, ideal for multi-monitors setups.</p> <p>Examples:</p> <pre><code># different theme\nhueshift {\n    format = '\\?color=color_temperature \u263c {color_temperature}K'\n}\n\n# for best results, add some limitations\nhueshift {\n    minimum = 3000\n    maximum = 10000\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#i3block","title":"i3block","text":"<p>Support i3blocks blocklets in py3status.</p> <p>i3blocks, https://github.com/vivien/i3blocks, is a project to allow simple scripts to provide output to the i3bar. This module allows these blocklets to run under py3status. The configuration of the blocklets is similar to how they are configured in i3blocks.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often the blocklet should be called (in seconds).     This is similar to cache_timeout used by standard modules. However it     can also take the following values; <code>once</code> the blocklet will be called     once, <code>repeat</code> the blocklet will be called constantly, or <code>persist</code>     where the command will be expected to keep providing new data. If this     is not set or is <code>None</code> then the blocklet will not be called unless     clicked on. To simplify i3block compatibility, this configuration     parameter can also be provided as <code>interval</code>.     (default None)</p> </li> <li> <p><code>command</code> Path to blocklet or command (default None)</p> </li> <li> <p><code>format</code> What to display on the bar (default '{output}')</p> </li> <li> <p><code>instance</code> Will be provided to the blocklet as $BLOCK_INSTANCE (default '')</p> </li> <li> <p><code>label</code> Will be prepended to the blocklets output (default '')</p> </li> <li> <p><code>name</code> Name of the blocklet - passed as $BLOCK_NAME (default '')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{output}</code> The output of the blocklet</li> </ul> <p>Notes:     i3blocks and i3blocklets are subject to their respective licenses.</p> <pre><code>This support is experimental and done for convenience to users so they\ncan benefit from both worlds, issues or PRs regarding i3blocks related\nblocklets should not be raised.\n\nSome blocklets may return pango markup eg `&lt;span ...` if so set\n`markup = pango` in the config for that module.\n\n`format` configuration parameter is used as is standard in py3status, not\nas in i3blocks configuration. Currently blocklets must provide responses\nin the standard i3blocks manner of one line per value (not as json).\n</code></pre> <p>Examples:</p> <pre><code># i3blocks config\n[time]\ncommand=date '+%D %T'\ninterval=5\n\n[wifi]\ninstance=wls1\nlabel='wifi:'\ncommand=~/i3blocks/wifi.sh\ninterval=5\n\n# py3status config\norder += 'i3block time'\ni3block time {\n    command = \"date '+%D %T'\"\n    interval = 5\n}\n\n# different py3status config\norder += 'i3block wifi'\ni3block wifi {\n    instance = wls1\n    label = 'wifi:'\n    command = '~/i3blocks/wifi.sh'\n    interval = 5\n}\n</code></pre> <p>author tobes</p>"},{"location":"user-guide/modules/#i3pystatus","title":"i3pystatus","text":"<p>Support i3pystatus modules in py3status.</p> <p>i3pystatus, https://github.com/enkore/i3pystatus, is an alternative to py3status and provides a variety of modules. This py3status module allows these modules to run and be display inside py3status.</p> <p>Configuration parameters:</p> <ul> <li><code>module</code> specify i3pystatus module to use (default None)</li> </ul> <p>Requires:</p> <ul> <li><code>i3pystatus</code> i3status replacement written in python</li> </ul> <p>Examples:</p> <pre><code># the modules parameters are provided as such\ni3pystatus clock {\n    module = 'clock'\n    format = [('%a %b %-d %b %X', 'America/New_York'), ('%X', 'Etc/GMT+9')]\n}\n\n# if backend(s) are provided they should be given as a dict with the key being\n# the backend name and the value being a dict of the backend settings\ni3pystatus weather {\n    module = 'weather'\n    format = '{condition} {current_temp}{temp_unit}[ {icon}]'\n    format += '[ Hi: {high_temp}][ Lo: {low_temp}][ {update_error}]'\n    backend = {\n        'weathercom.Weathercom': {\n            'location_code': '94107:4:US',\n            'units': 'imperial',\n        }\n    }\n}\n\n# backends that have no configuration should be defined as shown here\ni3pystatus updates{\n    module = 'updates'\n    backends = {'dnf.Dnf': {}}\n}\n</code></pre> <p>author tobes</p>"},{"location":"user-guide/modules/#icinga2","title":"icinga2","text":"<p>Display service status for Icinga2.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>base_url</code> the base url to the icinga-web2 services list (default '')</p> </li> <li> <p><code>ca</code> (default True)</p> </li> <li> <p><code>cache_timeout</code> how often the data should be updated (default 60)</p> </li> <li> <p><code>disable_acknowledge</code> enable or disable counting of acknowledged     service problems (default False)</p> </li> <li> <p><code>format</code> define a format string like \"CRITICAL: %d\"     (default '{status_name}: {count}')</p> </li> <li> <p><code>password</code> password to authenticate against the icinga-web2 interface     (default '')</p> </li> <li> <p><code>status</code> set the status you want to obtain     (0=OK,1=WARNING,2=CRITICAL,3=UNKNOWN)     (default 0)</p> </li> <li> <p><code>url_parameters</code> (default '?service_state={service_state}&amp;format=json')</p> </li> <li> <p><code>user</code> username to authenticate against the icinga-web2 interface     (default '')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{status_name}</code> status name, eg OK, WARNING, CRITICAL</p> </li> <li> <p><code>{count}</code> count, eg 0, 1, 2</p> </li> </ul> <p>author Ben Oswald &lt;ben.oswald@root-space.de&gt;</p> <p>license BSD License &lt;https://opensource.org/licenses/BSD-2-Clause&gt;</p> <p>source https://github.com/nazco/i3status-modules</p>"},{"location":"user-guide/modules/#imap","title":"imap","text":"<p>Display number of unread messages from IMAP account.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>allow_urgent</code> display urgency on unread messages (default False)</p> </li> <li> <p><code>auth_scope</code> scope to use with OAuth2 (default 'https://mail.google.com/')</p> </li> <li> <p><code>auth_token</code> path to where the pickled access/refresh token will be saved     after successful credential authorization.     (default '~/.config/py3status/imap_auth_token.pickle')</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 60)</p> </li> <li> <p><code>client_secret</code> the path to the client secret file with OAuth 2.0     credentials (if None then OAuth not used) (default None)</p> </li> <li> <p><code>criterion</code> status of emails to check for (default 'UNSEEN')</p> </li> <li> <p><code>debug</code> log warnings (default False)</p> </li> <li> <p><code>degraded_when_stale</code> color as degraded when updating failed (default True)</p> </li> <li> <p><code>format</code> display format for this module (default 'Mail: {unseen}')</p> </li> <li> <p><code>hide_if_zero</code> hide this module when no new mail (default False)</p> </li> <li> <p><code>mailbox</code> name of the mailbox to check (default 'INBOX')</p> </li> <li> <p><code>password</code> login password (default None)</p> </li> <li> <p><code>port</code> number to use (default '993')</p> </li> <li> <p><code>read_timeout</code> timeout for read(2) syscalls (default 5)</p> </li> <li> <p><code>security</code> login authentication method: 'ssl' or 'starttls'     (startssl needs python 3.2 or later) (default 'ssl')</p> </li> <li> <p><code>server</code> server to connect (default None)</p> </li> <li> <p><code>use_idle</code> use IMAP4 IDLE instead of polling; requires compatible     server; uses cache_timeout for IDLE's timeout; will auto detect     when set to None (default None)</p> </li> <li> <p><code>user</code> login user (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{unseen}</code> number of unread emails</li> </ul> <p>Color options:</p> <ul> <li><code>color_new_mail</code> use color when new mail arrives, default to color_good</li> </ul> <p>OAuth:     OAuth2 will be used for authentication instead of a password if the     client_secret path is set.</p> <pre><code>To create a client_secret for your Google account, visit\nhttps://console.developers.google.com/ and create an \"OAuth client ID\" from\nthe credentials tab.\n\nThis client secret enables the app (in this case, the IMAP py3status module)\nto request access to a user's email. Therefore the client secret doesn't\nhave to be for the same Google account as the email account being accessed.\n\nWhen the IMAP module first tries to access your email account a browser\nwindow will open asking for authorization to access your email.\nAfter authorization is complete, an access/refresh token will be saved to\nthe path configured in auth_token.\n\nRequires: Using OAuth requires the google-auth and google-auth-oauthlib\nlibraries to be installed.\n\nNote: the same client secret file can be used as with the py3status Google\nCalendar module.\n</code></pre> <p>author obb, girst</p>"},{"location":"user-guide/modules/#insync","title":"insync","text":"<p>Display Insync status.</p> <p>Thanks to Iain Tatch &lt;iain.tatch@gmail.com&gt; for the script that this is based on.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{status} {queued}')</p> </li> <li> <p><code>status_offline</code> show when Insync is offline (default 'OFFLINE')</p> </li> <li> <p><code>status_paused</code> show when Insync is paused (default 'PAUSED')</p> </li> <li> <p><code>status_share</code> show when Insync is sharing (default 'SHARE')</p> </li> <li> <p><code>status_synced</code> show when Insync has finished syncing (default 'SYNCED')</p> </li> <li> <p><code>status_syncing</code> show when Insync is syncing (default 'SYNCING')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{status}</code> Insync status</p> </li> <li> <p><code>{queued}</code> Number of files queued</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Offline</p> </li> <li> <p><code>color_degraded</code> Default (e.g. Paused/Syncing)</p> </li> <li> <p><code>color_good</code> Synced</p> </li> </ul> <p>Requires:</p> <ul> <li><code>insync</code> an unofficial Google Drive client with support for various desktops</li> </ul> <p>author Joshua Pratt &lt;jp10010101010000@gmail.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#kdeconnector","title":"kdeconnector","text":"<p>Display information about your smartphone with KDEConnector.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 30)</p> </li> <li> <p><code>device</code> the device name, you need this if you have more than one device     connected to your PC (default None)</p> </li> <li> <p><code>device_id</code> alternatively to the device name you can set your device id here     (default None)</p> </li> <li> <p><code>format</code> see placeholders below     (default '{name}{notif_status} {bat_status} {charge}%')</p> </li> <li> <p><code>format_disconnected</code> text if device is disconnected     (default 'device disconnected')</p> </li> <li> <p><code>low_threshold</code> percentage value when text is twitch to color_bad     (default 20)</p> </li> <li> <p><code>status_bat</code> text when battery is discharged (default '\u2b07')</p> </li> <li> <p><code>status_chr</code> text when device is charged (default '\u2b06')</p> </li> <li> <p><code>status_full</code> text when battery is full (default '\u263b')</p> </li> <li> <p><code>status_no_notif</code> text when you have no notifications (default '')</p> </li> <li> <p><code>status_notif</code> text when notifications are available (default ' \u2709')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{bat_status}</code> battery state</p> </li> <li> <p><code>{charge}</code> the battery charge</p> </li> <li> <p><code>{name}</code> name of the device</p> </li> <li> <p><code>{notif_size}</code> number of notifications</p> </li> <li> <p><code>{notif_status}</code> shows if a notification is available or not</p> </li> <li> <p><code>{net_type}</code> shows cell network type</p> </li> <li> <p><code>{net_strength}</code> shows cell network strength</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Device unknown, unavailable     or battery below low_threshold and not charging</p> </li> <li> <p><code>color_degraded</code> Connected and battery not charging</p> </li> <li> <p><code>color_good</code> Connected and battery charging</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>kdeconnect</code> adds communication between kde and your smartphone</p> </li> <li> <p><code>dbus-python</code> Python bindings for dbus     PyGObject: Python bindings for GObject Introspectiom</p> </li> </ul> <p>Examples:</p> <pre><code>kdeconnector {\n    device_id = \"aa0844d33ac6ca03\"\n    format = \"{name} {charge} {bat_status}\"\n    low_battery = \"10\"\n}\n</code></pre> <p>author Moritz L\u00fcdecke, valdur55</p>"},{"location":"user-guide/modules/#keyboard_layout","title":"keyboard_layout","text":"<p>Display keyboard layout.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_next</code> mouse button to cycle next layout (default 4)</p> </li> <li> <p><code>button_prev</code> mouse button to cycle previous layout (default 5)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{layout}')</p> </li> <li> <p><code>layouts</code> specify a list of layouts to use (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{layout}</code> keyboard layout</li> </ul> <p>Color options:</p> <ul> <li><code>color_&lt;layout&gt;</code> colorize the layout. eg color_fr = '#729FCF'</li> </ul> <p>Requires:</p> <ul> <li> <p><code>xkblayout-state</code>     or</p> </li> <li> <p><code>setxkbmap</code> and <code>xset</code> (works for the first two predefined layouts. overrides <code>XkbLayout</code> when switching layout.)</p> </li> </ul> <p>Examples:</p> <pre><code># define keyboard layouts that can be switched between\nkeyboard_layout {\n    layouts = ['gb', 'fr', 'dvorak']\n}\n</code></pre> <p>author shadowprince, tuxitop</p> <p>license Eclipse Public License</p>"},{"location":"user-guide/modules/#keyboard_locks","title":"keyboard_locks","text":"<p>Display NumLock, CapsLock, and ScrLock keys.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 1)</p> </li> <li> <p><code>format</code> display format for this module     (default '[\\?if=num_lock&amp;color=good NUM|\\?color=bad NUM] '     '[\\?if=caps_lock&amp;color=good CAPS|\\?color=bad CAPS] '     '[\\?if=scroll_lock&amp;color=good SCR|\\?color=bad SCR]')</p> </li> </ul> <p>Control placeholders:</p> <ul> <li> <p><code>{num_lock}</code> a boolean based on xset data</p> </li> <li> <p><code>{caps_lock}</code> a boolean based on xset data</p> </li> <li> <p><code>{scroll_lock}</code> a boolean based on xset data</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_good</code> Lock on</p> </li> <li> <p><code>color_bad</code> Lock off</p> </li> </ul> <p>Examples:</p> <pre><code># hide NUM, CAPS, SCR\nkeyboard_locks {\n    format = '\\?color=good [\\?if=num_lock NUM][\\?soft  ]'\n    format += '[\\?if=caps_lock CAPS][\\?soft  ][\\?if=scroll_lock SCR]'\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#khal_calendar","title":"khal_calendar","text":"<p>Displays upcoming khal events.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 60)</p> </li> <li> <p><code>config_path</code> Path to khal configuration file. The default None resolves to /home/$USER/.config/khal/config (default None)</p> </li> <li> <p><code>date_end</code> Until which datetime the module searches for events (default 'eod')</p> </li> <li> <p><code>format</code> display format for this module (default '{appointments}')</p> </li> <li> <p><code>max_results</code> an upper bound for the number of returned calendar entries (default None)</p> </li> <li> <p><code>output_format</code> khal conform format for displaying event output (default '{start-time} {title}')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{appointments}</code> list of events in time range</li> </ul> <p>Requires:</p> <ul> <li><code>khal</code> https://github.com/pimutils/khal</li> </ul> <p>author @xenrox</p> <p>license BSD</p>"},{"location":"user-guide/modules/#lm_sensors","title":"lm_sensors","text":"<p>Display temperatures, voltages, fans, and more from hardware sensors.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>chips</code> specify a list of chips to use (default [])</p> </li> <li> <p><code>format</code> display format for this module (default '{format_chip}')</p> </li> <li> <p><code>format_chip</code> display format for chips (default '{name} {format_sensor}')</p> </li> <li> <p><code>format_chip_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>format_sensor</code> display format for sensors     (default '[\\?color=darkgray {name}] [\\?color=auto.input&amp;show {input}]')</p> </li> <li> <p><code>format_sensor_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>sensors</code> specify a list of sensors to use (default [])</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default {'auto.input': True})</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_chip}</code>   format for chips</li> </ul> <p>Format_chip placeholders:</p> <ul> <li> <p><code>{name}</code>          chip name, eg coretemp-isa-0000, nouveau-pci-0500</p> </li> <li> <p><code>{adapter}</code>       adapter type, eg ISA adapter, PCI adapter</p> </li> <li> <p><code>{format_sensor}</code> format for sensors</p> </li> </ul> <p>Format_sensor placeholders:</p> <ul> <li> <p><code>{name}</code>          sensor name, eg core_0, gpu_core, temp1, fan1</p> <p>See <code>sensors -u</code> for a full list of placeholders for <code>format_chip</code>, <code>format_sensors</code> without the prefixes, <code>chips</code> and <code>sensors</code> options.</p> <p>See https://www.kernel.org/doc/Documentation/hwmon/sysfs-interface for more information on the sensor placeholders.</p> </li> </ul> <p>Color options for <code>auto.input</code> threshold:</p> <ul> <li> <p><code>color_zero</code> zero value or less (color red)</p> </li> <li> <p><code>color_min</code> minimum value (color lightgreen)</p> </li> <li> <p><code>color_excl_input</code> input value excluded from threshold (color None)</p> </li> <li> <p><code>color_input</code> input value (color lime)</p> </li> <li> <p><code>color_near_max</code> input value near maximum value (color yellow)</p> </li> <li> <p><code>color_max</code> maximum value (color orange)</p> </li> <li> <p><code>color_near_crit</code> input value near critical value (color lightcoral)</p> </li> <li> <p><code>color_crit</code> critical value (color red)</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>format_sensor</code>     xxx: print a color based on the value of <code>xxx</code> placeholder     auto.input: print a color based on the value of <code>input</code> placeholder     against a customized threshold</li> </ul> <p>Requires:</p> <ul> <li> <p><code>lm_sensors</code> a tool to read temperature/voltage/fan sensors</p> </li> <li> <p><code>sensors-detect</code> see <code>man sensors-detect # --auto</code> to read about     using defaults or to compile a list of kernel modules</p> </li> </ul> <p>Examples:</p> <pre><code># identify possible chips, sensors, placeholders, etc\n    [user@py3status ~] $ sensors -u\n    ----------------------------- # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    coretemp-isa-0000             # chip {name}         # chip: coretemp*\n    Adapter: ISA adapter          #  \u251c\u2500\u2500 {adapter} type\n    ----                          #  \u2502------------------------------------\n    Core 0:                       #  \u251c\u2500\u2500 sensor {name}  # sensor: core_0\n      temp2_input: 48.000         #  \u2502    \u251c\u2500\u2500 {input}\n      temp2_max: 81.000           #  \u2502    \u251c\u2500\u2500 {max}\n      temp2_crit: 91.000          #  \u2502    \u251c\u2500\u2500 {crit}\n      temp2_crit_alarm: 0.000     #  \u2502    \u2514\u2500\u2500 {crit_alarm}\n    Core 1:                       #  \u2514\u2500\u2500 sensor {name}  # sensor: core_1\n      temp3_input: 48.000         #       \u251c\u2500\u2500 {input}\n      temp3_max: 81.000           #       \u251c\u2500\u2500 {max}\n      temp3_crit: 91.000          #       \u251c\u2500\u2500 {crit}\n      temp3_crit_alarm: 0.000     #       \u2514\u2500\u2500 {crit_alarm}\n                                  # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    k10temp-pci-00c3              # chip {name}         # chip: k10temp*\n    Adapter: PCI adapter          #  \u251c\u2500\u2500 {adapter} type\n    ----                          #  \u2502------------------------------------\n    temp1:                        #  \u251c\u2500\u2500 sensor {name}  # sensor: temp1\n      temp1_input: 30.000         #  \u2502    \u251c\u2500\u2500 {input}\n      temp1_max: -71.000          #  \u2502    \u251c\u2500\u2500 {max}\n      temp1_min: -15.000          #  \u2502    \u251c\u2500\u2500 {min}\n      temp1_alarm: 1.000          #  \u2502    \u251c\u2500\u2500 {alarm}\n      temp1_offset: 0.000         #  \u2502    \u251c\u2500\u2500 {offset}\n      temp1_beep: 0.000           #  \u2502    \u2514\u2500\u2500 {beep}\n    intrusion0:                   #  \u2514\u2500\u2500 sensor {name}  # sensor: intrusion0\n      intrusion0_alarm: 0.000     #       \u2514\u2500\u2500 {alarm}\n\n    Solid lines denotes chips. Dashed lines denotes sensors.\n    Sensor names are lowercased and its spaces replaced with underscores.\n    The numbered prefixes, eg `temp1_*` are removed to keep names clean.\n\n# specify chips to use\nlm_sensors {\n    chips = ['coretemp-isa-0000']  # full\n        OR\n    chips = ['coretemp-*']  # lm_sensors-compatible wildcard\n}\n\n# specify sensors to use\nlm_sensors {\n    sensors = ['core_0', 'core_1', 'core_2', 'core_3']  # full\n        OR\n    sensors = ['core_*']  # fnmatch\n}\n\n# show name per chip, eg CPU 35\u00b0C 36\u00b0C 37\u00b0C 39\u00b0C GPU 52\u00b0C\nlm_sensors {\n    format_chip = '[\\?if=name=coretemp-isa-0000 CPU ]'\n    format_chip += '[\\?if=name=nouveau-pci-0500 GPU ]'\n    format_chip += '{format_sensor}'\n    format_sensor = '\\?color=auto.input {input}\u00b0C'\n    sensors = ['core*', 'temp*']\n}\n\n# show name per sensor, eg CPU1 35\u00b0C CPU2 36\u00b0C CPU3 37\u00b0C CPU4 39\u00b0C GPU 52\u00b0C\nlm_sensors {\n    format_chip = '{format_sensor}'\n    format_sensor = '[\\?if=name=core_0 CPU1 ]'\n    format_sensor += '[\\?if=name=core_1 CPU2 ]'\n    format_sensor += '[\\?if=name=core_2 CPU3 ]'\n    format_sensor += '[\\?if=name=core_3 CPU4 ]'\n    format_sensor += '[\\?if=name=gpu_core GPU ]'\n    format_sensor += '[\\?color=auto.input {input}\u00b0C]'\n    sensors = ['core*', 'temp*']\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#loadavg","title":"loadavg","text":"<p>Display average system load over a period of time.</p> <p>In UNIX computing, the system load is a measure of the amount of computational work that a computer system performs. The load average represents the average system load over a period of time. It conventionally appears in the form of three numbers which represent the system load during the last one-, five-, and fifteen-minute periods.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>format</code> display format for this module     (default 'Loadavg [\\?color=1avg {1min}] '     '[\\?color=5avg {5min}] [\\?color=15avg {15min}]')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, '#9dd7fb'), (20, 'good'),     (40, 'degraded'), (60, '#ffa500'), (80, 'bad')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{1min}</code> load average during the last 1-minute, eg 1.44</p> </li> <li> <p><code>{5min}</code> load average during the last 5-minutes, eg 1.66</p> </li> <li> <p><code>{15min}</code> load average during the last 15-minutes, eg 1.52</p> </li> <li> <p><code>{1avg}</code> load average percentage during the last 1-minute, eg 12.00</p> </li> <li> <p><code>{5avg}</code> load average percentage during the last 5-minutes, eg 13.83</p> </li> <li> <p><code>{15avg}</code> load average percentage during the last 15-minutes, eg 12.67</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Notes:     http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages     http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html</p> <p>Examples:</p> <pre><code># show load averages with static colors\nloadavg {\n    format = 'Loadavg [\\?color=orange {1min} ][\\?color=gold {5min} {15min}]'\n}\n\n# remove prefix - easy copy and paste\nloadavg {\n    format = '[\\?color=1avg {1min}] '\n    format += '[\\?color=5avg {5min}] '\n    format += '[\\?color=15avg {15min}]'\n}\n\n# show detailed load averages + percentages\nloadavg {\n    format = 'Loadavg [\\?color=darkgray '\n    format += '1min [\\?color=1avg {1min}]\\|[\\?color=1avg {1avg}%] '\n    format += '5min [\\?color=5avg {5min}]\\|[\\?color=5avg {5avg}%] '\n    format += '15min [\\?color=15avg {15min}]\\|[\\?color=15avg {15avg}%]]'\n}\n\n# show load averages with different colors + thresholds\nloadavg {\n    # htop - default\n        (0, '#9dd7fb'),     # 1avg\n        (0, 'cyan'),        # 5avg\n        (0, 'darkcyan'),    $ 15avg\n\n    # htop - monochrome\n        (0, '#9dd7fb'),     # 1avg\n        (0, None),          # 5avg\n        (0, None),          # 15avg\n\n    # htop - black night\n        (0, 'greenyellow'), # 1avg\n        (0, 'limegreen'),   # 5avg\n        (0, 'limegreen'),   # 15avg\n\n    # htop - mc\n        (0, '#ffffff'),     # 1avg\n        (0, '#aaaaaa'),     # 5avg\n        (0, '#555555'),     # 15avg\n\n    # three shades of blue\n        (0, '#87cefa'),     # 1avg\n        (0, '#4bb6f8'),     # 5avg\n        (0, '#0991e5'),     # 15avg\n\n    # three shades of gray\n        (0, '#dddddd'),     # 1avg\n        (0, '#bbbbbb'),     # 5avg\n        (0, '#999999'),     # 15avg\n\n    # htop - mc and three shades of gray is similar. htop - mc\n    # have higher contrast between time periods over three shades\n    # of gray for better readability. your mileage may vary.\n\n    thresholds = {\n        '1avg': [\n            (0, 'REPLACE_ME'),\n            (20, 'good'), (40, 'degraded'),\n            (60, '#ffa500'), (80, 'bad')\n        ],\n        '5avg': [\n            (0, 'REPLACE_ME'),\n            (20, 'good'), (40, 'degraded'),\n            (60, '#ffa500'), (80, 'bad')\n        ],\n        '15avg': [\n            (0, 'REPLACE_ME'),\n            (20, 'good'), (40, 'degraded'),\n            (60, '#ffa500'), (80, 'bad')\n        ],\n    }\n}\n\n# don't show load averages if 1avg is under 60%\nloadavg {\n    format = '[\\?if=1avg&gt;59 Loadavg [\\?color=1avg {1min}] '\n    format += '[\\?color=5avg {5min}] [\\?color=15avg {15min}]]'\n}\n\n# add your snippets here\nloadavg {\n    format = \"...\"\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#mail","title":"mail","text":"<p>Display number of messages in various mailbox formats. This module supports Maildir, mbox, MH, Babyl, MMDF, and IMAP.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>accounts</code> specify a dict consisting of mailbox types and a list of dicts     consisting of mailbox settings and/or paths to use (default {})</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 60)</p> </li> <li> <p><code>format</code> display format for this module     (default '\\?not_zero Mail {mail}|No Mail')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{mail}</code>    number of messages</p> </li> <li> <p><code>{maildir}</code> number of Maildir messages</p> </li> <li> <p><code>{mbox}</code>    number of mbox messages</p> </li> <li> <p><code>{mh}</code>      number of MH messages</p> </li> <li> <p><code>{babyl}</code>   number of Babyl messages</p> </li> <li> <p><code>{mmdf}</code>    number of MMDF messages</p> </li> <li> <p><code>{imap}</code>    number of IMAP messages</p> <p>We can divide mailbox, eg <code>{maildir}</code>, into numbered placeholders based on number of mailbox accounts, eg <code>{maildir_1}</code>, and if we add <code>name</code> to a mailbox account, we can use <code>{name}</code> placeholder instead, eg <code>{home}</code>.</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>IMAP Subscriptions:     You can specify a list of filters to decide which folders to search.     By default, we search only the INBOX folder (ie: <code>['^INBOX$']</code>). We     can use regular expressions, so if you use more than one, it would     be joined by a logical operator <code>or</code>.</p> <pre><code>`'.*'` will match all folders.\n`'pattern'` will match folders containing `pattern`.\n`'^pattern'` will match folders beginning with `pattern`.\n`'pattern$'` will match folders ending with `pattern`.\n`'^((?![Ss][Pp][Aa][Mm]).)*$'` will match all folders\nexcept for every possible case of `spam` folders.\n\nFor more documentation, see https://docs.python.org/3/library/re.html\nand/or any regex builder on the web. Don't forget to escape characters.\n</code></pre> <p>Examples:</p> <pre><code># add multiple accounts\nmail {                                       #\n    accounts = {                             #     {mail}\n        'maildir': [                         #      \u251c\u2500\u2500 {maildir}\n            {'path': '~/.mutt'},             #      \u2502    \u251c\u2500\u2500 {maildir_1}\n            {'path': '~/Mail'},              #      \u2502    \u2514\u2500\u2500 {maildir_2}\n        ],                                   #      \u2502\n        'mbox': [                            #      \u251c\u2500\u2500 {mbox}\n            {'path': '~/home.mbox'},         #      \u2502    \u251c\u2500\u2500 {mbox_1}\n            {                                #      \u2502    \u251c\u2500\u2500 {mbox_2}\n                'name': 'local',             # &lt;----\u2502----\u2502----\u2514\u2500\u2500 {local}\n                'path': '~/mbox'             #      \u2502    \u2502\n            },                               #      \u2502    \u2502\n            {                                #      \u2502    \u2514\u2500\u2500 {mbox_3}\n                'name': 'debian',            # &lt;----\u2502---------\u2514\u2500\u2500 {debian}\n                'path': '/var/mail/$USER'    #      \u2502\n                'urgent': False,             # &lt;----\u2502---- disable urgent\n            },                               #      \u2502\n        ],                                   #      \u2502\n        'mh': [                              #      \u251c\u2500\u2500 {mh}\n            {'path': '~/mh_mail'},           #      \u2502    \u2514\u2500\u2500 {mh_1}\n        ],                                   #      \u2502\n        'babyl': [                           #      \u251c\u2500\u2500 {babyl}\n            {'path': '~/babyl_mail'},        #      \u2502    \u2514\u2500\u2500 {babyl_1}\n        ],                                   #      \u2502\n        'mmdf': [                            #      \u251c\u2500\u2500 {mmdf}\n            {'path': '~/mmdf_mail'},         #      \u2502    \u2514\u2500\u2500 {mmdf_1}\n        ]                                    #      \u2502\n        'imap': [                            #      \u251c\u2500\u2500 {imap}\n            {                                #      \u2502    \u251c\u2500\u2500 {imap_1}\n                'name': 'home',              # &lt;----\u2502----\u2502----\u2514\u2500\u2500 {home}\n                'user': 'lasers',            #      \u2502    \u2502\n                'password': 'kiss_my_butt!', #      \u2502    \u2502\n                'server': 'imap.gmail.com',  #      \u2502    \u2502\n                                             #  &lt;---\u2502----\u2502 no filters to\n                'port': 993,                 #      \u2502    \u2502 search folders, use\n                                             #      \u2502    \u2502 filters ['^INBOX$']\n            },                               #      \u2502    \u2502\n            {                                #      \u2502    \u2514\u2500\u2500 {imap_2}\n                'name': 'work',              # &lt;----\u2502---------\u2514\u2500\u2500 {work}\n                'user': 'tobes',             #      \u2502\n                'password': 'i_love_python', #\n                'server': 'imap.yahoo.com',  #\n                                             # &lt;---- no port, use port 993\n                'urgent': False,             # &lt;---- disable urgent\n                                             #       for this account\n                'filters': ['^INBOX$']       # &lt;---- specify a list of filters\n                                             #       to search folders\n                'log': True,                 # &lt;---- print a list of folders\n            }                                #       to filter in the log\n        ]\n    }\n    allow_urgent = False             &lt;---- disable urgent for all accounts\n}\n\n# add colors, disable urgent\nmail {\n    format = '[\\?color=mail&amp;show Mail] {mail}'\n    thresholds = [(1, 'good'), (5, 'degraded'), (15, 'bad')]\n    allow_urgent = False\n}\n\n# identify the mailboxes, remove what you don't need\nmail {\n    format = '[\\?color=mail '\n    format += '[\\?if=imap&amp;color=#00ff00 IMAP ]'\n    format += '[\\?if=maildir&amp;color=#ffff00 MAILDIR ]'\n    format += '[\\?if=mbox&amp;color=#ff0000 MBOX ]'\n    format += '[\\?if=babyl&amp;color=#ffa500 BABYL ]'\n    format += '[\\?if=mmdf&amp;color=#00bfff MMDF ]'\n    format += '[\\?if=mh&amp;color=#ee82ee MH ]'\n    format += ']'\n    format += '[\\?not_zero&amp;color Mail {mail}|No Mail]'\n}\n\n# individual colorized mailboxes, remove what you don't need\nmail {\n    format = '[\\?if=imap&amp;color=#00ff00 IMAP] {imap} '\n    format += '[\\?if=maildir&amp;color=#ffff00 MAILDIR] {maildir} '\n    format += '[\\?if=mbox&amp;color=#ff0000 MBOX] {mbox} '\n    format += '[\\?if=babyl&amp;color=#ffa500 BABYL] {babyl} '\n    format += '[\\?if=mmdf&amp;color=#00bfff MMDF] {mmdf} '\n    format += '[\\?if=mh&amp;color=#ee82ee MH] {mh}'\n    allow_urgent = False\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#mega_sync","title":"mega_sync","text":"<p>Display status of MEGAcmd.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for the module (default \"MEGA {format_sync}|No MEGA\")</p> </li> <li> <p><code>format_sync</code> display format for every sync (default \"{syncstate}\")</p> </li> <li> <p><code>format_sync_separator</code> show separator if more than one sync (default \" \")</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_sync}</code> Format for every sync returned by 'mega-sync' command.</li> </ul> <p>format_sync placeholders:     Any column returned by 'mega-sync' command - in lower case!     For example: id, syncstate, localpath</p> <p>Requires:     MEGAcmd: command-line interface for MEGA</p> <p>author Maxim Baz (https://github.com/maximbaz)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#moc","title":"moc","text":"<p>Display song currently playing in moc.</p> <p>MOC (music on console) is a console audio player for Linux/Unix designed to be powerful and easy to use. It consists of two parts, a server (moc) and a player/interface (mocp). It supports OGG, WAV, MP3 and other formats.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_next</code> mouse button to skip next track (default None)</p> </li> <li> <p><code>button_pause</code> mouse button to pause/play the playback (default 1)</p> </li> <li> <p><code>button_previous</code> mouse button to skip previous track (default None)</p> </li> <li> <p><code>button_stop</code> mouse button to stop the playback (default 3)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>format</code> display format for this module     (default '\\?if=is_started [\\?if=is_stopped [] moc|'     '[\\?if=is_paused ||][\\?if=is_playing &gt;] {title}]')</p> </li> <li> <p><code>replacements</code> specify a list/dict of string placeholders to modify (default None)</p> </li> <li> <p><code>sleep_timeout</code> when moc is not running, this interval will be used to     allow one to refresh constantly with time placeholders and/or     to refresh once every minute rather than every few seconds     (default 20)</p> </li> </ul> <p>Control placeholders:</p> <ul> <li> <p><code>{is_paused}</code> a boolean based on moc status</p> </li> <li> <p><code>{is_playing}</code> a boolean based on moc status</p> </li> <li> <p><code>{is_started}</code> a boolean based on moc status</p> </li> <li> <p><code>{is_stopped}</code> a boolean based on moc status</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{album}</code> album name, eg (new output here)</p> </li> <li> <p><code>{artist}</code> artist name, eg (new output here)</p> </li> <li> <p><code>{avgbitrate}</code> audio average bitrate, eg 230kbps</p> </li> <li> <p><code>{bitrate}</code> audio bitrate, eg 230kbps</p> </li> <li> <p><code>{currentsec}</code> elapsed time in seconds, eg 32</p> </li> <li> <p><code>{currenttime}</code> elapsed time in [HH:]MM:SS, eg 00:32</p> </li> <li> <p><code>{file}</code> file location, eg /home/user/Music...</p> </li> <li> <p><code>{rate}</code> audio rate, eg 44kHz</p> </li> <li> <p><code>{songtitle}</code> song title, eg (new output here)</p> </li> <li> <p><code>{state}</code> playback state, eg PLAY, PAUSE, STOP</p> </li> <li> <p><code>{timeleft}</code> time left in [HH:]MM:SS, eg 71:30</p> </li> <li> <p><code>{title}</code> track title, eg (new output here)</p> </li> <li> <p><code>{totalsec}</code> total time in seconds, eg 4322</p> </li> <li> <p><code>{totaltime}</code> total time in seconds, eg 72:02</p> <p>Placeholders are retrieved directly from <code>mocp --info</code> command. The list was harvested once and should not represent a full list.</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_paused</code> Paused, defaults to color_degraded</p> </li> <li> <p><code>color_playing</code> Playing, defaults to color_good</p> </li> <li> <p><code>color_stopped</code> Stopped, defaults to color_bad</p> </li> </ul> <p>Requires:</p> <ul> <li><code>moc</code> a console audio player with simple ncurses interface</li> </ul> <p>Examples:</p> <pre><code># see 'man mocp' for more buttons\nmoc {\n    on_click 9 = 'exec mocp --example'\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#mpd_status","title":"mpd_status","text":"<p>Display song currently playing in mpd.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 2)</p> </li> <li> <p><code>format</code> template string (see below)     (default '{state} [[[{artist} ]- {title}]|[{file}]]')</p> </li> <li> <p><code>hide_on_error</code> hide the status if an error has occurred (default False)</p> </li> <li> <p><code>hide_when_paused</code> hide the status if state is paused (default False)</p> </li> <li> <p><code>hide_when_stopped</code> hide the status if state is stopped (default True)</p> </li> <li> <p><code>host</code> mpd host (default 'localhost')</p> </li> <li> <p><code>idle_subsystems</code> a list of subsystems to idle on.     player: changes in song information, play state     mixer: changes in volume     options: e.g. repeat mode     See the MPD protocol documentation for additional events.     (default ['player', 'playlist', 'mixer', 'options'])</p> </li> <li> <p><code>idle_timeout</code> force idle to reset every n seconds (default 3600)</p> </li> <li> <p><code>max_width</code> maximum status length (default 120)</p> </li> <li> <p><code>password</code> mpd password (default None)</p> </li> <li> <p><code>port</code> mpd port (default '6600')</p> </li> <li> <p><code>state_pause</code> label to display for \"paused\" state (default '[pause]')</p> </li> <li> <p><code>state_play</code> label to display for \"playing\" state (default '[play]')</p> </li> <li> <p><code>state_stop</code> label to display for \"stopped\" state (default '[stop]')</p> </li> <li> <p><code>use_idle</code> whether to use idling instead of polling. None to autodetect     (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{state}</code> state (paused, playing. stopped) can be defined via <code>state_..</code>     configuration parameters     Refer to the mpc(1) manual page for the list of available placeholders to     be used in the format.  Placeholders should use braces <code>{}</code> rather than     percent <code>%%</code> eg <code>{artist}</code>.     Every placeholder can also be prefixed with     <code>next_</code> to retrieve the data for the song following the one currently     playing.</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_pause</code> Paused, default color_degraded</p> </li> <li> <p><code>color_play</code> Playing, default color_good</p> </li> <li> <p><code>color_stop</code> Stopped, default color_bad</p> </li> </ul> <p>Requires:</p> <ul> <li><code>python-mpd2</code> (NOT python2-mpd2)</li> </ul> <p>Examples:</p> <pre><code># Show state and (artist -) title, if no title fallback to file:\n{state} [[[{artist} - ]{title}]|[{file}]]\n\n# Show state, [duration], title (or file) and next song title (or file):\n{state} \\[{time}\\] [{title}|{file}] \u2192 [{next_title}|{next_file}]\n</code></pre> <p>author shadowprince, zopieux</p> <p>license Eclipse Public License</p>"},{"location":"user-guide/modules/#mpris","title":"mpris","text":"<p>Display song/video and control MPRIS compatible players.</p> <p>There are two ways to control the media player. Either by clicking with a mouse button in the text information or by using buttons. For former you have to define the button parameters in your config.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_next</code> mouse button to play the next entry (default None)</p> </li> <li> <p><code>button_next_player</code> mouse button to switch next player in list (Same status as top player) (default None)</p> </li> <li> <p><code>button_prev_player</code> mouse button to switch previous player in list (Same status as top player) (default None)</p> </li> <li> <p><code>button_previous</code> mouse button to play the previous entry (default None)</p> </li> <li> <p><code>button_stop</code> mouse button to stop the player (default None)</p> </li> <li> <p><code>button_switch_to_top_player</code> mouse button to switch to top player (default None)</p> </li> <li> <p><code>button_toggle</code> mouse button to toggle between play and pause mode (default 1)</p> </li> <li> <p><code>cache_timeout</code> time (s) between Position update (default 0.5)</p> </li> <li> <p><code>format</code> display format for this module     (default '[{artist} - ][{title}] {previous} {toggle} {next}')</p> </li> <li> <p><code>format_none</code> define output if no player is running (default 'no player running')</p> </li> <li> <p><code>icon_next</code> specify icon for next button (default u'\u25b9')</p> </li> <li> <p><code>icon_pause</code> specify icon for pause button (default u'\u25eb')</p> </li> <li> <p><code>icon_play</code> specify icon for play button (default u'\u25b7')</p> </li> <li> <p><code>icon_previous</code> specify icon for previous button (default u'\u25c3')</p> </li> <li> <p><code>icon_stop</code> specify icon for stop button (default u'\u25a1')</p> </li> <li> <p><code>max_width</code> maximum status length (default None)</p> </li> <li> <p><code>player_priority</code> priority of the players.     Keep in mind that the state has a higher priority than     player_priority. So when player_priority is \"[mpd, bomi]\" and mpd is     paused and bomi is playing than bomi wins. (default [])</p> </li> <li> <p><code>state_pause</code> specify icon for pause state (default u'\u25eb')</p> </li> <li> <p><code>state_play</code> specify icon for play state (default u'\u25b7')</p> </li> <li> <p><code>state_stop</code> specify icon for stop state (default u'\u25a1')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{album}</code> album name</p> </li> <li> <p><code>{artist}</code> artiste name (first one)</p> </li> <li> <p><code>{length}</code> time duration of the song</p> </li> <li> <p><code>{player}</code> show name of the player</p> </li> <li> <p><code>{player_shortname}</code> show name of the player from busname (usually command line name)</p> </li> <li> <p><code>{state}</code> playback status of the player</p> </li> <li> <p><code>{time}</code> played time of the song</p> </li> <li> <p><code>{title}</code> name of the song</p> </li> <li> <p><code>{nowplaying}</code> now playing field provided by VLC for stream info</p> </li> </ul> <p>Button placeholders:</p> <ul> <li> <p><code>{next}</code> play the next title</p> </li> <li> <p><code>{pause}</code> pause the player</p> </li> <li> <p><code>{play}</code> play the player</p> </li> <li> <p><code>{previous}</code> play the previous title</p> </li> <li> <p><code>{stop}</code> stop the player</p> </li> <li> <p><code>{toggle}</code> toggle between play and pause</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_control_inactive</code> button is not clickable</p> </li> <li> <p><code>color_control_active</code> button is clickable</p> </li> <li> <p><code>color_paused</code> song is paused, defaults to color_degraded</p> </li> <li> <p><code>color_playing</code> song is playing, defaults to color_good</p> </li> <li> <p><code>color_stopped</code> song is stopped, defaults to color_bad</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>mpris2</code> Python usable definiton of MPRIS2</p> </li> <li> <p><code>dbus-python</code> Python bindings for dbus     PyGObject: Python bindings for GObject Introspection</p> </li> </ul> <p>Tested players:</p> <ul> <li> <p><code>bomi</code> powerful and easy-to-use gui multimedia player based on mpv</p> </li> <li> <p><code>cantata</code> qt5 client for the music player daemon (mpd)</p> </li> <li> <p><code>mpdris2</code> mpris2 support for mpd</p> </li> <li> <p><code>vlc</code> multi-platform mpeg, vcd/dvd, and divx player</p> </li> </ul> <p>Examples:</p> <pre><code>mpris {\n    format = \"{previous}{play}{next} {player}: {state} [[{artist} - {title}]|[{title}]]\"\n    format_none = \"no player\"\n    player_priority = \"[mpd, cantata, vlc, bomi, *]\"\n}\n\nonly show information from mpd and vlc, but mpd has a higher priority:\nmpris {\n    player_priority = \"[mpd, vlc]\"\n}\n\nshow information of all players, but mpd and vlc have the highest priority:\nmpris {\n    player_priority = \"[mpd, vlc, *]\"\n}\n\nvlc has the lowest priority:\nmpris {\n    player_priority = \"[*, vlc]\"\n}\n</code></pre> <p>author Moritz L\u00fcdecke, tobes, valdur55</p>"},{"location":"user-guide/modules/#net_iplist","title":"net_iplist","text":"<p>Display list of network interfaces and IP addresses.</p> <p>This module supports both IPv4 and IPv6. There is the possibility to blacklist interfaces and IPs, as well as to show interfaces with no IP address. It will show an alternate text if no IP are available.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module in seconds.     (default 30)</p> </li> <li> <p><code>format</code> format of the output.     (default 'Network: {format_iface}')</p> </li> <li> <p><code>format_iface</code> format string for the list of IPs of each interface.     (default '{iface}:[ {ip4}][ {ip6}]')</p> </li> <li> <p><code>format_no_ip</code> string to show if there are no IPs to display.     (default 'no connection')</p> </li> <li> <p><code>iface_blacklist</code> list of interfaces to ignore. Accepts shell-style wildcards.     (default ['lo'])</p> </li> <li> <p><code>iface_sep</code> string to write between interfaces.     (default ' ')</p> </li> <li> <p><code>ip_blacklist</code> list of IPs to ignore. Accepts shell-style wildcards.     (default [])</p> </li> <li> <p><code>ip_sep</code> string to write between IP addresses.     (default ',')</p> </li> <li> <p><code>remove_empty</code> do not show interfaces with no IP.     (default True)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_iface}</code> the format_iface string.</li> </ul> <p>Format placeholders for format_iface:</p> <ul> <li> <p><code>{iface}</code> name of the interface.</p> </li> <li> <p><code>{ip4}</code> list of IPv4 of the interface.</p> </li> <li> <p><code>{ip6}</code> list of IPv6 of the interface.</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> no IPs to show</p> </li> <li> <p><code>color_good</code> IPs to show</p> </li> </ul> <p>Requires:</p> <ul> <li><code>ip</code> utility found in iproute2 package</li> </ul> <p>Examples:</p> <pre><code>net_iplist {\n    iface_blacklist = []\n    ip_blacklist = ['127.*', '::1']\n}\n</code></pre> <p>author guiniol</p>"},{"location":"user-guide/modules/#net_rate","title":"net_rate","text":"<p>Display network transfer rate.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>all_interfaces</code> ignore self.interfaces, but not self.interfaces_blacklist     (default True)</p> </li> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds     (default 2)</p> </li> <li> <p><code>devfile</code> location of dev file under /proc     (default '/proc/net/dev')</p> </li> <li> <p><code>format</code> format of the module output     (default '{interface}: {total}')</p> </li> <li> <p><code>format_no_connection</code> when there is no data transmitted from the start of the plugin     (default '')</p> </li> <li> <p><code>format_value</code> format to use for values     (default \"[\\?min_length=11 {value:.1f} {unit}]\")</p> </li> <li> <p><code>hide_if_zero</code> hide indicator if rate == 0     (default False)</p> </li> <li> <p><code>interfaces</code> comma separated list of interfaces to track     (default [])</p> </li> <li> <p><code>interfaces_blacklist</code> comma separated list of interfaces to ignore     (default 'lo')</p> </li> <li> <p><code>si_units</code> use SI units     (default False)</p> </li> <li> <p><code>sum_values</code> sum values of each interface instead of taking the top one     (default False)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'bad'), (1024, 'degraded'), (1024 * 1024, 'good')])</p> </li> <li> <p><code>unit</code> unit to use. If the unit contains a multiplier prefix, only this     exact unit will ever be used     (default \"B/s\")</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{down}</code> download rate</p> </li> <li> <p><code>{interface}</code> name of interface</p> </li> <li> <p><code>{total}</code> total rate</p> </li> <li> <p><code>{up}</code> upload rate</p> </li> </ul> <p>format_value placeholders:</p> <ul> <li> <p><code>{unit}</code> current unit</p> </li> <li> <p><code>{value}</code> numeric value</p> </li> </ul> <p>Color thresholds:</p> <ul> <li> <p><code>{down}</code> Change color based on the value of down</p> </li> <li> <p><code>{total}</code> Change color based on the value of total</p> </li> <li> <p><code>{up}</code> Change color based on the value of up</p> </li> </ul> <p>author shadowprince</p> <p>license Eclipse Public License</p>"},{"location":"user-guide/modules/#netdata","title":"netdata","text":"<p>Display network speed and bandwidth usage.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 2)</p> </li> <li> <p><code>format</code> display format for this module     (default '{nic} [\\?color=down LAN(Kb): {down}\u2193 {up}\u2191] '     '[\\?color=total T(Mb): {download}\u2193 {upload}\u2191 {total}\u2195]')</p> </li> <li> <p><code>nic</code> specify a network interface to use (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default {'down': [(0, 'bad'), (30, 'degraded'), (60, 'good')],     'total': [(0, 'good'), (400, 'degraded'), (700, 'bad')]})</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{nic}</code>      network interface</p> </li> <li> <p><code>{down}</code>     number of download speed</p> </li> <li> <p><code>{up}</code>       number of upload speed</p> </li> <li> <p><code>{download}</code> number of download usage</p> </li> <li> <p><code>{upload}</code>   number of upload usage</p> </li> <li> <p><code>{total}</code>    number of total usage</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>author Shahin Azad &lt;ishahinism at Gmail&gt;</p>"},{"location":"user-guide/modules/#networkmanager","title":"networkmanager","text":"<p>Display NetworkManager fields via nmcli, a command-line tool.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>devices</code> specify a list of devices to use (default ['[e|w]'])*</p> </li> <li> <p><code>format</code> display format for this module (default '{format_device}')</p> </li> <li> <p><code>format_device</code> format for devices     (default \"[\\?if=general_connection {general_device}[\\?soft  ][\\?color=ap_signal {ap_ssid} {ap_bars} {ap_signal}%][\\?soft  ][\\?color=good {ip4_address1}]]\")</p> </li> <li> <p><code>format_device_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'bad'), (30, 'degraded'), (65, 'good')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_device}</code> format for devices</li> </ul> <p>Format_device placeholders:</p> <ul> <li> <p><code>{general_connection}</code> eg Py3status, Wired Connection 1</p> </li> <li> <p><code>{general_device}</code>     eg wlp3s0b1, enp2s0</p> </li> <li> <p><code>{general_type}</code>       eg wifi, ethernet</p> </li> <li> <p><code>{ap_bars}</code>            signal strength in bars, eg \u2582\u2584\u2586_</p> </li> <li> <p><code>{ap_chan}</code>            wifi channel, eg 6</p> </li> <li> <p><code>{ap_mode}</code>            network mode, eg Adhoc or Infra</p> </li> <li> <p><code>{ap_rate}</code>            bitrate, eg 54 Mbit/s</p> </li> <li> <p><code>{ap_security}</code>        signal security, eg WPA2</p> </li> <li> <p><code>{ap_signal}</code>          signal strength in percentage, eg 63</p> </li> <li> <p><code>{ap_ssid}</code>            ssid name, eg Py3status</p> </li> <li> <p><code>{ip4_address1}</code>       eg 192.168.1.108</p> </li> <li> <p><code>{ip6_address1}</code>       eg 0000::0000:0000:0000:0000</p> <p>Use <code>nmcli --terse --fields=general,ap,ip4,ip6 device show</code> for a full list of supported NetworkManager fields to use. Not all of NetworkManager fields will be usable. See <code>man nmcli</code> for more information.</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>nmcli</code> cli configuration utility for NetworkManager</li> </ul> <p>Examples:</p> <pre><code># specify devices to use\nnetworkmanager {\n    devices = ['e*']    # ethernet only\n    devices = ['w*']    # wireless only\n    devices = []        # ethernet, wireless, lo, etc\n}\n</code></pre> <p>author Kevin Pulo &lt;kev@pulo.com.au&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#ns_checker","title":"ns_checker","text":"<p>Display DNS resolution success on a configured domain.</p> <p>This module launch a simple query on each nameservers for the specified domain. Nameservers are dynamically retrieved. The FQDN is the only one mandatory parameter.  It's also possible to add additional nameservers by appending them in nameservers list.</p> <p>The default resolver can be overwritten with my_resolver.nameservers parameter.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 300)</p> </li> <li> <p><code>domain</code> domain name to check (default '')</p> </li> <li> <p><code>format</code> output format string (default '{total_count} NS {status}')</p> </li> <li> <p><code>lifetime</code> resolver lifetime (default 0.3)</p> </li> <li> <p><code>nameservers</code> specify a list of reference DNS nameservers (default [])</p> </li> <li> <p><code>resolvers</code> specify a list of DNS resolvers to use (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{nok_count}</code> The number of failed name servers</p> </li> <li> <p><code>{ok_count}</code> The number of working name servers</p> </li> <li> <p><code>{status}</code> The overall status of the name servers (OK or NOK)</p> </li> <li> <p><code>{total_count}</code> The total number of name servers</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> One or more lookups have failed</p> </li> <li> <p><code>color_good</code> All lookups have succeeded</p> </li> </ul> <p>Requires:</p> <ul> <li><code>dnspython</code> a dns toolkit for python</li> </ul> <p>author nawadanp</p>"},{"location":"user-guide/modules/#nvidia_smi","title":"nvidia_smi","text":"<p>Display NVIDIA properties currently exhibiting in the NVIDIA GPUs.</p> <p>nvidia-smi, short for NVIDIA System Management Interface program, is a cross platform tool that supports all standard NVIDIA driver-supported Linux distros.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_gpu}')</p> </li> <li> <p><code>format_gpu</code> display format for NVIDIA GPUs     (default '{gpu_name} [\\?color=temperature.gpu {temperature.gpu}\u00b0C] '     '[\\?color=memory.used_percent {memory.used_percent}%]')</p> </li> <li> <p><code>format_gpu_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>memory_unit</code> specify memory unit, eg 'KiB', 'MiB', 'GiB', otherwise auto     (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'good'), (65, 'degraded'), (75, 'orange'), (85, 'bad')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_gpu}</code> format for NVIDIA GPUs</li> </ul> <p>format_gpu placeholders:</p> <ul> <li> <p><code>{index}</code>               Zero based index of the GPU.</p> </li> <li> <p><code>{count}</code>               The number of NVIDIA GPUs in the system</p> </li> <li> <p><code>{driver_version}</code>      The version of the installed NVIDIA display driver</p> </li> <li> <p><code>{gpu_name}</code>            The official product name of the GPU</p> </li> <li> <p><code>{gpu_uuid}</code>            Globally unique immutable identifier of the GPU</p> </li> <li> <p><code>{memory.free}</code>         Total free memory</p> </li> <li> <p><code>{memory.free_unit}</code>    Total free memory unit</p> </li> <li> <p><code>{memory.total}</code>        Total installed GPU memory</p> </li> <li> <p><code>{memory.total_unit}</code>   Total installed GPU memory unit</p> </li> <li> <p><code>{memory.used}</code>         Total memory allocated by active contexts</p> </li> <li> <p><code>{memory.used_percent}</code> Total memory allocated by active contexts percentage</p> </li> <li> <p><code>{memory.used_unit}</code>    Total memory unit</p> </li> <li> <p><code>{temperature.gpu}</code>     Core GPU temperature in degrees C</p> <p>Use <code>python /path/to/nvidia_smi.py --list-properties</code> for a full list of supported NVIDIA properties to use. Not all of supported NVIDIA properties will be usable. See <code>nvidia-smi --help-query-gpu</code> for more information.</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>format_gpu</code> <code>xxx</code>: print a color based on the value of NVIDIA <code>xxx</code> property</li> </ul> <p>Requires:</p> <ul> <li><code>nvidia-smi</code> command line interface to query NVIDIA devices</li> </ul> <p>Examples:</p> <pre><code># display nvidia properties\nnvidia_smi {\n    format_gpu = '{gpu_name} [\\?color=temperature.gpu {temperature.gpu}\u00b0C] '\n    format_gpu += '[\\?color=memory.used_percent {memory.used} {memory.used_unit}'\n    format_gpu += '[\\?color=darkgray&amp;show \\|]{memory.used_percent:.1f}%]'\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#online_status","title":"online_status","text":"<p>Determine if you have an Internet Connection.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{icon}')</p> </li> <li> <p><code>icon_off</code> show when connection is offline (default '\u25a0')</p> </li> <li> <p><code>icon_on</code> show when connection is online (default '\u25cf')</p> </li> <li> <p><code>timeout</code> time to wait for a response, in seconds (default 2)</p> </li> <li> <p><code>url</code> specify URL to connect when checking for a connection     (default 'https://www.google.com')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{icon}</code> connection status</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_off</code> Connection offline, defaults to color_bad</p> </li> <li> <p><code>color_on</code> Connection online, defaults to color_good</p> </li> </ul> <p>author obb</p>"},{"location":"user-guide/modules/#pingdom","title":"pingdom","text":"<p>Display response times of the configured Pingdom checks.</p> <p>We also verify the status of the checks and colorize if needed. Pingdom API doc : https://www.pingdom.com/features/api/documentation/</p> <p>Configuration parameters:</p> <ul> <li> <p><code>app_key</code> create an APP KEY on pingdom first (default '')</p> </li> <li> <p><code>cache_timeout</code> how often to refresh the check from pingdom (default 600)</p> </li> <li> <p><code>checks</code> comma separated pindgom check names to display (default '')</p> </li> <li> <p><code>format</code> display format for this module (default '{pingdom}')</p> </li> <li> <p><code>login</code> pingdom login (default '')</p> </li> <li> <p><code>max_latency</code> maximal latency before coloring the output (default 500)</p> </li> <li> <p><code>password</code> pingdom password (default '')</p> </li> <li> <p><code>request_timeout</code> pindgom API request timeout (default 10)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{pingdom}</code> pingdom response times</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Site is down</p> </li> <li> <p><code>color_degraded</code> Latency exceeded max_latency</p> </li> </ul> <p>Requires:</p> <ul> <li><code>requests</code> https://pypi.python.org/pypi/requests</li> </ul> <p>author ultrabug</p>"},{"location":"user-guide/modules/#playerctl","title":"playerctl","text":"<p>Display song/video and control players supported by playerctl</p> <p>Playerctl is a command-line utility for controlling media players that implement the MPRIS D-Bus Interface Specification. With Playerctl you can bind player actions to keys and get metadata about the currently playing song or video.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_loop</code> mouse button to cycle the loop status of the player (default None)</p> </li> <li> <p><code>button_next</code> mouse button to skip to the next track (default None)</p> </li> <li> <p><code>button_pause</code> mouse button to pause the playback (default None)</p> </li> <li> <p><code>button_play</code> mouse button to play the playback (default None)</p> </li> <li> <p><code>button_play_pause</code> mouse button to play/pause the playback (default 1)</p> </li> <li> <p><code>button_previous</code> mouse button to skip to the previous track (default None)</p> </li> <li> <p><code>button_seek_backward</code> mouse button to playback's position backward (default None)</p> </li> <li> <p><code>button_seek_forward</code> mouse button to playback's position forward (default None)</p> </li> <li> <p><code>button_shuffle</code> mouse button to toggle the shuffle mode of the player (default None)</p> </li> <li> <p><code>button_stop</code> mouse button to stop the playback (default 3)</p> </li> <li> <p><code>button_volume_down</code> mouse button to decrease the volume of the player (default None)</p> </li> <li> <p><code>button_volume_up</code> mouse button to increase the volume of the player (default None)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_player}')</p> </li> <li> <p><code>format_player</code> display format for players     (default '[\\?color=status [\\?if=status=Playing &gt; ][\\?if=status=Paused || ]'     '[\\?if=status=Stopped .. ][[{artist}][\\?soft  - ][{title}|{player}]]]')</p> </li> <li> <p><code>format_player_separator</code> show separator if more than one player (default ' ')</p> </li> <li> <p><code>players</code> list of players to track. An empty list tracks all players (default [])</p> </li> <li> <p><code>replacements</code> specify a list/dict of string placeholders to modify (default None)</p> </li> <li> <p><code>seek_delta</code> time (in seconds) to change the playback's position by (default 5)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use for different placeholders     (default {\"status\": [(\"Playing\", \"good\"), (\"Paused\", \"degraded\"), (\"Stopped\", \"bad\")]})</p> </li> <li> <p><code>volume_delta</code> percentage (from 0 to 100) to change the player's volume by (default 10)</p> <p>Not all players support every button action</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_player}</code> format for players</li> </ul> <p>Format player placeholders:</p> <ul> <li> <p><code>{album}</code> album name</p> </li> <li> <p><code>{artist}</code> artist name</p> </li> <li> <p><code>{duration}</code> length of track/video in [HH:]MM:SS, e.g. 03:22</p> </li> <li> <p><code>{loop}</code> loop status of the player, e.g. None, playlist, Track</p> </li> <li> <p><code>{player}</code> name of the player</p> </li> <li> <p><code>{position}</code> elapsed time in [HH:]MM:SS, e.g. 00:17</p> </li> <li> <p><code>{shuffle}</code> boolean indicating if the player's shuffle mode is on</p> </li> <li> <p><code>{status}</code> playback status, e.g. Playing, Paused, Stopped</p> </li> <li> <p><code>{title}</code> track/video title</p> </li> <li> <p><code>{trackNumber}</code> position of the track in the album or playlist</p> </li> <li> <p><code>{volume}</code> volume level of the player from 0 to 100</p> <p>Not all media players support every placeholder</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>playerctl</code> mpris media player controller and lib for spotify, vlc, audacious,     bmp, xmms2, and others.</p> </li> <li> <p><code>python-gobject</code> Python Bindings for GLib/GObject/GIO/GTK+</p> </li> </ul> <p>author jdholtz</p>"},{"location":"user-guide/modules/#pomodoro","title":"pomodoro","text":"<p>Use Pomodoro technique to get things done easily.</p> <p>Button 1 starts/pauses countdown. Button 2 switch Pomodoro/Break. Button 3 resets timer.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>display_bar</code> display time in bars when True, otherwise in seconds     (default False)</p> </li> <li> <p><code>format</code> define custom time format. See placeholders below (default '{ss}')</p> </li> <li> <p><code>format_active</code> format to display when timer is active     (default 'Pomodoro [{format}]')</p> </li> <li> <p><code>format_break</code> format to display during break     (default 'Break #{breakno} [{format}]')</p> </li> <li> <p><code>format_break_stopped</code> format to display during a break that is stopped     (default 'Break #{breakno} ({format})')</p> </li> <li> <p><code>format_separator</code> separator between minutes:seconds (default ':')</p> </li> <li> <p><code>format_stopped</code> format to display when timer is stopped     (default 'Pomodoro ({format})')</p> </li> <li> <p><code>num_progress_bars</code> number of progress bars (default 5)</p> </li> <li> <p><code>pomodoros</code> specify a number of pomodoros (intervals) (default 4)</p> </li> <li> <p><code>sound_break_end</code> break end sound (file path) (default None)</p> </li> <li> <p><code>sound_pomodoro_end</code> pomodoro end sound (file path) (default None)</p> </li> <li> <p><code>sound_pomodoro_start</code> pomodoro start sound (file path) (default None)</p> </li> <li> <p><code>timer_break</code> normal break time (seconds) (default 300)</p> </li> <li> <p><code>timer_long_break</code> long break time (seconds) (default 900)</p> </li> <li> <p><code>timer_pomodoro</code> pomodoro time (seconds) (default 1500)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{bar}</code> display time in bars</p> </li> <li> <p><code>{breakno}</code> current break number</p> </li> <li> <p><code>{ss}</code> display time in total seconds (1500)</p> </li> <li> <p><code>{mm}</code> display time in total minutes (25)</p> </li> <li> <p><code>{mmss}</code> display time in (hh-)mm-ss (25:00)</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Pomodoro not running</p> </li> <li> <p><code>color_degraded</code> Pomodoro break</p> </li> <li> <p><code>color_good</code> Pomodoro active</p> </li> </ul> <p>Examples:</p> <pre><code>pomodoro {\n    format = \"{mmss} {bar}\"\n}\n</code></pre> <p>author Fandekasp (Adrien Lemaire), rixx, FedericoCeratto, schober-ch, ricci</p>"},{"location":"user-guide/modules/#process_status","title":"process_status","text":"<p>Display status of a process on your system.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{icon}')</p> </li> <li> <p><code>full</code> match against the full command line (default False)</p> </li> <li> <p><code>icon_off</code> show this if a process is not running (default '\u25a0')</p> </li> <li> <p><code>icon_on</code> show this if a process is running (default '\u25cf')</p> </li> <li> <p><code>process</code> specify a process name to use (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{icon}</code> process icon</p> </li> <li> <p><code>{process}</code> process name</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Not running</p> </li> <li> <p><code>color_good</code> Running</p> </li> </ul> <p>author obb, Moritz L\u00fcdecke</p>"},{"location":"user-guide/modules/#prometheus","title":"prometheus","text":"<p>Displays result of a Prometheus query.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>color</code> Text colour. Supports py3status colour names.     Examples: GOOD, DEGRADED, BAD, #E9967A     (default None)</p> </li> <li> <p><code>format</code> Formatting of query result. Can refer to all labels from the query     result. Query value placeholder __v.     (default \"{__v:.0f}\")</p> </li> <li> <p><code>join</code> If query returned multiple rows, join them using this string.     If you want to show just one, update your query.     (default None)</p> </li> <li> <p><code>query</code> The PromQL query     (default None)</p> </li> <li> <p><code>query_interval</code> Re-query interval in seconds.     (default 60)</p> </li> <li> <p><code>server</code> str, URL pointing at your Prometheus(-compatible) server, example:     http://prom.int.mydomain.net:9090     (default None)</p> </li> <li> <p><code>units</code> Dict with py3.format_units arguments, if you want human-readable     unit formatting. Example: {\"unit\": \"Wh\", \"si\": True}     If used, __v placeholder will contain formatted output. __n and __u     will contain number and unit separately if you want to more finely     control formatting.     (default None)</p> </li> </ul> <p>Dynamic format placeholders:     All query result labels are available as format placeholders. The vector     values themselves are in placeholder __v. (Or __n and __u if you specified     units).</p> <p>Examples:     # If blackbox exporter ran into any failures, show it. If everything     # is healthy this will produce 0 rows hence not shown.     query = \"probe_success == 0\"     format = \"\ud83d\udc80 {job} {instance} \ud83d\udc80\"     color = \"bad\"</p> <pre><code># Basic Prometheus stat\nquery = \"sum(prometheus_sd_discovered_targets)\"\nformat = \"{__v:.0f} targets monitored\"\ncolor = \"ok\"\n</code></pre> <p>author github.com/Wilm0r</p>"},{"location":"user-guide/modules/#rainbow","title":"rainbow","text":"<p>Add color cycling fun to your i3bar.</p> <p>This is the most pointless yet most exciting module you can imagine.</p> <p>It allows color cycling of modules. Imagine the joy of having the current time change through the colors of the rainbow.</p> <p>If you were completely insane you could also use it to implement the i3bar equivalent of the &lt;blink&gt; tag and cause yourself endless headaches and the desire to vomit.</p> <p>The color for the contained module(s) is changed and cycles through your chosen gradient by default this is the colors of the rainbow.  This module will increase the amount of updates that py3status needs to do so should be used sparingly.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cycle_time</code> How often we change this color in seconds     (default 1)</p> </li> <li> <p><code>force</code> If True then the color will always be set.  If false the color will     only be changed if it has not been set by a module.     (default False)</p> </li> <li> <p><code>format</code> display format for this module (default '{output}')</p> </li> <li> <p><code>gradient</code> The colors we will cycle through, This is a list of hex values     (default [ '#FF0000', '#FFFF00', '#00FF00', '#00FFFF',     '#0000FF', '#FF00FF', '#FF0000', ])</p> </li> <li> <p><code>multi_color</code> If True then each module the rainbow contains will be colored     differently (default True)</p> </li> <li> <p><code>steps</code> Number of steps between each color in the gradient     (default 10)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{output}</code> rainbow output</li> </ul> <p>Examples:</p> <pre><code># show time colorfully\norder += \"rainbow time\"\nrainbow time {\n    time {}\n}\n\n# blinking text black/white\norder += \"rainbow blink_time\"\nrainbow blink_time {\n    gradient = [\n        '#FFFFFF',\n        '#000000',\n    ]\n    steps = 1\n    time {}\n}\n</code></pre> <p>author tobes</p>"},{"location":"user-guide/modules/#rate_counter","title":"rate_counter","text":"<p>Display time spent and calculate the price of your service.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often to update in seconds (default 5)</p> </li> <li> <p><code>config_file</code> file path to store the time already spent     and restore it the next session     (default '~/.i3/py3status/counter-config.save')</p> </li> <li> <p><code>format</code> output format string     (default 'Time: {days} day {hours}:{mins:02d} Cost: {total}')</p> </li> <li> <p><code>format_money</code> output format string     (default '{price}$')</p> </li> <li> <p><code>hour_price</code> your price per hour (default 30)</p> </li> <li> <p><code>tax</code> tax value (1.02 = 2%) (default 1.02)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{days}</code> The number of whole days in running timer</p> </li> <li> <p><code>{hours}</code> The remaining number of whole hours in running timer</p> </li> <li> <p><code>{mins}</code> The remaining number of whole minutes in running timer</p> </li> <li> <p><code>{secs}</code> The remaining number of seconds in running timer</p> </li> <li> <p><code>{subtotal}</code> The subtotal cost (time * rate)</p> </li> <li> <p><code>{tax}</code> The tax cost, based on the subtotal cost</p> </li> <li> <p><code>{total}</code> The total cost (subtotal + tax)</p> </li> <li> <p><code>{total_hours}</code> The total number of whole hours in running timer</p> </li> <li> <p><code>{total_mins}</code> The total number of whole minutes in running timer</p> </li> </ul> <p>format_money placeholders:</p> <ul> <li><code>{price}</code> numeric value of money</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_running</code> Running, default color_good</p> </li> <li> <p><code>color_stopped</code> Stopped, default color_bad</p> </li> </ul> <p>author Amaury Brisou &lt;py3status AT puzzledge.org&gt;</p>"},{"location":"user-guide/modules/#rss_aggregator","title":"rss_aggregator","text":"<p>Display unread feeds in your favorite RSS aggregator.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>aggregator</code> feed aggregator used. Supported values are <code>owncloud</code> and <code>ttrss</code>.     Other aggregators might be supported in future releases. Contributions are     welcome. (default 'owncloud')</p> </li> <li> <p><code>cache_timeout</code> how often to run this check (default 60)</p> </li> <li> <p><code>feed_ids</code> list of IDs of feeds to watch, see note below (default [])</p> </li> <li> <p><code>folder_ids</code> list of IDs of folders ro watch (default [])</p> </li> <li> <p><code>format</code> format to display (default 'Feed: {unseen}')</p> </li> <li> <p><code>password</code> login password (default None)</p> </li> <li> <p><code>server</code> aggregator server to connect to (default 'https://yourcloudinstance.com')</p> </li> <li> <p><code>user</code> login user (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{unseen}</code> sum of numbers of unread feed elements</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_new_items</code> text color when there is new items (default color_good)</p> </li> <li> <p><code>color_error</code> text color when there is an error (default color_bad)</p> </li> </ul> <p>Requires:</p> <ul> <li><code>requests</code> python module from pypi https://pypi.python.org/pypi/requests</li> </ul> <p>Notes:     You can also decide to check only for specific feeds or folders of feeds.     To use this feature, you have to first get the IDs of those feeds or     folders. You can get those IDs by clicking on the desired feed or folder     and watching the URL.</p> <pre><code>For OwnCloud/NextCloud with News application:\nhttps://yourcloudinstance.com/index.php/apps/news/#/items/feeds/FEED_ID\nhttps://yourcloudinstance.com/index.php/apps/news/#/items/folders/FOLDER_ID\n\nFor Tiny Tiny RSS 1.6 or newer:\nhttps://yourttrssinstance.com/index.php#f=FEED_ID&amp;amp;c=0\nhttps://yourttrssinstance.com/index.php#f=FOLDER_ID&amp;amp;c=1\n\nIf both feeds list and folders list are left empty, all unread feed items\nwill be counted. You may use both feeds list and folders list, but given\nfeeds shouldn't be included in given folders, else unread count number\nbehavior is unpredictable. Same warning when aggregator allows subfolders:\nthe folders list shouldn't include a folder and one of its subfolder.\n</code></pre> <p>author raspbeguy</p>"},{"location":"user-guide/modules/#rt","title":"rt","text":"<p>Display number of ongoing tickets from RT queues.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 300)</p> </li> <li> <p><code>db</code> database to use (default '')</p> </li> <li> <p><code>format</code> see placeholders below (default 'general: {General}')</p> </li> <li> <p><code>host</code> database host to connect to (default '')</p> </li> <li> <p><code>password</code> login password (default '')</p> </li> <li> <p><code>threshold_critical</code> set bad color above this threshold (default 20)</p> </li> <li> <p><code>threshold_warning</code> set degraded color above this threshold (default 10)</p> </li> <li> <p><code>timeout</code> timeout for database connection (default 5)</p> </li> <li> <p><code>user</code> login user (default '')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{YOUR_QUEUE_NAME}</code> number of ongoing RT tickets (open+new+stalled)</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Exceeded threshold_critical</p> </li> <li> <p><code>color_degraded</code> Exceeded threshold_warning</p> </li> </ul> <p>Requires:     PyMySQL: https://pypi.org/project/PyMySQL/     or     MySQL-python: https://pypi.org/project/MySQL-python/</p> <p>It features thresholds to colorize the output and forces a low timeout to limit the impact of a server connectivity problem on your i3bar freshness.</p> <p>author ultrabug</p>"},{"location":"user-guide/modules/#scratchpad","title":"scratchpad","text":"<p>Display number of scratchpad windows and urgency hints.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for i3-msg or swaymsg (default 5)</p> </li> <li> <p><code>format</code> display format for this module     (default \"\u232b [\\?color=scratchpad {scratchpad}]\")</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, \"darkgray\"), (1, \"violet\")])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{scratchpad}</code> number of scratchpads</p> </li> <li> <p><code>{urgent}</code> number of urgent scratchpads</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Optional:</p> <ul> <li><code>i3ipc</code> an improved python library to control i3wm and sway</li> </ul> <p>Examples:</p> <pre><code># hide zero scratchpad\nscratchpad {\n    format = '[\\?not_zero \u232b [\\?color=scratchpad {scratchpad}]]'\n}\n\n# hide non-urgent scratchpad\nscratchpad {\n    format = '[\\?not_zero \u232b {urgent}]'\n}\n\n# bring up scratchpads on clicks\nscratchpad {\n    on_click 1 = 'scratchpad show'\n}\n\n# add more colors\nscratchpad {\n    thresholds = [\n       (0, \"darkgray\"), (1, \"violet\"), (2, \"deepskyblue\"), (3, \"lime\"),\n       (4, \"yellow\"), (5, \"orange\"), (6, \"red\"), (7, \"tomato\"),\n    ]\n}\n</code></pre> <p>author shadowprince (counter), cornerman (async)</p> <p>license Eclipse Public License (counter), BSD (async)</p>"},{"location":"user-guide/modules/#screenshot","title":"screenshot","text":"<p>Take screenshots and upload them to a given server.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>file_length</code> generated file_name length (default 4)</p> </li> <li> <p><code>format</code> display format for this module     (default '\\?color=good [{basename}|\\?show SHOT]')</p> </li> <li> <p><code>save_path</code> Directory where to store your screenshots (default '~/Pictures')</p> </li> <li> <p><code>screenshot_command</code> the command used to generate the screenshot     (default 'gnome-screenshot -f')</p> </li> <li> <p><code>upload_path</code> the remote path where to push the screenshot (default None)</p> </li> <li> <p><code>upload_server</code> your server address (default None)</p> </li> <li> <p><code>upload_user</code> your ssh user (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{basename}</code> generated basename, eg qs60.jpg</li> </ul> <p>Examples:</p> <pre><code># push screenshots to a server\nscreenshot {\n    save_path = \"~/Pictures/\"\n    upload_user = \"erol\"\n    upload_server = \"puzzledge.org\"\n    upload_path = \"/files\"\n\n    # scp $HOME/Pictures/$UUID.jpg erol@puzzledge.org:/files\n}\n</code></pre> <p>author Amaury Brisou &lt;py3status AT puzzledge.org&gt;</p>"},{"location":"user-guide/modules/#scroll","title":"scroll","text":"<p>Scroll modules.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 1)</p> </li> <li> <p><code>length</code> specify a length of characters to scroll (default 25)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{output}</code> output</li> </ul> <p>author farnoy</p>"},{"location":"user-guide/modules/#selinux","title":"selinux","text":"<p>Display SELinux state.</p> <p>This module displays the state of SELinux on your machine:     Enforcing (good), Permissive (degraded), or Disabled (bad).</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default 'SELinux: {state}')</p> </li> <li> <p><code>state_disabled</code> show when no SELinux policy is loaded.     (default 'disabled')</p> </li> <li> <p><code>state_enforcing</code> show when SELinux security policy is enforced.     (default 'enforcing')</p> </li> <li> <p><code>state_permissive</code> show when SELinux prints warnings instead of enforcing.     (default 'permissive')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{state}</code> SELinux state</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Enforcing</p> </li> <li> <p><code>color_degraded</code> Permissive</p> </li> <li> <p><code>color_good</code> Disabled</p> </li> </ul> <p>Requires:</p> <ul> <li><code>libselinux-python</code> SELinux python bindings for libselinux</li> </ul> <p>author bstinsonmhk</p> <p>license BSD</p>"},{"location":"user-guide/modules/#spaceapi","title":"spaceapi","text":"<p>Display status of a given hackerspace.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_url</code> mouse button to open URL sent in space's API (default 3)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 60)</p> </li> <li> <p><code>format</code> display format for this module (default '{state}[ {lastchanged}]')</p> </li> <li> <p><code>format_lastchanged</code> display format for time (default 'since %H:%M')</p> </li> <li> <p><code>state_closed</code> show when hackerspace is closed (default 'closed')</p> </li> <li> <p><code>state_open</code> show when hackerspace is open (default 'open')</p> </li> <li> <p><code>url</code> specify JSON URL of a hackerspace to retrieve from     (default 'https://status.chaospott.de/status.json')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{state}</code> Hackerspace state</p> </li> <li> <p><code>{lastchanged}</code> Time</p> </li> </ul> <p>format_lastchanged conversion:     '%' Strftime characters to be translated</p> <p>Color options:</p> <ul> <li> <p><code>color_closed</code> Space closed, defaults to color_bad</p> </li> <li> <p><code>color_open</code> Space open, defaults to color_good</p> </li> </ul> <p>author timmszigat</p> <p>license WTFPL &lt;http://www.wtfpl.net/txt/copying/&gt;</p>"},{"location":"user-guide/modules/#speedtest","title":"speedtest","text":"<p>Perform a bandwidth test with speedtest-cli.</p> <p>Use middle-click to start the speed test.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_share</code> mouse button to share an URL (default None)</p> </li> <li> <p><code>format</code> display format for this module     (default \"speedtest[\\?if=elapsed&amp;color=elapsed_time  \"     \"{elapsed_time}s][ [\\?color=download \u2193{download}Mbps] \"     \"[\\?color=upload \u2191{upload}Mbps]]\")</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default {\"upload\": [(0, \"violet\")], \"ping\": [(0, \"#fff381\")],     \"download\": [(0, \"cyan\")], \"elapsed_time\": [(0, \"#1cbfff\")]})</p> </li> </ul> <p>Control placeholders:</p> <ul> <li><code>{elapsed}</code>          elapsed time state, eg False, True</li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{bytes_sent}</code>       bytes sent during test (in MB), eg 52.45</p> </li> <li> <p><code>{bytes_received}</code>   bytes received during test (in MB), eg 70.23</p> </li> <li> <p><code>{client_country}</code>   client country code, eg FR</p> </li> <li> <p><code>{client_ip}</code>        client ip, eg 78.194.13.7</p> </li> <li> <p><code>{client_isp}</code>       client isp, eg Free SAS</p> </li> <li> <p><code>{client_ispdlavg}</code>  client isp download average, eg 0</p> </li> <li> <p><code>{client_isprating}</code> client isp rating, eg 3.7</p> </li> <li> <p><code>{client_ispulavg}</code>  client isp upload average, eg 0</p> </li> <li> <p><code>{client_lat}</code>       client latitude, eg 48.8534</p> </li> <li> <p><code>{client_loggedin}</code>  client logged in, eg 0</p> </li> <li> <p><code>{client_lon}</code>       client longitude, eg 2.3487999999999998</p> </li> <li> <p><code>{client_rating}</code>    client rating, eg 0</p> </li> <li> <p><code>{download}</code>         download speed (in MB), eg 20.23</p> </li> <li> <p><code>{elapsed_time}</code>     elapsed time since speedtest start</p> </li> <li> <p><code>{ping}</code>             ping time in ms to speedtest server</p> </li> <li> <p><code>{server_cc}</code>        server country code, eg FR</p> </li> <li> <p><code>{server_country}</code>   server country, eg France</p> </li> <li> <p><code>{server_d}</code>         server distance, eg 2.316599376968091</p> </li> <li> <p><code>{server_host}</code>      server host, eg speedtest.telecom-paristech.fr:8080</p> </li> <li> <p><code>{server_id}</code>        server id, eg 11977</p> </li> <li> <p><code>{share}</code>            share, eg share url</p> </li> <li> <p><code>{timestamp}</code>        timestamp, eg 2018-08-30T16:27:25.318212Z</p> </li> <li> <p><code>{server_lat}</code>       server latitude, eg 48.8742</p> </li> <li> <p><code>{server_latency}</code>   server latency, eg 8.265</p> </li> <li> <p><code>{server_lon}</code>       server longitude, eg 2.3470</p> </li> <li> <p><code>{server_name}</code>      server name, eg Paris</p> </li> <li> <p><code>{server_sponsor}</code>   server sponsor, eg T\u00e9l\u00e9com ParisTech</p> </li> <li> <p><code>{server_url}</code>       server url, eg http://speedtest.telecom-paristech...</p> </li> <li> <p><code>{upload}</code>           upload speed (in MB), eg 20.23</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>speedtest-cli</code> Command line interface for testing Internet bandwidth</li> </ul> <p>Examples:</p> <pre><code># show detailed elapsed_time|download/upload\nspeedtest {\n    format = \"speedtest[\\?soft  ][\\?if=elapsed [\\?color=darkgray [time \"\n    format += \"[\\?color=elapsed_time {elapsed_time} s]]]|[\\?color=darkgray \"\n    # format += \"ping [\\?color=ping {ping} ms] \"\n    format += \"download [\\?color=download {download}Mbps] \"\n    format += \"upload [\\?color=upload {upload}Mbps]]]\"\n}\n\n# show everything\nspeedtest {\n    format = \"speedtest[\\?soft  ][\\?color=darkgray \"\n    format += \"[time [\\?color=elapsed_time {elapsed_time} s]][\\?soft  ]\"\n    format += \"[ping [\\?color=ping {ping} ms] \"\n    format += \"download [\\?color=download {download}Mbps] \"\n    format += \"upload [\\?color=upload {upload}Mbps]]]\"\n}\n\n# minimal\nspeedtest {\n    format = \"speedtest[\\?soft  ][\\?if=elapsed \"\n    format += \"[\\?color=elapsed_time {elapsed_time}]|\"\n    # format += \"[\\?color=ping {ping}] \"\n    format += \"[[\\?color=download {download}] [\\?color=upload {upload}]]]\"\n}\n\n# don't hide data on reset\nspeedtest {\n    format = \"speedtest[\\?soft  ][\\?color=darkgray time \"\n    format += \"[\\?color=elapsed_time {elapsed_time} s] \"\n    # format += \"ping [\\?color=ping {ping} ms] \"\n    format += \"download [\\?color=download {download}Mbps] \"\n    format += \"upload [\\?color=upload {upload}Mbps]]\"\n}\n\n# don't hide data on reset, minimal\nspeedtest {\n    format = \"speedtest[\\?soft  ][[\\?color=elapsed_time {elapsed_time}] \"\n    # format += \"[\\?color=ping {ping}] \"\n    format += \"[\\?color=download {download}] [\\?color=upload {upload}]]\"\n}\n</code></pre> <p>author Cyril Levis (@cyrinux)</p>"},{"location":"user-guide/modules/#spotify","title":"spotify","text":"<p>Display song currently playing in Spotify.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_next</code> button to switch to next song (default None)</p> </li> <li> <p><code>button_play_pause</code> button to toggle play/pause (default None)</p> </li> <li> <p><code>button_previous</code> button to switch to previous song (default None)</p> </li> <li> <p><code>cache_timeout</code> how often to update the bar (default 5)</p> </li> <li> <p><code>dbus_client</code> Used to override which app is used as a client for     spotify. If you use spotifyd as a client, set this to     'org.mpris.MediaPlayer2.spotifyd'     (default 'org.mpris.MediaPlayer2.spotify')</p> </li> <li> <p><code>format</code> see placeholders below (default '{artist} : {title}')</p> </li> <li> <p><code>format_down</code> define output if spotify is not running     (default 'Spotify not running')</p> </li> <li> <p><code>format_stopped</code> define output if spotify is not playing     (default 'Spotify stopped')</p> </li> <li> <p><code>replacements</code> specify a list/dict of string placeholders to modify     (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{album}</code> album name</p> </li> <li> <p><code>{artist}</code> artiste name (first one)</p> </li> <li> <p><code>{playback}</code> state of the playback: Playing, Paused</p> </li> <li> <p><code>{time}</code> time duration of the song</p> </li> <li> <p><code>{title}</code> name of the song</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_offline</code> Spotify is not running, defaults to color_bad</p> </li> <li> <p><code>color_paused</code> Song is stopped or paused, defaults to color_degraded</p> </li> <li> <p><code>color_playing</code> Song is playing, defaults to color_good</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>python-dbus</code> to access dbus in python</p> </li> <li> <p><code>spotify</code> a proprietary music streaming service</p> </li> </ul> <p>Examples:</p> <pre><code>spotify {\n    button_next = 4\n    button_play_pause = 1\n    button_previous = 5\n    format = \"{title} by {artist} -&gt; {time}\"\n    format_down = \"no Spotify\"\n\n    # sanitize\n    replacements = {\n        \"album\": [(\"\\s?[\\(\\[\\-,;/][^)\\],;/]*?(bonus|demo|edit|explicit|extended|feat|mono|remaster|stereo|version)[^)\\],;/]*[\\)\\]]?\", \"\")],\n        \"title\": [(\"\\s?[\\(\\[\\-,;/][^)\\],;/]*?(bonus|demo|edit|explicit|extended|feat|mono|remaster|stereo|version)[^)\\],;/]*[\\)\\]]?\", \"\")]\n    }\n}\n</code></pre> <p>author Pierre Guilbert, Jimmy Garpeh\u00e4ll, sondrele, Andrwe</p>"},{"location":"user-guide/modules/#sql","title":"sql","text":"<p>Display data stored in MariaDB, MySQL, sqlite3, and hopefully more.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh cache_timeout for this module (default 10)</p> </li> <li> <p><code>database</code> specify database name to import (default None)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_row}')</p> </li> <li> <p><code>format_row</code> display format for SQL rows (default None)</p> </li> <li> <p><code>format_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>parameters</code> specify connection parameters to use (default None)</p> </li> <li> <p><code>query</code> specify command to query a database (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{row}</code> number of SQL rows</p> </li> <li> <p><code>{format_row}</code> format for SQL rows     Parameters can be placeholders too, eg {host}, {passd}</p> </li> </ul> <p>Format_row placeholders:</p> <ul> <li><code>{field}</code> placeholders will have the value returned by the query for the field</li> </ul> <p>Color thresholds:</p> <ul> <li> <p><code>format</code>     row: print a color based on the number of SQL rows</p> </li> <li> <p><code>format_row</code>     field: print a color based on the value of <code>field</code> placeholder</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>mariadb</code> fast sql database server, drop-in replacement for mysql</p> </li> <li> <p><code>mysql-python</code> mysql support for python</p> </li> <li> <p><code>sqlite</code> a c library that implements an sql database engine</p> </li> </ul> <p>Examples:</p> <pre><code># specify database name to import\nsql {\n    database = 'sqlite3'  # from sqlite3 import connect\n    database = 'MySQLdb'  # from MySQLdb import connect\n    database = '...'      # from ... import connect\n}\n\n# specify connection parameters to use\nhttp://mysql-python.sourceforge.net/MySQLdb.html#functions-and-attributes\nhttps://docs.python.org/3/library/sqlite3.html#module-functions-and-constants\nsql {\n    name = 'MySQLdb'\n    format = '{host} {passd} ...'\n    parameters = {\n        'host': 'host',\n        'passwd': 'password',\n        '...': '...',\n    }\n}\n\n# specify command to query a database\nsql {\n    query = 'SHOW SLAVE STATUS'\n    query = 'SELECT * FROM cal_todos'\n    query = '...'\n}\n\n# display number of seconds behind master with MySQLdb\nsql {\n    database = 'MySQLdb'\n    format_row = '\\?color=seconds_behind_master {host} is '\n    format_row += '[{seconds_behind_master}s behind|\\?show master]'\n    parameters = {\n        'host': 'localhost',\n        'passwd': '********'\n    }\n    query = 'SHOW SLAVE STATUS'\n    thresholds = [\n        (0, 'deepskyblue'), (100, 'good'), (300, 'degraded'), (600, 'bad')\n    ]\n}\n\n# display thunderbird tasks with sqlite3\nsql {\n    database = 'sqlite3'\n    format_row = '{title}'\n    format_separator = ', '\n    query = 'SELECT * FROM cal_todos'\n    parameters = '~/.thunderbird/user.default/calendar-data/local.sqlite'\n}\n</code></pre> <p>author cereal2nd</p> <p>license BSD</p>"},{"location":"user-guide/modules/#static_string","title":"static_string","text":"<p>Display static text.</p> <p>Configuration parameters:</p> <ul> <li><code>format</code> display format for this module (default 'Hello, world!')</li> </ul> <p>author frimdo ztracenastopa@centrum.cz</p>"},{"location":"user-guide/modules/#sway_idle","title":"sway_idle","text":"<p>Display sway inhibit idle status.</p> <p>This Module shows an indicator, if an idle is inhibited by an inhibitor. For more information about inhibit idle see <code>man 5 sway</code></p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds (default 1)</p> </li> <li> <p><code>format</code> Display format (default 'Inhibit Idle: {inhibit_idle}')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{inhibit_idle}</code> Returns 'True' if idle is inhibited, 'False' else.</li> </ul> <p>Example:</p> <pre><code>sway_idle {\n    format = \"Inhibit Idle: [\\?if=inhibit_idle=True True]|False\"\n}\n</code></pre> <p>author Valentin Weber &lt;valentin+py3status@wv2.ch&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#sysdata","title":"sysdata","text":"<p>Display system RAM, SWAP and CPU utilization.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 10)</p> </li> <li> <p><code>cpu_freq_unit</code> the unit of CPU frequency to use in report, case insensitive.     ['kHz', 'MHz', 'GHz'] (default 'GHz')</p> </li> <li> <p><code>cpu_temp_unit</code> specify cpu temperature unit ['C', 'F', 'K'] (default 'C')</p> </li> <li> <p><code>cpus</code> specify a list of CPUs to use (default ['cpu?'])*</p> </li> <li> <p><code>format</code> output format string     (default '[\\?color=cpu_used_percent CPU: {cpu_used_percent}%], '     '[\\?color=mem_used_percent Mem: {mem_used}/{mem_total} '     '{mem_total_unit} ({mem_used_percent}%)]')</p> </li> <li> <p><code>format_cpu</code> display format for CPUs     (default '\\?color=used_percent {used_percent}%')</p> </li> <li> <p><code>format_cpu_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>mem_unit</code> the unit of memory to use in report, case insensitive.     ['dynamic', 'KiB', 'MiB', 'GiB'] (default 'GiB')</p> </li> <li> <p><code>swap_unit</code> the unit of swap to use in report, case insensitive.     ['dynamic', 'KiB', 'MiB', 'GiB'] (default 'GiB')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, \"good\"), (40, \"degraded\"), (75, \"bad\")])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{cpu_freq_avg}</code> average CPU frequency across all cores</p> </li> <li> <p><code>{cpu_freq_max}</code> highest CPU clock frequency</p> </li> <li> <p><code>{cpu_freq_unit}</code> unit for frequency</p> </li> <li> <p><code>{cpu_temp}</code> cpu temperature</p> </li> <li> <p><code>{cpu_temp_unit}</code> cpu temperature unit</p> </li> <li> <p><code>{cpu_used_percent}</code> cpu used percentage</p> </li> <li> <p><code>{format_cpu}</code> format for CPUs</p> </li> <li> <p><code>{load1}</code> load average over the last minute</p> </li> <li> <p><code>{load5}</code> load average over the five minutes</p> </li> <li> <p><code>{load15}</code> load average over the fifteen minutes</p> </li> <li> <p><code>{mem_total}</code> total memory</p> </li> <li> <p><code>{mem_total_unit}</code> memory total unit, eg GiB</p> </li> <li> <p><code>{mem_used}</code> used memory</p> </li> <li> <p><code>{mem_used_unit}</code> memory used unit, eg GiB</p> </li> <li> <p><code>{mem_used_percent}</code> used memory percentage</p> </li> <li> <p><code>{mem_free}</code> free memory</p> </li> <li> <p><code>{mem_free_unit}</code> free memory unit, eg GiB</p> </li> <li> <p><code>{mem_free_percent}</code> free memory percentage</p> </li> <li> <p><code>{swap_total}</code> total swap</p> </li> <li> <p><code>{swap_total_unit}</code> swap total memory unit, eg GiB</p> </li> <li> <p><code>{swap_used}</code> used swap</p> </li> <li> <p><code>{swap_used_unit}</code> swap used memory unit, eg GiB</p> </li> <li> <p><code>{swap_used_percent}</code> used swap percentage</p> </li> <li> <p><code>{swap_free}</code> free swap</p> </li> <li> <p><code>{swap_free_unit}</code> free swap unit, eg GiB</p> </li> <li> <p><code>{swap_free_percent}</code> free swap percentage</p> </li> </ul> <p>format_cpu placeholders:</p> <ul> <li> <p><code>{name}</code> cpu name, eg cpu, cpu0, cpu1, cpu2, cpu3</p> </li> <li> <p><code>{used_percent}</code> cpu used percentage, eg 88.99</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>lm_sensors</code> a tool to read cpu temperature</li> </ul> <p>Examples:</p> <pre><code># specify a list of cpus to use. see \"grep cpu /proc/stat\"\nsysdata {\n    cpus = []                # avg + all CPUs\n    cpus = ['cpu']           # avg             # same as {cpu_used_percent}\n    cpus = ['cpu0', 'cpu2']  # selective CPUs  # full\n    cpus = ['cpu?*']         # all CPUs        # fnmatch (default)\n}\n\n# display per cpu percents\nsysdata {\n    format = \"{format_cpu}\"\n    format_cpu = \"{name} [\\?color=used_percent {used_percent}%]\"\n}\n\n# customize per cpu padding, precision, etc\nsysdata {\n    format = \"CPU {format_cpu}\"\n    format_cpu = \"[\\?min_length=4 [\\?color=used_percent {used_percent:.0f}%]]\"\n}\n\n# display per cpu histogram\nsysdata {\n    format = \"CPU Histogram [\\?color=cpu_used_percent {format_cpu}]\"\n    format_cpu = \"[\\?if=used_percent&gt;80 \u2847|[\\?if=used_percent&gt;60 \u2846\"\n    format_cpu += \"|[\\?if=used_percent&gt;40 \u2844|[\\?if=used_percent&gt;20 \u2840\"\n    format_cpu += \"|\u2800]]]]\"\n    format_cpu_separator = \"\"\n    thresholds = [(0, \"good\"), (60, \"degraded\"), (80, \"bad\")]\n    cache_timeout = 1\n}\n</code></pre> <p>author Shahin Azad &lt;ishahinism at Gmail&gt;, shrimpza, guiniol, JackDoan &lt;me at jackdoan dot com&gt;, farnoy</p>"},{"location":"user-guide/modules/#systemd","title":"systemd","text":"<p>Display status of a service on your system.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>format</code> display format for this module (default '\\?if=!hide {unit}: {status}')</p> </li> <li> <p><code>hide_extension</code> suppress extension of the systemd unit (default False)</p> </li> <li> <p><code>hide_if_default</code> suppress the output if the systemd unit is in default state     'off' the output is never suppressed     'on' the output is suppressed if the unit is (enabled and active)     or (disabled and inactive)     'active' the output is suppressed if the unit is active     'inactive' the output is suppressed if the unit is inactive     (default 'off')</p> </li> <li> <p><code>unit</code> specify the systemd unit to use (default 'dbus.service')</p> </li> <li> <p><code>user</code> specify if this is a user service (default False)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{unit}</code> unit name, eg sshd.service</p> </li> <li> <p><code>{status}</code> unit status, eg active, inactive, not-found</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_good</code> unit active</p> </li> <li> <p><code>color_bad</code> unit inactive</p> </li> <li> <p><code>color_degraded</code> unit not-found</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>dbus-python</code> to interact with dbus</p> </li> <li> <p><code>pygobject</code> which in turn requires libcairo2-dev, libgirepository1.0-dev</p> </li> </ul> <p>Examples:</p> <pre><code># show the status of vpn service\n# left click to start, right click to stop\nsystemd vpn {\n    unit = 'vpn.service'\n    on_click 1 = 'exec sudo systemctl start vpn'\n    on_click 3 = 'exec sudo systemctl stop vpn'\n}\n</code></pre> <p>author Adrian Lopez &lt;adrianlzt@gmail.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#systemd_suspend_inhibitor","title":"systemd_suspend_inhibitor","text":"<p>Turn on and off systemd suspend inhibitor.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>format</code> display format for this module     (default '[\\?color=state SUSPEND [\\?if=state OFF|ON]]')</p> </li> <li> <p><code>lock_types</code> specify state to inhibit, comma separated list     https://www.freedesktop.org/wiki/Software/systemd/inhibit/     (default ['handle-lid-switch', 'idle', 'sleep'])</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(True, 'bad'), (False, 'good')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{state}</code> systemd suspend inhibitor state, eg True, False</li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>author Cyrinux https://github.com/cyrinux</p> <p>license BSD</p>"},{"location":"user-guide/modules/#taskwarrior","title":"taskwarrior","text":"<p>Display tasks currently running in taskwarrior.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>filter</code> specify one or more criteria to use (default 'status:pending')</p> </li> <li> <p><code>format</code> display format for this module (default '{descriptions}')</p> </li> <li> <p><code>report</code> report to export, for TaskWarrior 2.6.0 and above (default '')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{descriptions}</code> descriptions of active tasks</p> </li> <li> <p><code>{tasks}</code> number of active tasks</p> </li> </ul> <p>Requires     task: https://taskwarrior.org/download/</p> <p>author James Smith https://jazmit.github.io</p> <p>license BSD</p>"},{"location":"user-guide/modules/#thunderbird_todos","title":"thunderbird_todos","text":"<p>Display number of todos and more for Thunderbird.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 60)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_todo}')</p> </li> <li> <p><code>format_datetime</code> specify strftime formatting to use (default {})</p> </li> <li> <p><code>format_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>format_todo</code> display format for todos     (default '\\?if=!todo_completed {title}')</p> </li> <li> <p><code>profile</code> specify a profile path, otherwise first available profile     eg '~/.thunderbird/abcd1234.default' (default None)</p> </li> <li> <p><code>sort</code> specify a tuple, eg ('placeholder_name', reverse_boolean)     to sort by; excluding placeholder indexes (default ())</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{todo_total}</code>        eg 5</p> </li> <li> <p><code>{todo_completed}</code>    eg 2</p> </li> <li> <p><code>{todo_incompleted}</code>  eg 3</p> </li> <li> <p><code>{format_todo}</code>       format for todos</p> </li> </ul> <p>format_todo placeholders:</p> <ul> <li> <p><code>{index_total}</code>       eg 1, 2, 3</p> </li> <li> <p><code>{index_completed}</code>   eg 1, 2, 3</p> </li> <li> <p><code>{index_incompleted}</code> eg 1, 2, 3</p> </li> <li> <p><code>{alarm_last_ack}</code>    eg None, 1513291952000000</p> </li> <li> <p><code>{cal_id}</code>            eg 966bd855-5e71-4168-8072-c98f244ed825</p> </li> <li> <p><code>{flags}</code>             eg 4, 276</p> </li> <li> <p><code>{ical_status}</code>       eg None, IN-PROCESS, COMPLETED</p> </li> <li> <p><code>{id}</code>                eg 87e9bfc9-eaad-4aa6-ad5f-adbf6d7a11a5</p> </li> <li> <p><code>{last_modified}</code>     eg 1513276147000000</p> </li> <li> <p><code>{offline_journal}</code>   eg None</p> </li> <li> <p><code>{priority}</code>          eg None, # None=None, 0=None, 1=High, 5=Normal, 9=Low</p> </li> <li> <p><code>{privacy}</code>           eg None, CONFIDENTIAL</p> </li> <li> <p><code>{recurrence_id}</code>     eg None</p> </li> <li> <p><code>{recurrence_id_tz}</code>  eg None, UTC</p> </li> <li> <p><code>{time_created}</code>      eg 1513276147000000</p> </li> <li> <p><code>{title}</code>             eg New Task</p> </li> <li> <p><code>{todo_complete}</code>     eg None</p> </li> <li> <p><code>{todo_completed}</code>    eg None, 1513281528000000</p> </li> <li> <p><code>{todo_completed_tz}</code> eg None, UTC</p> </li> <li> <p><code>{todo_due}</code>          eg None, 1513292400000000</p> </li> <li> <p><code>{todo_due_tz}</code>       eg None, America/Chicago</p> </li> <li> <p><code>{todo_entry}</code>        eg None, 1513292400000000</p> </li> <li> <p><code>{todo_entry_tz}</code>     eg None, America/Chicago</p> </li> <li> <p><code>{todo_stamp}</code>        eg 1513276147000000</p> </li> </ul> <p>format_datetime placeholders:     KEY: alarm_last_ack, last_modified, time_created, todo,     todo_completed, todo_entry, todo_stamp     VALUE: % strftime characters to be translated, eg '%b %d' ----&gt; 'Dec 14'     SEE EXAMPLE BELOW: \"show incompleted titles with last modified time\"</p> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>thunderbird</code> standalone mail and news reader</li> </ul> <p>Examples:</p> <pre><code># show number of incompleted titles\nthunderbird_todos {\n    format = '{todo_incompleted} incompleted todos'\n}\n\n# show rainbow number of incompleted titles\nthunderbird_todos {\n    format = '\\?color=todo_incompleted {todo_incompleted} todos'\n    thresholds = [\n        (1, '#bababa'), (2, '#ffb3ba'), (3, '#ffdfba'), (4, '#ffffba'),\n        (5, '#baefba'), (6, '#baffc9'), (7, '#bae1ff'), (8, '#bab3ff')\n    ]\n}\n\n# show rainbow incompleted titles\nthunderbird_todos {\n    format_todo = '\\?if=!todo_completed&amp;color=index_incompleted {title}'\n    thresholds = [\n        (1, '#bababa'), (2, '#ffb3ba'), (3, '#ffdfba'), (4, '#ffffba'),\n        (5, '#baefba'), (6, '#baffc9'), (7, '#bae1ff'), (8, '#bab3ff')\n    ]\n}\n\n# show incompleted titles with last modified time\nthunderbird_todos {\n    format_todo = '\\?if=!todo_completed {title} {last_modified}'\n    format_datetime = {\n        'last_modified': '\\?color=degraded last modified %-I:%M%P'\n    }\n}\n\n# show 'No todos'\nthunderbird_todos {\n    format = '{format_todo}|No todos'\n}\n\n# show completed titles and incompleted titles\nthunderbird_todos {\n    format_todo = '\\?if=todo_completed&amp;color=good {title}|\\?color=bad {title}'\n}\n\n# make todo blocks\nthunderbird_todos {\n    format = 'TODO {format_todo}'\n    format_todo = '\\?if=todo_completed&amp;color=good \u25b0|\\?color=bad \u25b0'\n    format_separator = ''\n}\n\n# display incompleted titles with any priority\nthunderbird_todos {\n    format_todo = '\\?if=!todo_completed [\\?if=priority&gt;0 {title}]'\n}\n\n# colorize titles based on priorities\nthunderbird_todos {\n    format_todo = '\\?if=!todo_completed [\\?color=priority {title}]'\n    thresholds = [(0, None), (1, 'red'), (5, None), (9, 'deepskyblue')]\n}\n\n# sort todos\nthunderbird_todos {\n    sort = ('last_modified', True) # sort by modified time: recent first\n    sort = ('priority', True)      # sort by priority: high to low\n    sort = ('title', False)        # sort by title: ABC to abc\n}\n\n# add your snippets here\nthunderbird_todos {\n    format = '...'\n}\n</code></pre> <p>author mrt-prodz, lasers</p>"},{"location":"user-guide/modules/#timer","title":"timer","text":"<p>A simple countdown timer.</p> <p>This is a very basic countdown timer.  You can change the timer length as well as pausing, restarting and resetting it.  Currently this is more of a demo of a composite.</p> <p>Each part of the timer can be changed independently hours, minutes, seconds using mouse buttons 4 and 5 (scroll wheel). Button 1 starts/pauses the countdown. Button 2 resets timer.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>format</code> display format for this module (default 'Timer {timer}')</p> </li> <li> <p><code>sound</code> play sound file path when the timer ends (default None)</p> </li> <li> <p><code>time</code> number of seconds to start countdown with (default 60)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{timer}</code> display hours:minutes:seconds</li> </ul> <p>author tobes</p>"},{"location":"user-guide/modules/#timewarrior","title":"timewarrior","text":"<p>Track your time with Timewarrior.</p> <p>Timewarrior is a time tracking utility that offers simple stopwatch features as well as sophisticated calendar-base backfill, along with flexible reporting. See https://taskwarrior.org/docs/timewarrior for more information.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module, otherwise auto     (default None)</p> </li> <li> <p><code>filter</code> specify interval and/or tag to filter (default '1day')</p> </li> <li> <p><code>format</code> display format for this module     (default '[Timew {format_time}]|No Timew')</p> </li> <li> <p><code>format_datetime</code> specify strftime characters to format (default {})</p> </li> <li> <p><code>format_duration</code> display format for time duration     (default '\\?not_zero [{days}d ][{hours}:]{minutes}:{seconds}')</p> </li> <li> <p><code>format_tag</code> display format for tags (default '\\?color=state_tag {name}')</p> </li> <li> <p><code>format_tag_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>format_time</code> display format for tracked times     (default '[\\?color=state_time [{format_tag} ]{format_duration}]')</p> </li> <li> <p><code>format_time_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default {'state_tag': [(0, 'darkgray'), (1, 'darkgray')],     'state_time': [(0, 'darkgray'), (1, 'degraded')]})</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{format_time}</code> format for tracked times</p> </li> <li> <p><code>{tracking}</code> time tracking state, eg False, True</p> </li> </ul> <p>format_time placeholders:</p> <ul> <li> <p><code>{state}</code> time tracking state, eg False, True</p> </li> <li> <p><code>{format_tag}</code> format for tags</p> </li> <li> <p><code>{format_duration}</code> format for time duration</p> </li> <li> <p><code>{start}</code> start date, eg 20171021T010203Z</p> </li> <li> <p><code>{end}</code> end date, eg 20171021T010203Z</p> </li> </ul> <p>format_tag placeholders:</p> <ul> <li><code>{name}</code> tag name, eg gaming, studying, gardening</li> </ul> <p>format_datetime placeholders:</p> <ul> <li> <p><code>key</code> start, end</p> </li> <li> <p><code>value</code> strftime characters, eg '%b %d' ----&gt; 'Oct 06'</p> </li> </ul> <p>format_duration placeholders:</p> <ul> <li> <p><code>{days}</code> days</p> </li> <li> <p><code>{hours}</code> hours</p> </li> <li> <p><code>{minutes}</code> minutes</p> </li> <li> <p><code>{seconds}</code> seconds</p> </li> </ul> <p>Color thresholds:</p> <ul> <li> <p><code>format_time</code>     state_time: print color based on the state of time tracking</p> </li> <li> <p><code>format_tag</code>     state_tag:  print color based on the state of time tracking</p> </li> </ul> <p>Requires:</p> <ul> <li><code>timew</code> feature-rich time tracking utility</li> </ul> <p>Recommendations:     We can refresh a module using <code>py3-cmd</code> command.     An excellent example of using this command in a function.</p> <pre><code>```\n~/.{bash,zsh}{rc,_profile}\n---------------------------\nfunction timew () {\n    command timew \"$@\" &amp;&amp; py3-cmd refresh timewarrior\n}\n```\n\nWith this, you can consider giving `cache_timeout` a much larger number,\neg 3600 (an hour), so the module does not need to be updated that often.\n</code></pre> <p>Examples:</p> <pre><code># show times matching the filter, see documentation for more filters\ntimewarrior {\n    filter = ':day'           # filter times not in 24 hours of current day\n    filter = '12hours'        # filter times not in 12 hours of current time\n    filter = '5min'           # filter times not in 5 minutes of current time\n    filter = '1sec'           # filter times not in 1 second of current time\n    filter = '5pm to 11:59pm  # filter times not in 5pm to 11:59pm range\n}\n\n# intervals\ntimewarrior {\n    # if you are printing other intervals too with '1day' filter or so,\n    # then you may want to add this too for better bar readability\n    format_time_separator = ', '\n\n    # you also can change the thresholds with different colors\n    thresholds = {\n        'state_tag': [(0, 'darkgray'), (1, 'degraded')],\n        'state_time': [(0, 'darkgray'), (1, 'degraded')],\n    }\n}\n\n# cache_timeout\ntimewarrior {\n    # auto refresh every 10 seconds when there is no active time tracking\n    # auto refresh every second when there is active time tracking\n    cache_timeout = None\n\n    # refresh every minute when there is no active time tracking\n    # refresh every second when there is active time tracking\n    cache_timeout = 60\n\n    # explicit refresh every 20 seconds when there is no active time tracking\n    # explicit refresh every 5 seconds when there is active time tracking\n    cache_timeout = (20, 5)\n}\n\n# add your snippets here\ntimewarrior {\n    format = \"...\"\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#tor_rate","title":"tor_rate","text":"<p>Display transfer rates of a tor instance.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> An integer specifying the cache life-time of the modules     output in seconds (default 2)</p> </li> <li> <p><code>control_address</code> The address on which the Tor daemon listens for control     connections (default \"127.0.0.1\")</p> </li> <li> <p><code>control_password</code> The password to use for the Tor control connection     (default None)</p> </li> <li> <p><code>control_port</code> The port on which the Tor daemon listens for control     connections (default 9051)</p> </li> <li> <p><code>format</code> A string describing the output format for the module     (default \"\u2191 {up} \u2193 {down}\")</p> </li> <li> <p><code>format_value</code> A string describing how to format the transfer rates     (default \"[\\?min_length=12 {rate:.1f} {unit}]\")</p> </li> <li> <p><code>hide_socket_errors</code> Hide errors connecting to Tor control socket     (default False)</p> </li> <li> <p><code>rate_unit</code> The unit to use for the transfer rates     (default \"B/s\")</p> </li> <li> <p><code>si_units</code> A boolean value selecting whether or not to use SI units     (default False)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{down}</code> The incoming transfer rate</p> </li> <li> <p><code>{up}</code> The outgoing transfer rate</p> </li> </ul> <p>format_value placeholders:</p> <ul> <li> <p><code>{rate}</code> The current transfer-rate's value</p> </li> <li> <p><code>{unit}</code> The current transfer-rate's unit</p> </li> </ul> <p>Requires:</p> <ul> <li><code>stem</code> python controller library for tor https://pypi.org/project/stem</li> </ul> <p>Examples:</p> <pre><code>tor_rate {\n    cache_timeout = 10\n    format = \"IN: {down} | OUT: {up}\"\n    control_port = 1337\n    control_password = \"TertiaryAdjunctOfUnimatrix01\"\n    si_units = True\n}\n</code></pre> <p>author Felix Morgner &lt;felix.morgner@gmail.com&gt;</p> <p>license 3-clause-BSD</p>"},{"location":"user-guide/modules/#transmission","title":"transmission","text":"<p>Display number of torrents and more.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>arguments</code> additional arguments for the transmission-remote (default None)</p> </li> <li> <p><code>button_next</code> mouse button to switch next torrent (default None)</p> </li> <li> <p><code>button_previous</code> mouse button to switch previous torrent (default None)</p> </li> <li> <p><code>button_run</code> mouse button to run the command on current torrent     (default [(1, '--start'), (2, '--verify'), (3, '--stop')])</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 20)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_torrent}')</p> </li> <li> <p><code>format_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>format_torrent</code> display format for torrents     (default '[\\?if=is_focused&amp;color=bad X] {status} {id} {name} {done}%')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{torrent}</code> number of torrents</p> </li> <li> <p><code>{format_torrent}</code> format for torrents</p> </li> <li> <p><code>{up}</code> summary up traffic</p> </li> <li> <p><code>{down}</code> summary down traffic</p> </li> <li> <p><code>{have}</code> summary download</p> </li> </ul> <p>format_torrent placeholders:</p> <ul> <li> <p><code>{index}</code> torrent index, eg 1</p> </li> <li> <p><code>{id}</code> torrent id, eg 2</p> </li> <li> <p><code>{done}</code> torrent percent, eg 100%</p> </li> <li> <p><code>{have}</code> torrent download, 253 KB</p> </li> <li> <p><code>{eta}</code> torrent estimated time, eg Done, 1 min, etc</p> </li> <li> <p><code>{up}</code> torrent up traffic</p> </li> <li> <p><code>{down}</code> torrent down traffic</p> </li> <li> <p><code>{ratio}</code> torrent seed ratio</p> </li> <li> <p><code>{status}</code> torrent status, eg Idle, Downloading, Stopped, Verifying, etc</p> </li> <li> <p><code>{name}</code> torrent name, eg py3status-3.8.tar.gz</p> </li> </ul> <p>Color options:</p> <ul> <li><code>color_bad</code> current torrent</li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>transmission-cli</code>     fast, easy, and free bittorrent client (cli tools, daemon, web client)</li> </ul> <p>Examples:</p> <pre><code># add arguments\ntransmission {\n    # We use 'transmission-remote --list'\n    # See `transmission-remote --help' for more information.\n    # Not all of the arguments will work here.\n    arguments = '--auth username:password --port 9091'\n}\n# see 'man transmission-remote' for more buttons\ntransmission {\n    button_run = [\n        (1, '--start'),\n        (2, '--verify'),\n        (3, '--stop'),\n        (8, '--remove'),\n        (9, '--exit'),\n    ]\n}\n\n# open web-based transmission client\ntransmission {\n    on_click 1 = 'exec xdg-open http://username:password@localhost:9091'\n}\n\n# add buttons\ntransmission {\n    button_next = 5\n    button_previous = 4\n}\n\n# see 'man transmission-remote' for more buttons\ntransmission {\n    # specify a script to run when a torrent finishes\n    on_click 9 = 'exec transmission-remote --torrent-done-script ~/file'\n\n    # use the alternate limits?\n    on_click 9 = 'exec transmission-remote --alt-speed'\n    on_click 10 = 'exec transmission-remote --no-alt-speed'\n}\n\n# show summary statistcs - up, down, have\ntransmission {\n    format = '{format_torrent}'\n    format += '[\\?color=#ffccff [\\?not_zero  Up:{up}]'\n    format += '[\\?not_zero  Down:{down}][\\?not_zero  Have:{have}]]'\n}\n\n# add a format that sucks less than the default plain format\ntransmission {\n    format_torrent = '[\\?if=is_focused&amp;color=bad X ]'\n    format_torrent += '[[\\?if=status=Idle&amp;color=degraded {status}]'\n    format_torrent += '|[\\?if=status=Stopped&amp;color=bad {status}]'\n    format_torrent += '|[\\?if=status=Downloading&amp;color=good {status}]'\n    format_torrent += '|[\\?if=status=Verifying&amp;color=good {status}]'\n    format_torrent += '|\\?color=degraded {status}]'\n    format_torrent += ' {name} [\\?color=done {done}]'\n}\n\n# show percent thresholds\ntransmission {\n    format_torrent = '{name} [\\?color=done {done}]'\n    thresholds = [(0, 'bad'), (1, 'degraded'), (100, 'good')]\n}\n\n# download the rainbow\ntransmission {\n    format_torrent = '[\\?if=is_focused&amp;color=bad X ]'\n    format_torrent += '{status} [\\?color=index {name}] [\\?color=done {done}%]'\n    thresholds = {\n        'done': [(0, '#ffb3ba'), (1, '#ffffba'), (100, '#baefba')],\n        'index': [\n            (1, '#ffb3ba'), (2, '#ffdfba'), (3, '#ffffba'),\n            (4, '#baefba'), (5, '#baffc9'), (6, '#bae1ff'),\n            (7, '#bab3ff')\n        ]\n    }\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#twitch","title":"twitch","text":"<p>Display if a Twitch channel is currently streaming or not.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds     (default 60)</p> </li> <li> <p><code>client_id</code> Your client id. Create your own key at https://dev.twitch.tv     (default None)</p> </li> <li> <p><code>client_secret</code> Your client secret.     (default None)</p> </li> <li> <p><code>format</code> Display format when online     (default \"{display_name} is live!\")</p> </li> <li> <p><code>format_offline</code> Display format when offline     (default \"{display_name} is offline.\")</p> </li> <li> <p><code>format_tag</code> Tag formatting     (default \"{name}\")</p> </li> <li> <p><code>locales</code> List of locales to try for tag translations, eg. [\"cs-cz\", \"en-uk\", \"en-us\"]. If none is specified, auto-detect from environment, with a fallback to \"en-us\".     (default [])</p> </li> <li> <p><code>stream_name</code> name of streamer(twitch.tv/&lt;stream_name&gt;)     (default None)</p> </li> <li> <p><code>tag_delimiter</code> string to write between tags     (default \" \")</p> </li> <li> <p><code>trace</code> enable trace level debugging     (default False)</p> </li> </ul> <p>Stream format placeholders:</p> <ul> <li> <p><code>{display_name}</code> User's display name., eg Ultrabug</p> </li> <li> <p><code>{is_streaming}</code> (bool) True if streaming, fields prefixed with stream_ are available.</p> </li> <li> <p><code>{tags}</code> List of tags</p> </li> <li> <p><code>{user_id}</code> User's id</p> </li> <li> <p><code>{user_login}</code> User's login name, eg xisumavoid</p> </li> <li> <p><code>{user_display_name}</code> (same as {display_name})</p> </li> <li> <p><code>{user_type}</code> \"staff\", \"admin\", \"global_mod\", or \"\"</p> </li> <li> <p><code>{user_broadcaster_type}</code> \"partner\", \"affiliate\", or \"\".</p> </li> <li> <p><code>{user_description}</code> User's channel description.</p> </li> <li> <p><code>{user_profile_image_url}</code> URL of the user's profile image.</p> </li> <li> <p><code>{user_offline_image_url}</code> URL of the user's offline image.</p> </li> <li> <p><code>{user_view_count}</code> Total number of views of the user's channel.</p> </li> <li> <p><code>{user_created_at}</code> Date when the user was created.</p> </li> <li> <p><code>{stream_id}</code> Stream ID.</p> </li> <li> <p><code>{stream_game_id}</code> ID of the game being played on the stream.</p> </li> <li> <p><code>{stream_game_name}</code> Name of the game being played.</p> </li> <li> <p><code>{stream_title}</code> Stream title.</p> </li> <li> <p><code>{stream_viewer_count}</code> Number of viewers watching the stream at the time of last update.</p> </li> <li> <p><code>{stream_started_at}</code> Stream start UTC timestamp.</p> </li> <li> <p><code>{stream_language}</code> Stream language. A language value is either the ISO 639-1 two-letter code or \u201cother\u201d.</p> </li> <li> <p><code>{stream_thumbnail_url}</code> Thumbnail URL of the stream. All image URLs have variable width and height. You can replace {width} and {height} with any values to get that size image</p> </li> <li> <p><code>{stream_is_mature}</code> Indicates if the broadcaster has specified their channel contains mature content that may be inappropriate for younger audiences.</p> </li> <li> <p><code>{stream_runtime}</code> (string) Stream runtime as a human readable, non-localized string. eg \"3h 5m\"</p> </li> <li> <p><code>{stream_runtime_seconds}</code> (int) Stream runtime in seconds.</p> </li> </ul> <p>Tag format placeholders: (see locales)     {name} The tag name     {desc} The tag description</p> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Stream offline</p> </li> <li> <p><code>color_good</code> Stream is live</p> </li> </ul> <p>Client ID:     Example settings when creating your app at https://dev.twitch.tv</p> <pre><code>Name: &amp;lt;your_name&amp;gt;_py3status\nOAuth Redirect URI: https://localhost\nApplication Category: Application Integration\n</code></pre> <p>author Alex Caswell horatioesf@virginmedia.com</p> <p>author Julian Picht julian.picht@gmail.com</p> <p>license BSD</p>"},{"location":"user-guide/modules/#uname","title":"uname","text":"<p>Display system information.</p> <p>Configuration parameters:</p> <ul> <li><code>format</code> display format for this module (default '{system} {release}')</li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{system}</code> system/OS name, e.g. 'Linux', 'Windows', or 'Java'</p> </li> <li> <p><code>{node}</code> computer\u2019s network name (may not be fully qualified!)</p> </li> <li> <p><code>{release}</code> system\u2019s release, e.g. '2.2.0' or 'NT'</p> </li> <li> <p><code>{version}</code> system\u2019s release version, e.g. '#3 on degas'</p> </li> <li> <p><code>{machine}</code> machine type, e.g. 'x86_64'</p> </li> <li> <p><code>{processor}</code> the (real) processor name, e.g. 'amdk6'</p> </li> </ul> <p>author ultrabug (inspired by ndalliard)</p>"},{"location":"user-guide/modules/#uptime","title":"uptime","text":"<p>Display system uptime.</p> <p>Configuration parameters:</p> <ul> <li><code>format</code> display format for this module     (default 'up {days} days {hours} hours {minutes} minutes')</li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{decades}</code> decades</p> </li> <li> <p><code>{years}</code>   years</p> </li> <li> <p><code>{weeks}</code>   weeks</p> </li> <li> <p><code>{days}</code>    days</p> </li> <li> <p><code>{hours}</code>   hours</p> </li> <li> <p><code>{minutes}</code> minutes</p> </li> <li> <p><code>{seconds}</code> seconds</p> <p>If you don't use a placeholder, its value will be carried over to the next placeholder. For example, an uptime of 1 hour 30 minutes will give you 90 if {minutes} or 1:30 if {hours}:{minutes}.</p> <p>You also can specify strftime characters to print system up since with or without placeholders. See <code>man strftime</code> for more information.</p> </li> </ul> <p>Examples:</p> <pre><code># show uptime without zeroes\nuptime {\n    format = 'up [\\?if=weeks {weeks} weeks ][\\?if=days {days} days ]\n        [\\?if=hours {hours} hours ][\\?if=minutes {minutes} minutes ]'\n}\n\n# show uptime in multiple formats using group module\ngroup uptime {\n    format = \"up {output}\"\n    uptime {\n        format = '[\\?if=weeks {weeks} weeks ][\\?if=days {days} days ]\n            [\\?if=hours {hours} hours ][\\?if=minutes {minutes} minutes]'\n    }\n    uptime {\n        format = '[\\?if=weeks {weeks}w ][\\?if=days {days}d ]\n            [\\?if=hours {hours}h ][\\?if=minutes {minutes}m]'\n    }\n    uptime {\n        format = '[\\?if=days {days}, ][\\?if=hours {hours}:]\n            [\\?if=minutes {minutes:02d}]'\n    }\n}\n\n# specify strftime characters to display system up since\nuptime {\n    format = \"{days}d {hours}:{minutes:02d}:{seconds:02d}\"\n    format += \", up since %Y-%m-%d %H:%M:%S\"\n}\n</code></pre> <p>author Alexis \"Horgix\" Chotard &lt;alexis.horgix.chotard@gmail.com&gt;, Volkov \"BabyWolf\" Semjon &lt;Volkov.BabyWolf.Semjon@gmail.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#usbguard","title":"usbguard","text":"<p>Allow or Reject newly plugged USB devices using USBGuard.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>format</code> display format for this module     (default '{format_device}')</p> </li> <li> <p><code>format_button_allow</code> display format for allow button filter     (default '[Allow]')</p> </li> <li> <p><code>format_button_reject</code> display format for reject button filter     (default '[Reject]')</p> </li> <li> <p><code>format_device</code> display format for USB devices     (default '{format_button_reject} [{name}|{usb_id}] {format_button_allow}')</p> </li> <li> <p><code>format_device_separator</code> show separator if more than one (default ' ')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{device}</code>                  number of USB devices</p> </li> <li> <p><code>{format_device}</code>           format for USB devices</p> </li> </ul> <p>format_device:</p> <ul> <li> <p><code>{format_button_allow}</code>     button to allow the device</p> </li> <li> <p><code>{format_button_reject}</code>    button to reject the device</p> </li> <li> <p><code>{id}</code>                      eg 1, 2, 5, 6, 7, 22, 23, 33</p> </li> <li> <p><code>{policy}</code>                  eg allow, block, reject</p> </li> <li> <p><code>{usb_id}</code>                  eg 054c:0268</p> </li> <li> <p><code>{name}</code>                    eg Poker II, PLAYSTATION(R)3 Controller</p> </li> <li> <p><code>{serial}</code>                  eg 0000:00:00.0</p> </li> <li> <p><code>{port}</code>                    eg usb1, usb2, usb3, 1-1, 4-1.2.1</p> </li> <li> <p><code>{interface}</code>               eg 00:00:00:00 00:00:00 00:00:00</p> </li> <li> <p><code>{hash}</code>                    eg ihYz60+8pxZBi/cm+Q/4Ibrsyyzq/iZ9xtMDAh53sng</p> </li> <li> <p><code>{parent_hash}</code>             eg npSDT1xuEIOSLNt2RT2EbFrE8XRZoV29t1n7kg6GxXg</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>python-gobject</code> Python Bindings for GLib/GObject/GIO/GTK+</p> </li> <li> <p><code>usbguard</code> USB device authorization policy framework</p> </li> </ul> <p>author @cyrinux, @maximbaz</p> <p>license BSD</p>"},{"location":"user-guide/modules/#vnstat","title":"vnstat","text":"<p>Display vnstat statistics.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 180)</p> </li> <li> <p><code>format</code> display format for this module (default '{total}')</p> </li> <li> <p><code>initial_multi</code> set to 1 to disable first bytes     (default 1024)</p> </li> <li> <p><code>left_align</code> (default 0)</p> </li> <li> <p><code>multiplier_top</code> if value is greater, divide it with unit_multi and get     next unit from units (default 1024)</p> </li> <li> <p><code>precision</code> (default 1)</p> </li> <li> <p><code>statistics_type</code> d for daily, m for monthly (default 'd')</p> </li> <li> <p><code>thresholds</code> thresholds to use for color changes (default [])</p> </li> <li> <p><code>unit_multi</code> value to divide if rate is greater than multiplier_top     (default 1024)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{down}</code> download</p> </li> <li> <p><code>{total}</code> total</p> </li> <li> <p><code>{up}</code> upload</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li><code>vnstat</code> a console-based network traffic monitor</li> </ul> <p>Examples:</p> <pre><code># colorize thresholds\nvnstat {\n    format = '[\\?color=total {total}]'\n    thresholds = [\n        (838860800, \"degraded\"),  # 838860800 B -&gt; 800 MiB\n        (943718400, \"bad\"),       # 943718400 B -&gt; 900 MiB\n    ]\n}\n</code></pre> <p>author shadowprince</p> <p>license Eclipse Public License</p>"},{"location":"user-guide/modules/#volume_status","title":"volume_status","text":"<p>Volume control.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>blocks</code> a string, where each character represents a volume level     (default \"_\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\")</p> </li> <li> <p><code>button_down</code> button to decrease volume (default 5)</p> </li> <li> <p><code>button_mute</code> button to toggle mute (default 1)</p> </li> <li> <p><code>button_up</code> button to increase volume (default 4)</p> </li> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds.     (default 10)</p> </li> <li> <p><code>card</code> Card to use. amixer supports this. (default None)</p> </li> <li> <p><code>channel</code> channel to track. Default value is backend dependent.     (default None)</p> </li> <li> <p><code>command</code> Choose between \"amixer\", \"pamixer\" or \"pactl\".     If None, try to guess based on available commands.     (default None)</p> </li> <li> <p><code>device</code> Device to use. Defaults value is backend dependent.     \"aplay -L\", \"pactl list sinks short\", \"pamixer --list-sinks\"     (default None)</p> </li> <li> <p><code>format</code> Format of the output.     (default '[\\?if=is_input \ud83d\ude2e|\u266a]: {percentage}%')</p> </li> <li> <p><code>format_muted</code> Format of the output when the volume is muted.     (default '[\\?if=is_input \ud83d\ude36|\u266a]: muted')</p> </li> <li> <p><code>is_input</code> Is this an input device or an output device?     (default False)</p> </li> <li> <p><code>max_volume</code> Allow the volume to be increased past 100% if available.     pactl and pamixer supports this. (default 120)</p> </li> <li> <p><code>thresholds</code> Threshold for percent volume.     (default [(0, 'bad'), (20, 'degraded'), (50, 'good')])</p> </li> <li> <p><code>volume_delta</code> Percentage amount that the volume is increased or     decreased by when volume buttons pressed.     (default 5)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{icon}</code> Character representing the volume level,     as defined by the 'blocks'</p> </li> <li> <p><code>{percentage}</code> Percentage volume</p> </li> </ul> <p>Color options:</p> <ul> <li><code>color_muted</code> Volume is muted, if not supplied color_bad is used     if set to <code>None</code> then the threshold color will be used.</li> </ul> <p>Requires:</p> <ul> <li> <p><code>alsa-utils</code> an alternative implementation of linux sound support</p> </li> <li> <p><code>pamixer</code> pulseaudio command-line mixer like amixer</p> </li> </ul> <p>Notes:     If you are changing volume state by external scripts etc and     want to refresh the module quicker than the i3status interval,     send a USR1 signal to py3status in the keybinding.     Example: killall -s USR1 py3status</p> <p>Examples:</p> <pre><code># Set thresholds to rainbow colors\nvolume_status {\n    thresholds = [\n        (0, \"#FF0000\"),\n        (10, \"#E2571E\"),\n        (20, \"#FF7F00\"),\n        (30, \"#FFFF00\"),\n        (40, \"#00FF00\"),\n        (50, \"#96BF33\"),\n        (60, \"#0000FF\"),\n        (70, \"#4B0082\"),\n        (80, \"#8B00FF\"),\n        (90, \"#FFFFFF\")\n    ]\n}\n</code></pre> <p>author &lt;Jan T&gt; &lt;jans.tuomi@gmail.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#vpn_status","title":"vpn_status","text":"<p>Drop-in replacement for i3status run_watch VPN module.</p> <p>Expands on the i3status module by displaying the name of the connected vpn using pydbus. Asynchronously updates on dbus signals unless check_pid is True.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often to refresh in seconds when check_pid is True.     (default 10)</p> </li> <li> <p><code>check_pid</code> If True, act just like the default i3status module.     (default False)</p> </li> <li> <p><code>format</code> Format of the output.     (default 'VPN: {format_vpn}|VPN: no')</p> </li> <li> <p><code>format_vpn</code> display format for vpns (default '{name}')</p> </li> <li> <p><code>format_vpn_separator</code> show separator if more than one VPN (default ', ')</p> </li> <li> <p><code>pidfile</code> Same as i3status pidfile, checked when check_pid is True.     (default '/sys/class/net/vpn0/dev_id')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{format_vpn}</code> format for VPNs</li> </ul> <p>Format VPN placeholders:</p> <ul> <li> <p><code>{name}</code> The name and/or status of the VPN.</p> </li> <li> <p><code>{ipv4}</code> The IPv4 address of the VPN</p> </li> <li> <p><code>{ipv6}</code> The IPv6 address of the VPN</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> VPN connected</p> </li> <li> <p><code>color_good</code> VPN down</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>dbus-python</code> to interact with dbus</p> </li> <li> <p><code>pygobject</code> which in turn requires libcairo2-dev, libgirepository1.0-dev</p> </li> </ul> <p>author Nathan Smith &lt;nathan AT praisetopia.org&gt;</p>"},{"location":"user-guide/modules/#wanda_the_fish","title":"wanda_the_fish","text":"<p>Display a fortune-telling, swimming fish.</p> <p>Wanda has no use what-so-ever. It only takes up disk space and compilation time, and if loaded, it also takes up precious bar space, memory, and cpu cycles. Anybody found using it should be promptly sent for a psychiatric evaluation.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 0)</p> </li> <li> <p><code>format</code> display format for this module     (default '{nomotion}[{fortune} ]{wanda}{motion}')</p> </li> <li> <p><code>fortune_timeout</code> refresh interval for fortune (default 60)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{fortune}</code> one of many aphorisms or vague prophecies</p> </li> <li> <p><code>{wanda}</code> name of one of the most commonly kept freshwater aquarium fish</p> </li> <li> <p><code>{motion}</code> biologically propelled motion through a liquid medium</p> </li> <li> <p><code>{nomotion}</code> opposite behavior of motion to prevent modules from shifting</p> </li> </ul> <p>Optional:</p> <ul> <li><code>fortune-mod</code> the fortune cookie program from bsd games</li> </ul> <p>Examples:</p> <pre><code># disable motions when not in use\nwanda_the_fish {\n    format = '[\\?if=fortune {nomotion}][{fortune} ]'\n    format += '{wanda}[\\?if=fortune {motion}]'\n}\n\n# no updates, no motions, yes fortunes, you click\nwanda_the_fish {\n    format = '[{fortune} ]{wanda}'\n    cache_timeout = -1\n}\n\n# wanda moves, fortunes stays\nwanda_the_fish {\n    format = '[{fortune} ]{nomotion}{wanda}{motion}'\n}\n\n# wanda is swimming too fast, slow down wanda\nwanda_the_fish {\n    cache_timeout = 2\n}\n</code></pre> <p>author lasers</p>"},{"location":"user-guide/modules/#watson","title":"watson","text":"<p>Display the current status of the watson time-tracking tool.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> Number of seconds before state is re-read     (default 10)</p> </li> <li> <p><code>format</code> The format for module output.     (default 'Project {project}{tag_str} started')</p> </li> <li> <p><code>state_file</code> Path to the file which watson uses to track its own state     (default '~/.config/watson/state')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{project}</code> Name of the active project</p> </li> <li> <p><code>{tag_str}</code> String-representation of the list of active tags</p> </li> </ul> <p>Requires:</p> <ul> <li><code>https://github.com/TailorDev/Watson</code> commandline time tracking tool</li> </ul> <p>author Markus Sommer (https://github.com/CryptoCopter)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#weather_owm","title":"weather_owm","text":"<p>Display ultimately customizable weather.</p> <p>This module allows you to specify an icon for nearly every weather scenario imaginable. The default configuration options lump many of the icons into a few groups, and due to the limitations of UTF-8, this is really as expressive as it gets.</p> <p>This module uses OpenWeatherMap API (https://openweathermap.org).</p> <p>Requires a 3.0 API key for OpenWeatherMap (OWM) with a subscription which this module will try as hard as it can to stay under the free tier limit.</p> <p>Setting <code>location</code> or <code>city</code> allows you to specify the location for the weather you want displaying.</p> <p>I would highly suggest you install an additional font, such as the incredible (and free!) Weather Icons font (https://erikflowers.github.io/weather-icons), which has icons for most weather scenarios. But, this will still work with the i3bar default font, Deja Vu Sans Mono font, which has Unicode support. You can see the (limited) weather icon support within Unicode in the defaults.</p> <p>For more information, see the documentation (https://openweathermap.org/weather-conditions) on what weather conditions are supported. See the configuration options for how to specify each weather icon.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>api_key</code> Your OpenWeatherMap API key     See https://openweathermap.org/appid. Required!     (default None)</p> </li> <li> <p><code>cache_timeout</code> The time between API polling in seconds     It is recommended to keep this at a higher value to avoid rate     limiting with the API's.     (default 1800)</p> </li> <li> <p><code>city</code> The city to display for location information. If set,     implicitly disables the Geo API for determining city name.     (default None)</p> </li> <li> <p><code>country</code> The country to display for location information. If set,     implicitly disables the Geo API for determining country name.     (default None)</p> </li> <li> <p><code>forecast_days</code> Number of days to include in the forecast, including today     (regardless of the 'forecast_include_today' flag)     (default 3)</p> </li> <li> <p><code>forecast_include_today</code> Include today in the forecast? (Boolean)     (default False)</p> </li> <li> <p><code>format</code> How to display the weather     This also dictates the type of forecast. The placeholders here refer to     the format_[...] variables found below.     Available placeholders:     icon, city, clouds, rain, snow, wind, humidity, pressure,     temperature, sunrise, sunset, main, description, forecast     (default '{city} {icon} {temperature}[ {rain}], {description} {forecast}')</p> </li> <li> <p><code>format_clouds</code> Formatting for cloud coverage (percentage)     Available placeholders:     icon, coverage     (default '{icon} {coverage}%')</p> </li> <li> <p><code>format_forecast</code> Formatting for future forecasts     Available placeholders:     See 'format'     This is similar to the 'format' field, but contains information     for future weather. Notably, this does not include information about     sunrise or sunset times.     (default '{icon}')</p> </li> <li> <p><code>format_forecast_separator</code> Separator between entries in the forecast     (default ' ')</p> </li> <li> <p><code>format_humidity</code> Formatting for humidity (percentage)     Available placeholders:     icon, humidity     (default '{icon} {humidity}%')</p> </li> <li> <p><code>format_pressure</code> Formatting for atmospheric pressure     Available placeholders:     icon, pressure, sea_level     (default '{icon} {pressure} hPa')</p> </li> <li> <p><code>format_rain</code> Formatting for rain volume over the past 3 hours     Available placeholders:     icon, amount     (default '[\\?if=amount {icon} {amount:.0f} {unit}]')</p> </li> <li> <p><code>format_snow</code> Formatting for snow volume over the past 3 hours     Available placeholders:     icon, amount     (default '[\\?if=amount {icon} {amount:.0f} {unit}]')</p> </li> <li> <p><code>format_sunrise</code> Formatting for sunrise time     Note that this format accepts strftime/strptime placeholders to populate     the output with the time information.     Available placeholders:     icon     (default '{icon} %-I:%M %p')</p> </li> <li> <p><code>format_sunset</code> Formatting for sunset time     This format accepts strftime/strptime placeholders to populate the     output with the time information.     Available placeholders:     icon     (default '{icon} %-I:%M %p')</p> </li> <li> <p><code>format_temperature</code> Formatting for temperature     Available placeholders:     current, icon, max, min     (default '{icon} [\\?color=all {current:.0f}\u00b0{unit}]')</p> </li> <li> <p><code>format_wind</code> Formatting for wind degree and speed     The 'gust' option represents the speed of wind gusts in the wind unit.     Available placeholders:     icon, degree, speed, gust, direction     (default '[\\?if=speed {icon} {speed:.0f} {unit}]')</p> </li> <li> <p><code>icon_atmosphere</code> Icon for atmospheric conditions, like fog, smog, etc.     (default '\ud83c\udf2b')</p> </li> <li> <p><code>icon_cloud</code> Icon for clouds     (default '\u2601')</p> </li> <li> <p><code>icon_extreme</code> Icon for extreme weather     (default '\u26a0')</p> </li> <li> <p><code>icon_humidity</code> Icon for humidity     (default '\u25cf')</p> </li> <li> <p><code>icon_pressure</code> Icon for pressure     (default '\u25cc')</p> </li> <li> <p><code>icon_rain</code> Icon for rain     (default '\ud83c\udf27')</p> </li> <li> <p><code>icon_snow</code> Icon for snow     (default '\u2744')</p> </li> <li> <p><code>icon_sun</code> Icon for sunshine     (default '\u263c')</p> </li> <li> <p><code>icon_sunrise</code> Icon for sunrise     (default '\u21d1')</p> </li> <li> <p><code>icon_sunset</code> Icon for sunset     (default '\u21d3')</p> </li> <li> <p><code>icon_temperature</code> Icon for temperature     (default '\u25cb')</p> </li> <li> <p><code>icon_thunderstorm</code> Icon for thunderstorms     (default '\u26c8')</p> </li> <li> <p><code>icon_wind</code> Icon for wind or breeze     (default '\u2634')</p> </li> <li> <p><code>icons</code> A dictionary relating weather code to icon     See https://openweathermap.org/weather-conditions for a complete list     of supported icons. This will fall-back to the listed icon if there is     no specific icon present. However, options included here take precedent     over the above 'icon_{...}' options.     There are multiple ways to specify individual icons based on the id:</p> <ul> <li>Use the key '601' to reference the condition with id = 601 (snow)</li> <li>Use the key '230_232' to reference a span of conditions inclusive, in this case conditions (230, 231, 232) (thunderstorm with drizzle) (default None)</li> </ul> </li> <li> <p><code>lang</code> An ISO 639-1 code for your language (two letters)     (default 'en')</p> </li> <li> <p><code>location</code> A tuple of floats describing the desired weather location     The tuple should follow the form (latitude, longitude), and if set,     implicitly disables the Geo API for determining location.     (default None)</p> </li> <li> <p><code>thresholds</code> Configure temperature colors based on limits     The numbers specified inherit the unit of the temperature as configured.     The default below is intended for Fahrenheit. If the set value is empty     or None, the feature is disabled. You can specify this parameter using a     dictionary:</p> <ul> <li>Keys are names. You have the option of 'current', 'min', 'max', or 'all' to specify a threshold. The first three are tied to the various temperature values, the last sets the same threshold for all outputs. If both 'all' and one of the first three are set (lets say 'min' for this example), the threshold will default to be the value in 'min', not 'all'. This goes for any configuration</li> <li>The values are lists of pairs, with temperature (in the configured unit) as the first and the color as the second</li> <li>To use the thresholds color, place '\\?color=all' in the formatting string for temperature, replacing 'all' with any of the valid threshold names for different coloring effects</li> <li>To have smooth transitions between colors, consider setting the 'gradients' configuration parameter to 'True', either in the global configuration, or in the module configuration! (default {'all': [(-100, '#0FF'), (0, '#00F'), (50, '#0F0'), (150, '#FF0')]})</li> </ul> </li> <li> <p><code>unit_rain</code> Unit for rain fall     When specified, a unit may be any combination of upper and lower     case, such as 'Ft', and still be considered valid as long as it is in     the below options.     Options:     mm, cm, in     (default 'in')</p> </li> <li> <p><code>unit_snow</code> Unit for snow fall     Options:     mm, cm, in     (default 'in')</p> </li> <li> <p><code>unit_temperature</code> Unit for temperature     Options:     c, f, k     (default 'F')</p> </li> <li> <p><code>unit_wind</code> Unit for wind speed     Options:     fsec, msec, mph, kmh, knot     (default 'mph')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{icon}</code> The icon associated with a formatting section</p> </li> <li> <p><code>format_clouds</code></p> </li> <li> <p><code>{coverage}</code> Cloud coverage percentage</p> </li> <li> <p><code>format_humidity</code></p> </li> <li> <p><code>{humidity}</code> Humidity percentage</p> </li> <li> <p><code>format_pressure</code></p> </li> <li> <p><code>{pressure}</code> Current atmospheric pressure in Pascals</p> </li> <li> <p><code>{sea_level}</code> Sea-level atmospheric pressure in Pascals.</p> </li> <li> <p><code>format_rain</code></p> </li> <li> <p><code>{amount}</code> Rainfall in the specified unit</p> </li> <li> <p><code>{unit}</code> The unit specified</p> </li> <li> <p><code>format_snow</code></p> </li> <li> <p><code>{amount}</code> Snowfall in the specified unit</p> </li> <li> <p><code>{unit}</code> The unit specified</p> </li> <li> <p><code>format_temperature</code></p> </li> <li> <p><code>{current}</code> Current temperature</p> </li> <li> <p><code>{max}</code> Maximum temperature in the configured unit</p> </li> <li> <p><code>{min}</code> Minimum temperature</p> </li> <li> <p><code>{unit}</code> The unit specified</p> </li> <li> <p><code>format_wind</code></p> </li> <li> <p><code>{degree}</code> Current wind heading</p> </li> <li> <p><code>{direction}</code> Letter reprents direction e.g. N,NE,E etc</p> </li> <li> <p><code>{gust}</code> Wind gusts speed in the specified unit</p> </li> <li> <p><code>{speed}</code> Wind speed</p> </li> <li> <p><code>{unit}</code> The unit specified     format only:</p> </li> <li> <p><code>{city}</code> The name of the city where the weather is</p> </li> <li> <p><code>{country}</code> The name of the country where the weather is</p> </li> <li> <p><code>{forecast}</code> Output of format_forecast     format, format_forecast:</p> </li> <li> <p><code>{clouds}</code> Output of format_clouds</p> </li> <li> <p><code>{description}</code> Natural description of the current weather</p> </li> <li> <p><code>{humidity}</code> Output of format_humidity</p> </li> <li> <p><code>{main}</code> Short description of the current weather</p> </li> <li> <p><code>{pressure}</code> Output of format_pressure</p> </li> <li> <p><code>{snow}</code> Output of format_snow</p> </li> <li> <p><code>{sunrise}</code> Output of format_sunrise</p> </li> <li> <p><code>{sunset}</code> Output of format_sunset</p> </li> <li> <p><code>{temperature}</code> Output of format_temperature</p> </li> <li> <p><code>{wind}</code> Output of format_wind</p> </li> </ul> <p>Examples:</p> <pre><code># change icons\nweather_owm {\n    api_key = &lt;my api key&gt;\n    icons = {\n        '200': \"\u2614\"\n        '230_232': \"\ud83c\udf27\"\n    }\n}\n\n# set a city\nweather_owm {\n    api_key = &lt;my api key&gt;\n    city = 'London'\n}\n\n# set a location\nweather_owm {\n    api_key = &lt;my api key&gt;\n    location = (48.9342, 2.3548)  # Saint-Denis\n}\n</code></pre> <p>author alexoneill</p> <p>@licence MIT</p>"},{"location":"user-guide/modules/#whatismyip","title":"whatismyip","text":"<p>Display public IP address and online status.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_refresh</code> mouse button to refresh this module (default 2)</p> </li> <li> <p><code>button_toggle</code> mouse button to toggle between states (default 1)</p> </li> <li> <p><code>cache_timeout</code> how often we refresh this module in seconds (default 60)</p> </li> <li> <p><code>expected</code> define expected values for format placeholders,     and use <code>color_degraded</code> to show the output of this module     if any of them does not match the actual value.     This should be a dict eg {'country': 'France'}     (default None)</p> </li> <li> <p><code>format</code> available placeholders are {ip} and {country},     as well as any other key in JSON fetched from <code>url_geo</code> (default '{ip}')</p> </li> <li> <p><code>hide_when_offline</code> hide the module output when offline (default False)</p> </li> <li> <p><code>icon_off</code> what to display when offline (default '\u25a0')</p> </li> <li> <p><code>icon_on</code> what to display when online (default '\u25cf')</p> </li> <li> <p><code>mode</code> default mode to display is 'ip' or 'status' (click to toggle)     (default 'ip')</p> </li> <li> <p><code>url_geo</code> IP to check for geo location (must output json)     (default 'https://ifconfig.co/json')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{icon}</code>        eg \u25cf, \u25a0</p> </li> <li> <p><code>{country}</code>     eg France</p> </li> <li> <p><code>{country_iso}</code> eg FR</p> </li> <li> <p><code>{ip}</code>          eg 123.45.67.890</p> </li> <li> <p><code>{ip_decimal}</code>  eg 1234567890</p> </li> <li> <p><code>{city}</code>        eg Paris     any other key in JSON fetched from <code>url_geo</code></p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Offline</p> </li> <li> <p><code>color_degraded</code> Output is unexpected (IP/country mismatch, etc.)</p> </li> <li> <p><code>color_good</code> Online</p> </li> </ul> <p>Examples:</p> <pre><code># ip choices\nwhatismyip {\n    url_geo = \"https://ifconfig.co/json\"\n    # url_geo = \"https://api.ip2location.io\"\n    # url_geo = \"https://ipinfo.io/json\"\n    # url_geo = \"http://ip-api.com/json\"\n}\n</code></pre> <p>author ultrabug, Cyril Levis (@cyrinux)</p>"},{"location":"user-guide/modules/#whoami","title":"whoami","text":"<p>Display logged-in username.</p> <p>Configuration parameters:</p> <ul> <li><code>format</code> display format for this module (default '{username}')</li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{hostname}</code> display current hostname</p> </li> <li> <p><code>{username}</code> display current username</p> </li> </ul> <p>Inspired by i3 FAQ:     https://faq.i3wm.org/question/1618/add-user-name-to-status-bar.1.html</p> <p>author ultrabug</p>"},{"location":"user-guide/modules/#wifi","title":"wifi","text":"<p>Display WiFi bit rate, quality, signal and SSID using iw.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>bitrate_bad</code> Bad bit rate in Mbit/s (default 26)</p> </li> <li> <p><code>bitrate_degraded</code> Degraded bit rate in Mbit/s (default 53)</p> </li> <li> <p><code>blocks</code> a string, where each character represents quality level     (default \"_\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\")</p> </li> <li> <p><code>cache_timeout</code> Update interval in seconds (default 10)</p> </li> <li> <p><code>device</code> specify name or MAC address of device to use, otherwise auto     (default None)</p> </li> <li> <p><code>down_color</code> Output color when disconnected, possible values:     \"good\", \"degraded\", \"bad\" (default \"bad\")</p> </li> <li> <p><code>format</code> Display format for this module     (default 'W: {bitrate} {bitrate_unit} {signal_percent}% {ssid}|W: down')</p> </li> <li> <p><code>signal_bad</code> Bad signal strength in percent (default 29)</p> </li> <li> <p><code>signal_degraded</code> Degraded signal strength in percent (default 49)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use (default [])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{bitrate}</code> Display bitrate</p> </li> <li> <p><code>{bitrate_unit}</code> Display bitrate unit</p> </li> <li> <p><code>{device}</code> Display device name</p> </li> <li> <p><code>{freq_ghz}</code> Network frequency in Ghz</p> </li> <li> <p><code>{freq_mhz}</code> Network frequency in Mhz</p> </li> <li> <p><code>{icon}</code> Character representing the quality based on bitrate,     as defined by the 'blocks'</p> </li> <li> <p><code>{ip}</code> Display IP address</p> </li> <li> <p><code>{signal_dbm}</code> Display signal in dBm</p> </li> <li> <p><code>{signal_percent}</code> Display signal in percent</p> </li> <li> <p><code>{ssid}</code> Display SSID</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Signal strength signal_bad or lower</p> </li> <li> <p><code>color_degraded</code> Signal strength signal_degraded or lower</p> </li> <li> <p><code>color_good</code> Signal strength above signal_degraded</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li> <p><code>iw</code> cli configuration utility for wireless devices</p> </li> <li> <p><code>ip</code> only for {ip}. may be part of iproute2: ip routing utilities</p> </li> </ul> <p>Notes:     Some distributions require commands to be run with privileges. You can     give commands some root rights to run without a password by editing     sudoers file, i.e., <code>sudo visudo</code>, and add a line that requires sudo.     '&lt;user&gt; ALL=(ALL) NOPASSWD:/sbin/iw dev,/sbin/iw dev [a-z] link'     '&lt;user&gt; ALL=(ALL) NOPASSWD:/sbin/ip addr list [a-z]'</p> <p>author Markus Weimar &lt;mail@markusweimar.de&gt;</p> <p>license BSD</p>"},{"location":"user-guide/modules/#window","title":"window","text":"<p>Display window properties (i.e. title, class, instance).</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for i3-msg or swaymsg (default 0.5)</p> </li> <li> <p><code>format</code> display format for this module (default \"{title}\")</p> </li> <li> <p><code>hide_title</code> hide title on containers with window title (default False)</p> </li> <li> <p><code>max_width</code> specify width to truncate title with ellipsis (default None)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{class}</code> window class</p> </li> <li> <p><code>{instance}</code> window instance</p> </li> <li> <p><code>{title}</code> window title</p> </li> </ul> <p>Requires:</p> <ul> <li><code>i3ipc</code> an improved python library to control i3wm and sway</li> </ul> <p>Examples:</p> <pre><code># show alternative instead of empty title\nwindow_title {\n    format = '{title}|\u2665'\n}\n</code></pre> <p>author shadowprince (counter), Anon1234 (async)</p> <p>license Eclipse Public License (counter), BSD (async)</p>"},{"location":"user-guide/modules/#wwan","title":"wwan","text":"<p>Display WWANs, IP addresses, signals, properties and sms.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 5)</p> </li> <li> <p><code>format</code> display format for this module     (default '\\?color=state WW: [\\?if=state_name=connected '     '({signal_quality_0}% at {m3gpp_operator_name}) '     '[{format_ipv4}[\\?soft  ]{format_ipv6}]|{state_name}]'     '[ SMS {messages} [{format_message}]]')</p> </li> <li> <p><code>format_ipv4</code> display format for ipv4 network (default '[{address}]')</p> </li> <li> <p><code>format_ipv6</code> display format for ipv6 network (default '[{address}]')</p> </li> <li> <p><code>format_message</code> display format for SMS messages     (default '\\?if=index&lt;2 {number} [\\?max_length=10 {text}...]')</p> </li> <li> <p><code>format_message_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>format_notification</code> specify notification to use (default None)</p> </li> <li> <p><code>format_stats</code> display format for statistics (default '{duration_hms}')</p> </li> <li> <p><code>modem</code> specify a modem device to use, otherwise auto (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'bad'), (11, 'good')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{access_technologies}</code>           network speed, in bit, eg 192</p> </li> <li> <p><code>{access_technologies_name}</code>      network speed names, eg LTE</p> </li> <li> <p><code>{current_bands}</code>                 modem band, eg 1</p> </li> <li> <p><code>{current_bands_name}</code>            modem band name, eg GSM/GPRS/EDGE 900 MHz</p> </li> <li> <p><code>{format_ipv4}</code>                   format for ipv4 network config</p> </li> <li> <p><code>{format_ipv6}</code>                   format for ipv6 network config</p> </li> <li> <p><code>{format_message}</code>                format for SMS messages</p> </li> <li> <p><code>{format_stats}</code>                  format for network connection statistics</p> </li> <li> <p><code>{interface_name}</code>                network interface name, eg wwp0s20f0u2i12</p> </li> <li> <p><code>{m3gpp_registration_state_name}</code> network registration state name, eg HOME</p> </li> <li> <p><code>{m3gpp_registration_state}</code>      network registration state, eg 1</p> </li> <li> <p><code>{m3gpp_operator_code}</code>           network operator code, eg 496</p> </li> <li> <p><code>{m3gpp_operator_name}</code>           network operator name, eg Py3status Telecom</p> </li> <li> <p><code>{message}</code>                       number of messages, eg 2</p> </li> <li> <p><code>{messages}</code>                      total number of messages, eg 30</p> </li> <li> <p><code>{signal_quality_0}</code>              signal quality percentage, eg 88</p> </li> <li> <p><code>{signal_quality_1}</code>              signal quality refreshed, eg True/False</p> </li> <li> <p><code>{state}</code>                         network state, eg 0, 7, 11</p> </li> <li> <p><code>{state_name}</code>                    network state name, eg searching, connected</p> </li> </ul> <p>format_ipv4 placeholders:</p> <ul> <li> <p><code>{address}</code> ip address</p> </li> <li> <p><code>{dns1}</code>    dns1</p> </li> <li> <p><code>{dns2}</code>    dns2</p> </li> <li> <p><code>{gateway}</code> gateway</p> </li> <li> <p><code>{mtu}</code>     mtu</p> </li> <li> <p><code>{prefix}</code>  netmask prefix</p> </li> </ul> <p>format_ipv6 placeholders:</p> <ul> <li> <p><code>{address}</code> ip address</p> </li> <li> <p><code>{dns1}</code>    dns1</p> </li> <li> <p><code>{dns2}</code>    dns2</p> </li> <li> <p><code>{gateway}</code> gateway</p> </li> <li> <p><code>{mtu}</code>     mtu</p> </li> <li> <p><code>{prefix}</code>  netmask prefix</p> </li> </ul> <p>format_message placeholders:</p> <ul> <li> <p><code>{index}</code>   message index</p> </li> <li> <p><code>{text}</code>    text received, eg: 'hello how are you?'</p> </li> <li> <p><code>{number}</code>  contact number, eg: '+33601020304'</p> </li> </ul> <p>format_stats placeholders:</p> <ul> <li> <p><code>{duration}</code>     time since connected, in seconds, eg 171</p> </li> <li> <p><code>{duration_hms}</code> time since connected, in [hh:]mm:ss, eg 02:51</p> </li> <li> <p><code>{tx_bytes}</code>     transmit bytes</p> </li> <li> <p><code>{rx_bytes}</code>     receive bytes</p> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>format</code>     xxx: print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li> <p><code>modemmanager</code> mobile broadband modem management service</p> </li> <li> <p><code>networkmanager</code> network connection manager and user applications</p> </li> <li> <p><code>dbus-python</code> Python bindings for dbus</p> </li> </ul> <p>Examples:</p> <pre><code># show state names, eg initializing, searching, registered, connecting.\nwwan {\n    format = '\\?color=state WWAN: {state_name}'\n}\n\n# show state names, and when connected, show network information too.\nwwan {\n    format = 'WWAN:[\\?color=state [ {format_ipv4}]'\n    format += '[ {format_ipv6}] {state_name}]'\n}\n\n# show internet access technologies name with up/down state.\nwwan {\n    format = 'WWAN: [\\?color=state [{access_technologies_name}]'\n    format += '[\\?soft  ][\\?if=state_name=connected up|down]]'\n}\n\n# show SMS messages only\nwwan {\n    format = '[SMS: {format_message}]'\n}\n\n# SMS counter\nwwan {\n    format = 'SMS: {message}/{messages}'\n}\n\n\n# add starter pack thresholds. you do not need to add them all.\nwwan {\n    thresholds = {\n        'access_technologies': [\n            (2, 'bad'), (32, 'orange'), (512, 'degraded'), (16384, 'good')\n        ],\n        'signal_quality_0': [\n            (0, 'bad'), (10, 'orange'), (30, 'degraded'), (50, 'good')\n        ],\n        'signal_quality_1': [\n            (False, 'darkgrey'), (True, 'degraded')\n        ],\n        'state': [\n            (-1, 'bad'), (4, 'orange'), (5, 'degraded'), (11, 'good')\n        ]\n    }\n}\n\n# customize WWAN format\nwwan {\n    format = 'WWAN: [\\?color=state {state_name}] '\n    format += '[\\?if=m3gpp_registration_state_name=HOME {m3gpp_operator_name} ] '\n    format += '[\\?if=m3gpp_registration_state_name=ROAMING {m3gpp_operator_name} ]'\n    format += '[\\?color=access_technologies {access_technologies_name} ]'\n    format += '[([\\?color=signal_quality_0 {signal_quality_0}]]'\n    format += '[\\?if=!signal_quality_1&amp;color=signal_quality_1 \\[!\\]|] '\n    format += '[\\?if=state_name=connected [{format_ipv4}] [{format_stats}]]')\n}\n\n# notify users when an event occur... such as new messages, change in state,\n# disconnected, etc. you need to specify formatting correctly so it does not\n# return anything. otherwise, you always get notifications.\nwwan {\n    # notify users on low signal percent 25%\n    format_notification = '\\?if=signal_quality_0&lt;25 Low signal'\n\n    # notify users on connected state\n    format_notification = '[\\?if=state_name=connected Connected.]'\n    format_notification += '[\\?if=state_name=disconnected Disconnected.]'\n\n    # message notification\n    format_message = '[\\?if=index=1 [{number}] [{text}]]'\n    format_notification = '[\\?if=message&gt;0 {format_message}]'\n}\n</code></pre> <p>author Cyril Levis (@cyrinux), girst (https://gir.st/)</p>"},{"location":"user-guide/modules/#wwan_status","title":"wwan_status","text":"<p>Display network and IP address for newer Huwei modems.</p> <p>It is tested for Huawei E3276 (usb-id 12d1:1506) aka Telekom Speed Stick LTE III but may work on other devices too.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>baudrate</code> There should be no need to configure this, but     feel free to experiment.     (default 115200)</p> </li> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds.     (default 5)</p> </li> <li> <p><code>consider_3G_degraded</code> If set to True, only 4G-networks will be     considered 'good'; 3G connections are shown     as 'degraded', which is yellow by default. Mostly     useful if you want to keep track of where there     is a 4G connection.     (default False)</p> </li> <li> <p><code>format_down</code> What to display when the modem is not plugged in     (default 'WWAN: down')</p> </li> <li> <p><code>format_error</code> What to display when modem can't be accessed.     (default 'WWAN: {error}')</p> </li> <li> <p><code>format_no_service</code> What to display when the modem does not have a     network connection. This allows to omit the (then     meaningless) network generation.     (default 'WWAN: {status} {ip}')</p> </li> <li> <p><code>format_up</code> What to display upon regular connection     (default 'WWAN: {status} ({netgen}) {ip}')</p> </li> <li> <p><code>interface</code> The default interface to obtain the IP address     from. For wvdial this is most likely ppp0.     For netctl it can be different.     (default 'ppp0')</p> </li> <li> <p><code>modem</code> The device to send commands to. (default '/dev/ttyUSB1')</p> </li> <li> <p><code>modem_timeout</code> The timespan between querying the modem and     collecting the response.     (default 0.4)</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Error or no connection</p> </li> <li> <p><code>color_degraded</code> Low generation connection eg 2G</p> </li> <li> <p><code>color_good</code> Good connection</p> </li> </ul> <p>Requires:</p> <ul> <li> <p><code>netifaces</code> portable module to access network interface information</p> </li> <li> <p><code>pyserial</code> multiplatform serial port module for python</p> </li> </ul> <p>author Timo Kohorst timo@kohorst-online.com</p> <p>PGP: B383 6AE6 6B46 5C45 E594 96AB 89D2 209D DBF3 2BB5</p>"},{"location":"user-guide/modules/#xkb_input","title":"xkb_input","text":"<p>Switch inputs.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_next</code> mouse button to cycle next layout (default 4)</p> </li> <li> <p><code>button_prev</code> mouse button to cycle previous layout (default 5)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module; xkb-switch     and swaymsg will listen for new updates instead (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default '{format_input}')</p> </li> <li> <p><code>format_input</code> display format for inputs     (default '[{alias}][\\?soft  ][\\?color=s {s}[ {v}]]')</p> </li> <li> <p><code>format_input_separator</code> show separator if more than one (default ' ')</p> </li> <li> <p><code>inputs</code> specify a list of inputs to use in swaymsg (default [])</p> </li> <li> <p><code>switcher</code> specify xkb-switch, xkblayout-state, xkbgroup,     or swaymsg to use, otherwise auto (default None)</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(\"fr\", \"lightgreen\"), (\"ru\", \"lightcoral\"),     (\"ua\", \"khaki\"),  (\"us\", \"lightskyblue\")])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{format_input}</code> format for inputs</p> </li> <li> <p><code>{input}</code>        number of inputs, eg 1</p> </li> <li> <p><code>{switcher}</code>     eg, xkb-switch, xkblayout-state, xkbgroup, swaymsg</p> </li> </ul> <p>format_input placeholders:</p> <ul> <li> <p><code>xkb-switch</code></p> </li> <li> <p><code>xkblayout-state</code></p> </li> <li> <p><code>xkbgroup</code></p> </li> <li> <p><code>swaymsg</code></p> </li> <li> <p><code>{c}</code> layout number, eg, 0</p> </li> <li> <p><code>{n}</code> layout name, eg, English (US)</p> </li> <li> <p><code>{s}</code> layout symbol, eg, us</p> </li> <li> <p><code>{v}</code> layout variant, eg, basic</p> </li> <li> <p><code>{e}</code> layout variant, {v} or {s}, eg, dvorak</p> </li> <li> <p><code>{C}</code> layout count, eg, 2</p> </li> <li> <p><code>swaymsg</code></p> </li> <li> <p><code>{alias}</code>                   custom string or {name}</p> </li> <li> <p><code>{identifier}</code>              eg, 162:253 USB-HID Keyboard</p> </li> <li> <p><code>{name}</code>                    eg, Trackball, Keyboard, etc</p> </li> <li> <p><code>{vendor}</code>                  eg, 320</p> </li> <li> <p><code>{product}</code>                 eg, 556</p> </li> <li> <p><code>{type}</code>                    eg, pointer, keyboard, touchpad, etc</p> </li> <li> <p><code>{xkb_layout_names}</code>        eg, English (US), French, Russian</p> </li> <li> <p><code>{xkb_active_layout_index}</code> eg, 0, 1, 2, etc</p> </li> <li> <p><code>{xkb_active_layout_name}</code>  eg, English (US)</p> </li> <li> <p><code>{send_events}</code>             eg, True</p> </li> <li> <p><code>{accel_speed}</code>             eg, 0.0</p> </li> <li> <p><code>{accel_profile}</code>           eg, adaptive</p> </li> <li> <p><code>{natural_scroll}</code>          eg, adaptive</p> </li> <li> <p><code>{left_handed}</code>             eg, False</p> </li> <li> <p><code>{middle_emulation}</code>        eg, False</p> </li> <li> <p><code>{scroll_method}</code>           eg, None</p> </li> <li> <p><code>{scroll_button}</code>           eg, 274</p> <pre><code>Use `swaymsg -r -t get_inputs` to get a list of current sway inputs\nand for a list of placeholders. Not all of placeholders will be usable.\n</code></pre> </li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>Requires:</p> <ul> <li> <p><code>xkb-switch</code> program that allows to query and change the xkb layout state</p> </li> <li> <p><code>xkblayout-state</code> a command-line program to get/set the current keyboard layout</p> </li> <li> <p><code>xkbgroup</code> query and change xkb layout state</p> </li> <li> <p><code>swaymsg</code> send messages to sway window manager</p> </li> </ul> <p>Examples:</p> <pre><code># sway users: for best results, add switcher to avoid false positives with `pgrep i3`\n# because sway users can be using scripts, tools, et cetera with `i3` in its name.\nxkb_input {\n    switcher = \"swaymsg\"\n}\n\n# sway users: specify inputs to fnmatch\nxkb_input {\n    # display logitech identifiers\n    inputs = [{\"identifier\": \"*Logitech*\"}]\n\n    # display logi* keyboards only\n    inputs = [{\"name\": \"Logi*\", \"type\": \"keyb*\"}]\n\n    # display pointers only\n    inputs = [{\"type\": \"pointer\"}]\n}\n\n# sway users: display inputs, optional aliases, et cetera\nxkb_input {\n    inputs = [\n        {\"identifier\": \"1625:3192:Heng_Yu_Technology_Poker_II\", \"alias\": \"Poker 2\"},\n        {\"identifier\": \"0012:021:USB-HID_Keyboard\", \"alias\": \"Race 3\"},\n        {\"identifier\": \"0123:45678:Logitech_MX_Ergo\", \"alias\": \"MX Ergo\", \"type\": \"pointer\"},\n    ]\n}\n\n# i3 users: display inputs - see https://wiki.archlinux.org/index.php/X_keyboard_extension\n# $ setxkbmap -layout \"us,fr,ru\"  # install xkb-group to enable a listener thread\n</code></pre> <p>author lasers, saengowp, javiertury</p>"},{"location":"user-guide/modules/#xrandr","title":"xrandr","text":"<p>Control screen layout.</p> <p>This modules allows you to handle your screens outputs directly from your bar!     - Detect and propose every possible screen combinations     - Switch between combinations using click events and mouse scroll     - Activate the screen or screen combination on a single click     - It will detect any newly connected or removed screen automatically</p> <p>For convenience, this module also proposes some added features:   - Dynamic parameters for POSITION and WORKSPACES assignment (see below)   - Automatic fallback to a given screen or screen combination when no more     screen is available (handy for laptops)   - Automatically apply this screen combination on start: no need for xorg!   - Automatically move workspaces to screens when they are available   - Define your own subset of output combinations to use</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often to (re)detect the outputs (default 10)</p> </li> <li> <p><code>command</code> a custom command to be run after display configuration changes     (default None)</p> </li> <li> <p><code>fallback</code> when the current output layout is not available anymore,     fallback to this layout if available. This is very handy if you     have a laptop and switched to an external screen for presentation     and want to automatically fallback to your laptop screen when you     disconnect the external screen. (default True)</p> </li> <li> <p><code>fixed_width</code> show output as fixed width (default True)</p> </li> <li> <p><code>force_on_change</code> switch display layout to the leftmost combination mode     of the given list whenever it is available. The combination modes are     checked from left (high priority) to right (less priority) until     one matches.     Example:     We have a laptop with internal screen and we are often moving from     our desk where another screen is available. We want the layout to     follow our changes so that we do not have to switch manually.     So whenever we plug at our desk, we want the second monitor to be     used, and whenever we go away we want everything back on the laptop     screen automatically:             <code>force_on_change = [\"eDP1+DP1\", \"eDP1\"]</code>     NOTES:     Click controls will override <code>force_on_change</code> until the layout     changes in the background so you can still manually control your     layout changes on the bar.     Use the <code>force_on_start</code> to handle initial layout setup on module     startup along with this feature to benefit from fully dynamic and     automated changes of screen layouts.     (default [])</p> </li> <li> <p><code>force_on_start</code> switch to the given combination mode if available     when the module starts (saves you from having to configure xorg)     (default None)</p> </li> <li> <p><code>format</code> display format for xrandr     (default '{output}')</p> </li> <li> <p><code>hide_if_single_combination</code> hide if only one combination is available     (default False)</p> </li> <li> <p><code>icon_clone</code> icon used to display a 'clone' combination     (default '=')</p> </li> <li> <p><code>icon_extend</code> icon used to display a 'extend' combination     (default '+')</p> </li> <li> <p><code>on_udev_drm</code> dynamic variable to watch for <code>drm</code> udev subsystem events to     trigger specified action.     (default 'refresh_and_freeze')</p> </li> <li> <p><code>output_combinations</code> string used to define your own subset of output     combinations to use, instead of generating every possible combination     automatically. Provide the values in the format that this module uses,     splitting the combinations using '|' character.     The combinations will be rotated in the exact order as you listed them.     When an output layout is not available any more, the configurations     are automatically filtered out.     Example:     Assuming the default values for <code>icon_clone</code> and <code>icon_extend</code>     are used, and assuming you have two screens 'eDP1' and 'DP1', the     following setup will reduce the number of output combinations     from four (every possible one) down to two.             <code>output_combinations = \"eDP1|eDP1+DP1\"</code> (default None)</p> </li> </ul> <p>Dynamic configuration parameters:</p> <ul> <li> <p><code>&lt;OUTPUT&gt;_icon</code> use this icon instead of OUTPUT name as text     Example: DP1_icon = \"\ud83d\uddb5\"</p> </li> <li> <p><code>&lt;OUTPUT&gt;_pos</code> apply the given position to the OUTPUT     Example: DP1_pos = \"-2560x0\"     Example: DP1_pos = \"above eDP1\"     Example: DP1_pos = \"below eDP1\"     Example: DP1_pos = \"left-of LVDS1\"     Example: DP1_pos = \"right-of eDP1\"</p> </li> <li> <p><code>&lt;OUTPUT&gt;_workspaces</code> comma separated list of workspaces to move to     the given OUTPUT when it is activated     Example: DP1_workspaces = \"1,2,3\"</p> </li> <li> <p><code>&lt;OUTPUT&gt;_rotate</code> rotate the output as told     Example: DP1_rotate = \"left\"</p> </li> <li> <p><code>&lt;OUTPUT&gt;_mode</code> define the mode (resolution) for the output     if not specified use --auto : preferred mode     Example: eDP1_mode = \"2560x1440\"</p> </li> <li> <p><code>&lt;OUTPUT&gt;_primary</code> apply the primary to the OUTPUT     Example: DP1_primary = True</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{output}</code> xrandr output</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Displayed layout unavailable</p> </li> <li> <p><code>color_degraded</code> Using a fallback layout</p> </li> <li> <p><code>color_good</code> Displayed layout active</p> </li> </ul> <p>Notes:     Some days are just bad days. Running <code>xrandr --query</code> command can     cause unexplainable brief screen freezes due to an overall combination     of computer hardware, installed software, your choice of linux distribution,     and/or some other unknown factors such as recent system updates.</p> <pre><code>Configuring `cache_timeout` with a different number, eg `3600` (an hour)\nor `-1` (runs once) can be used to remedy this issue. See issue #580.\n</code></pre> <p>Examples:</p> <pre><code># start with a preferable setup\nxrandr {\n    force_on_start = \"eDP1+DP1\"\n    DP1_pos = \"left-of eDP1\"\n    VGA_workspaces = \"7\"\n}\n</code></pre> <p>author ultrabug</p>"},{"location":"user-guide/modules/#xrandr_rotate","title":"xrandr_rotate","text":"<p>Control screen rotation.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> how often to refresh this module.     (default 10)</p> </li> <li> <p><code>format</code> a string that formats the output, can include placeholders.     (default '{icon}')</p> </li> <li> <p><code>hide_if_disconnected</code> a boolean flag to hide icon when <code>screen</code> is     disconnected.     It has no effect unless <code>screen</code> option is also configured.     (default False)</p> </li> <li> <p><code>horizontal_icon</code> a character to represent horizontal rotation.     (default 'H')</p> </li> <li> <p><code>horizontal_rotation</code> a horizontal rotation for xrandr to use.     Available options: 'normal' or 'inverted'.     (default 'normal')</p> </li> <li> <p><code>screen</code> display output name to rotate, as detected by xrandr.     If not provided, all enabled screens will be rotated.     (default None)</p> </li> <li> <p><code>vertical_icon</code> a character to represent vertical rotation.     (default 'V')</p> </li> <li> <p><code>vertical_rotation</code> a vertical rotation for xrandr to use.     Available options: 'left' or 'right'.     (default 'left')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li> <p><code>{icon}</code> a rotation icon, specified by <code>horizontal_icon</code> or <code>vertical_icon</code>.</p> </li> <li> <p><code>{screen}</code> a screen name, specified by <code>screen</code> option or detected     automatically if only one screen is connected, otherwise 'ALL'.</p> </li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_degraded</code> Screen is disconnected</p> </li> <li> <p><code>color_good</code> Displayed rotation is active</p> </li> </ul> <p>author Maxim Baz (https://github.com/maximbaz)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#xscreensaver","title":"xscreensaver","text":"<p>Control Xscreensaver.</p> <p>This script is useful for people who let Xscreensaver manage DPMS settings. Xscreensaver has its own DPMS variables separate from xset. DPMS can be safely turned off in xset as long as Xscreensaver is running. Settings can be managed using \"xscreensaver-demo\".</p> <p>Configuration parameters:</p> <ul> <li> <p><code>button_activate</code> mouse button to activate Xscreensaver (default 3)</p> </li> <li> <p><code>button_toggle</code> mouse button to toggle Xscreensaver (default 1)</p> </li> <li> <p><code>cache_timeout</code> refresh interval for this module (default 15)</p> </li> <li> <p><code>format</code> display format for this module (default '{icon}')</p> </li> <li> <p><code>icon_off</code> show when Xscreensaver is not running (default 'XSCR')</p> </li> <li> <p><code>icon_on</code> show when Xscreensaver is running (default 'XSCR')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{icon}</code> Xscreensaver icon</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_on</code> Enabled, defaults to color_good</p> </li> <li> <p><code>color_off</code> Disabled, defaults to color_bad</p> </li> </ul> <p>author neutronst4r, lasers</p>"},{"location":"user-guide/modules/#xsel","title":"xsel","text":"<p>Display X selection.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 0.5)</p> </li> <li> <p><code>command</code> the clipboard command to run (default 'xsel --output')</p> </li> <li> <p><code>format</code> display format for this module (default '{selection}')</p> </li> <li> <p><code>log_file</code> specify the clipboard log to use (default None)</p> </li> <li> <p><code>max_size</code> strip the selection to this value (default 15)</p> </li> <li> <p><code>symmetric</code> show beginning and end of the selection string     with respect to configured max_size. (default True)</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{selection}</code> output from clipboard command</li> </ul> <p>Requires:</p> <ul> <li><code>xsel</code> a command-line program to retrieve/set the X selection</li> </ul> <p>Examples:</p> <pre><code>xsel {\n    max_size = 50\n    command = \"xsel --clipboard --output\"\n    on_click 1 = \"exec xsel --clear --clipboard\"\n    log_file = \"~/.local/share/xsel/clipboard_log\"\n}\n</code></pre> <p>author Sublim3 umbsublime@gamil.com</p> <p>license BSD</p>"},{"location":"user-guide/modules/#yandexdisk_status","title":"yandexdisk_status","text":"<p>Display Yandex.Disk status.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> refresh interval for this module (default 10)</p> </li> <li> <p><code>format</code> display format for this module (default 'Yandex.Disk: {status}')</p> </li> <li> <p><code>status_busy</code> show when Yandex.Disk is busy (default None)</p> </li> <li> <p><code>status_off</code> show when Yandex.Disk isn't running (default 'Not started')</p> </li> <li> <p><code>status_on</code> show when Yandex.Disk is idling (default 'Idle')</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{status}</code> Yandex.Disk status</li> </ul> <p>Color options:</p> <ul> <li> <p><code>color_bad</code> Not started</p> </li> <li> <p><code>color_degraded</code> Idle</p> </li> <li> <p><code>color_good</code> Busy</p> </li> </ul> <p>Requires:</p> <ul> <li><code>yandex-disk</code> command line interface for Yandex.Disk</li> </ul> <p>author Vladimir Potapev (github:vpotapev)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#yubikey","title":"yubikey","text":"<p>Show an indicator when YubiKey is waiting for a touch.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>format</code> Display format for the module.     (default '[YubiKey[\\?if=is_gpg ][\\?if=is_u2f ]]')</p> </li> <li> <p><code>socket_path</code> A path to the yubikey-touch-detector socket file.     (default '$XDG_RUNTIME_DIR/yubikey-touch-detector.socket')</p> </li> </ul> <p>Control placeholders:</p> <ul> <li> <p><code>{is_gpg}</code> a boolean, True if YubiKey is waiting for a touch due to a gpg operation.</p> </li> <li> <p><code>{is_u2f}</code> a boolean, True if YubiKey is waiting for a touch due to a pam-u2f request.</p> </li> </ul> <p>Requires:</p> <ul> <li><code>github.com/maximbaz/yubikey-touch-detector</code> tool to detect when YubiKey is waiting for a touch</li> </ul> <p>author Maxim Baz (https://github.com/maximbaz)</p> <p>license BSD</p>"},{"location":"user-guide/modules/#zypper_updates","title":"zypper_updates","text":"<p>Display number of pending updates for OpenSUSE Linux.</p> <p>Configuration parameters:</p> <ul> <li> <p><code>cache_timeout</code> How often we refresh this module in seconds     (default 600)</p> </li> <li> <p><code>format</code> Display format to use     (default 'zypper: [\\?color=update {update}]')</p> </li> <li> <p><code>thresholds</code> specify color thresholds to use     (default [(0, 'good'), (50, 'degraded'), (100, 'bad')])</p> </li> </ul> <p>Format placeholders:</p> <ul> <li><code>{updates}</code> number of pending zypper updates</li> </ul> <p>Color thresholds:</p> <ul> <li><code>xxx</code> print a color based on the value of <code>xxx</code> placeholder</li> </ul> <p>author Ioannis Bonatakis &lt;ybonatakis@suse.com&gt;</p> <p>license BSD</p>"},{"location":"user-guide/remote-control/","title":"Controlling py3status remotely","text":"<p>Just like i3status, you can force an update of your i3bar by sending a SIGUSR1 signal to py3status. Note that this will also send a SIGUSR1 signal to i3status.</p> <pre><code>$ killall -USR1 py3status\n</code></pre>"},{"location":"user-guide/remote-control/#the-py3-cmd-cli","title":"The py3-cmd CLI","text":"<p>py3status can be controlled remotely via the <code>py3-cmd</code> cli utility.</p> <p>This utility allows you to run a number of commands.</p> <pre><code># button numbers\n1 = left click\n2 = middle click\n3 = right click\n4 = scroll up\n5 = scroll down\n</code></pre>"},{"location":"user-guide/remote-control/#commands-available","title":"Commands available","text":""},{"location":"user-guide/remote-control/#click","title":"click","text":"<p>Send a click event to a module as though it had been clicked on. You can specify the button to simulate.</p> <pre><code># send a left/middle/right click\n$ py3-cmd click --button 1 dpms      # left\n$ py3-cmd click --button 2 sysdata   # middle\n$ py3-cmd click --button 3 pomodoro  # right\n\n# send a up/down click\n$ py3-cmd click --button 4 volume_status  # up\n$ py3-cmd click --button 5 volume_status  # down\n</code></pre> <pre><code># toggle button in frame module\n$ py3-cmd click --button 1 --index button frame  # left\n\n# change modules in group module\n$ py3-cmd click --button 5 --index button group  # down\n\n# change time units in timer module\n$ py3-cmd click --button 4 --index hours timer    # up\n$ py3-cmd click --button 4 --index minutes timer  # up\n$ py3-cmd click --button 4 --index seconds timer  # up\n</code></pre>"},{"location":"user-guide/remote-control/#list","title":"list","text":"<p>Print a list of modules or module docstrings.</p> <pre><code># list one or more modules\n$ py3-cmd list clock loadavg xrandr  # full\n$ py3-cmd list coin* git* window*    # fnmatch\n$ py3-cmd list [a-e]*                # abcde\n\n# list all modules\n$ py3-cmd list --all\n\n# show full (i.e. docstrings)\n$ py3-cmd list vnstat uname -f\n</code></pre>"},{"location":"user-guide/remote-control/#refresh","title":"refresh","text":"<p>Cause named module(s) to have their output refreshed.</p> <pre><code># refresh all instances of the wifi module\n$ py3-cmd refresh wifi\n\n# refresh multiple modules\n$ py3-cmd refresh coin_market github weather_yahoo\n\n# refresh module with instance name\n$ py3-cmd refresh \"weather_yahoo chicago\"\n\n# refresh all modules\n$ py3-cmd refresh --all\n</code></pre>"},{"location":"user-guide/remote-control/#calling-commands-from-i3","title":"Calling commands from i3","text":"<p><code>py3-cmd</code> can be used in your i3 configuration file.</p> <p>To send a click event to the whatismyip module when <code>Mod+x</code> is pressed</p> <pre><code>bindsym $mod+x exec py3-cmd click whatismyip\n</code></pre> <p>This example shows how volume control keys can be bound to change the volume and then cause the <code>volume_status</code> module to be updated.</p> <pre><code>bindsym XF86AudioRaiseVolume  exec \"amixer -q sset Master 5%+ unmute; py3-cmd refresh volume_status\"\nbindsym XF86AudioLowerVolume  exec \"amixer -q sset Master 5%- unmute; py3-cmd refresh volume_status\"\nbindsym XF86AudioMute         exec \"amixer -q sset Master toggle; py3-cmd refresh volume_status\"\n</code></pre>"},{"location":"user-guide/user-contributed-conf-examples/","title":"User Contributed Configuration Examples","text":"<p>Here you can find community contributed configuration examples to help you get started with some modules or benefit from the tricks of other hackers!</p>"},{"location":"user-guide/user-contributed-conf-examples/#ultrabugs-configuration-examples","title":"Ultrabug's configuration examples","text":"<pre><code># one button for bluetooth on/off\nbluetooth {\n    format = \"\uf519\"\n    on_click 1 = \"exec bluetoothctl power on\"\n    on_click 3 = \"exec bluetoothctl power off\"\n}\n\n# I use pulseausio and I like to control the sinks and sources \n# directly from my bar!\n#\n# These modules allow me to not only control the volume of the given\n# devices but to also switch the sound output from one to another\n\n# This is the speakers from my laptop, I can switch sound to it\n# on middle click\nvolume_status speakers {\n    command = \"pactl\"\n    device = \"alsa_output.pci-0000_00_1f.3.analog-stereo\"\n    format = \"\ud83d\udcbb{percentage}%\"\n    format_muted = \"\ud83d\udcbb{percentage}%\"\n    on_click 2 = \"exec pactl set-default-sink alsa_output.pci-0000_00_1f.3.analog-stereo\"\n    thresholds = [(0, 'bad'), (5, 'degraded'), (10, 'good')]\n}\n\n# I plugin a USB headset, it appears, I can switch default sound to\n# it while controlling its volume output. When disconnected, it\n# disappears from the bar\nvolume_status sennheiser {\n    command = \"pactl\"\n    device = \"alsa_output.usb-Sennheiser_\"\n    format = \"[\\?if=!percentage=? \ud83c\udfa7{percentage}%]\"\n    format_muted = '\ud83c\udfa7{percentage}%'\n    on_click 2 = \"exec pactl set-default-sink alsa_output.usb-Sennheiser_Sennheiser_SC_160_USB_A002430203100377-00.analog-stereo\"\n    thresholds = [(0, 'bad'), (5, 'degraded'), (10, 'good')]\n}\n\n# I also can activate a remote bluetooth speaker by clicking on this,\n# when it connects the sound percentage appears, I can switch output\n# to it by middle clicking or disconnect it by right clicking\nvolume_status bose {\n    command = \"pactl\"\n    device = \"bluez_sink..+.a2dp_sink\"\n    format = \"[\\?if=!percentage=? \ud83d\udcfb{percentage}%][\\?if=percentage=? \ud83d\udcfb]\"\n    format_muted = '\ud83d\udcfb{percentage}%'\n    on_click 2 = \"exec pactl set-default-sink bluez_sink.2C_41_A1_Z7_FA_C2.a2dp_sink\"\n    on_click 1 = \"exec bluetoothctl connect 2C:41:A1:Z7:FA:C2\"\n    on_click 3 = \"exec bluetoothctl disconnect 2C:41:A1:Z7:FA:C2\"\n    thresholds = [(0, 'bad'), (5, 'degraded'), (10, 'good')]\n    max_volume = 200\n}\n\n# I also control the default microphone volume from the bar\n# and can mute it\nvolume_status mic {\n    format = '\ud83c\udf99\ufe0f{percentage}%'\n    format_muted = '\ud83c\udf99\ufe0f{percentage}%'\n    button_down = 5\n    button_mute = 1\n    button_up = 4\n    is_input = true\n    thresholds = [(0, 'bad'), (10, 'degraded'), (20, 'good')]\n}\n\n# DMPS status shows as a red/green screen\ndpms {\n    icon_off = \"\uf108\"\n    icon_on = \"\uf108\"\n}\n\n# cycling time in meaningful cities\ngroup tz {\n    cycle = 10\n    format = \"{output}\"\n    #click_mode = \"button\"\n\n    tztime la {\n        format = \"\ud83c\udf09%H:%M\"\n        timezone = \"America/Los_Angeles\"\n    }\n\n    tztime ny {\n        format = \"\ud83d\uddfd%H:%M\"\n        timezone = \"America/New_York\"\n    }\n\n    tztime du {\n        format = \"\ud83d\udd4c%H:%M\"\n        timezone = \"Asia/Dubai\"\n    }\n\n    tztime tw {\n        format = \"\u26e9\ufe0f%H:%M\"\n        timezone = \"Asia/Taipei\"\n    }\n\n    tztime in {\n        format = \"\ud83d\uded5%H:%M\"\n        timezone = \"Asia/Kolkata\"\n    }\n}\n</code></pre>"},{"location":"user-guide/user-contributed-conf-examples/#corruptcommits-configuration-examples","title":"CorruptCommit's configuration examples","text":"<pre><code># If I had time, I would make these proper modules.  Free feel to make them\n# if you got time.\n\n# weather without needing an API key\ngetjson wttr {\n    url = \"https://wttr.in/Paris?format=j1\"\n    format = \"{current_condition-0-FeelsLikeC}\u00b0 {current_condition-0-weatherDesc-0-value}\"\n    cache_timeout = 3600\n}\n\n# example output\n# 6\u00b0 Partly cloudy\n\n# SABnzbd status\ngetjson sabnzbd {\n    url = \"https://sabnzbd.example.com/api?mode=queue&amp;apikey=000000000&amp;output=json\"\n    format = \"SABnzbd: {queue-status}\"\n    cache_timeout = 60\n}\n# example output\n# SABnzbd: Idle\n</code></pre>"}]}